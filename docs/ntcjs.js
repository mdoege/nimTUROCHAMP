/* Generated by the Nim Compiler v1.2.4 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI12420037 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12375002 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12375001 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12350273 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12260238 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11961046 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI11961042 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI12325025 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12305187 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1169021 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169045 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI5530232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI5785011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1163065 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI1163006 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI12180708 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1169035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1163045 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI2161907 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10325015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1169041 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169049 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169053 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1168808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169086 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1163016 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1169081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1169017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169019 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169033 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169037 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1163014 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1169037 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169037.node = NNI1169037;
var NNI1169033 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169033.node = NNI1169033;
var NNI1169019 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169019.node = NNI1169019;
NTI1169081.base = NTI1169017;
NTI1169086.base = NTI1169017;
var NNI1169017 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1169081, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1163016, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1163014, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1163014, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1169086, name: "up", sons: null}]};
NTI1169017.node = NNI1169017;
var NNI1168808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1168808.node = NNI1168808;
NTI1169017.base = NTI1168808;
NTI1169019.base = NTI1169017;
NTI1169033.base = NTI1169019;
NTI1169037.base = NTI1169033;
var NNI1169053 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169053.node = NNI1169053;
NTI1169053.base = NTI1169019;
var NNI1169049 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169049.node = NNI1169049;
NTI1169049.base = NTI1169019;
var NNI1169041 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169041.node = NNI1169041;
NTI1169041.base = NTI1169019;
NTI10325015.base = NTI1163014;
var NNI2161907 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1163045, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1163045, name: "b", sons: null}]};
NTI2161907.node = NNI2161907;
var NNI1169035 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169035.node = NNI1169035;
NTI1169035.base = NTI1169033;
var NNI12180708 = {kind: 2, len: 9, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "board", len: 0, typ: NTI1163014, name: "board", sons: null}, 
{kind: 1, offset: "score", len: 0, typ: NTI1163006, name: "score", sons: null}, 
{kind: 1, offset: "wc_w", len: 0, typ: NTI1163065, name: "wc_w", sons: null}, 
{kind: 1, offset: "wc_e", len: 0, typ: NTI1163065, name: "wc_e", sons: null}, 
{kind: 1, offset: "bc_w", len: 0, typ: NTI1163065, name: "bc_w", sons: null}, 
{kind: 1, offset: "bc_e", len: 0, typ: NTI1163065, name: "bc_e", sons: null}, 
{kind: 1, offset: "ep", len: 0, typ: NTI1163045, name: "ep", sons: null}, 
{kind: 1, offset: "kp", len: 0, typ: NTI1163045, name: "kp", sons: null}, 
{kind: 1, offset: "lastcap", len: 0, typ: NTI1163045, name: "lastcap", sons: null}]};
NTI12180708.node = NNI12180708;
var NNI5785011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI5530232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1163045, name: "b", sons: null}]};
NTI5785011.node = NNI5785011;
var NNI1169045 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169045.node = NNI1169045;
var NNI1169043 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169043.node = NNI1169043;
var NNI1169021 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169021.node = NNI1169021;
NTI1169021.base = NTI1169017;
NTI1169043.base = NTI1169021;
NTI1169045.base = NTI1169043;
var NNI12305187 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1163045, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1163045, name: "Field1", sons: null}]};
NTI12305187.node = NNI12305187;
var NNI12325025 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1163006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1163045, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI1163045, name: "Field2", sons: null}]};
NTI12325025.node = NNI12325025;
NTI11961042.base = NTI11961046;
var NNI12260238 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1163065, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1163065, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI1163065, name: "Field2", sons: null}]};
NTI12260238.node = NNI12260238;
var NNI12350273 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1163006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1163014, name: "Field1", sons: null}]};
NTI12350273.node = NNI12350273;
var NNI12375002 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1163045, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1163045, name: "Field1", sons: null}]};
NTI12375002.node = NNI12375002;
NTI12375001.base = NTI12375002;
var NNI12420037 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1163006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1163014, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI1163014, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI1163045, name: "Field3", sons: null}, 
{kind: 1, offset: "Field4", len: 0, typ: NTI1163045, name: "Field4", sons: null}, 
{kind: 1, offset: "Field5", len: 0, typ: NTI1163014, name: "Field5", sons: null}]};
NTI12420037.node = NNI12420037;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1405023, src_1405024, ti_1405025) {
  var result_1410219 = null;

    switch (ti_1405025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_1400401(ti_1405025))) {
      result_1410219 = src_1405024;
      }
      else {
        result_1410219 = [src_1405024[0], src_1405024[1]];
      }
      
      break;
    case 19:
            if (dest_1405023 === null || dest_1405023 === undefined) {
        dest_1405023 = {};
      }
      else {
        for (var key in dest_1405023) { delete dest_1405023[key]; }
      }
      for (var key in src_1405024) { dest_1405023[key] = src_1405024[key]; }
      result_1410219 = dest_1405023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1405025.base == null))) {
      result_1410219 = nimCopy(dest_1405023, src_1405024, ti_1405025.base);
      }
      else {
      if ((ti_1405025.kind == 17)) {
      result_1410219 = (dest_1405023 === null || dest_1405023 === undefined) ? {m_type: ti_1405025} : dest_1405023;
      }
      else {
        result_1410219 = (dest_1405023 === null || dest_1405023 === undefined) ? {} : dest_1405023;
      }
      }
      nimCopyAux(result_1410219, src_1405024, ti_1405025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1405024 === null) {
        result_1410219 = null;
      }
      else {
        if (dest_1405023 === null || dest_1405023 === undefined) {
          dest_1405023 = new Array(src_1405024.length);
        }
        else {
          dest_1405023.length = src_1405024.length;
        }
        result_1410219 = dest_1405023;
        for (var i = 0; i < src_1405024.length; ++i) {
          result_1410219[i] = nimCopy(result_1410219[i], src_1405024[i], ti_1405025.base);
        }
      }
    
      break;
    case 28:
            if (src_1405024 !== null) {
        result_1410219 = src_1405024.slice(0);
      }
    
      break;
    default: 
      result_1410219 = src_1405024;
      break;
    }

  return result_1410219;

}
function makeNimstrLit(c_1390062) {
      var ln = c_1390062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1390062.charCodeAt(i);
  }
  return result;
  

  
}
function toJSStr(s_1390096) {
                    var Tmp5;
            var Tmp7;

  var result_1390097 = null;

    var res_1390170 = new_seq_1390128((s_1390096 != null ? s_1390096.length : 0));
    var i_1390172 = 0;
    var j_1390174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1390172 < (s_1390096 != null ? s_1390096.length : 0))) break L2;
          var c_1390175 = s_1390096[i_1390172];
          if ((c_1390175 < 128)) {
          res_1390170[j_1390174] = String.fromCharCode(c_1390175);
          i_1390172 += 1;
          }
          else {
            var helper_1390198 = new_seq_1390128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1390199 = c_1390175.toString(16);
                  if (((code_1390199 != null ? code_1390199.length : 0) == 1)) {
                  if (helper_1390198 != null) { helper_1390198.push("%0"); } else { helper_1390198 = ["%0"]; };
                  }
                  else {
                  if (helper_1390198 != null) { helper_1390198.push("%"); } else { helper_1390198 = ["%"]; };
                  }
                  
                  if (helper_1390198 != null) { helper_1390198.push(code_1390199); } else { helper_1390198 = [code_1390199]; };
                  i_1390172 += 1;
                    if (((s_1390096 != null ? s_1390096.length : 0) <= i_1390172)) Tmp5 = true; else {                      Tmp5 = (s_1390096[i_1390172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1390175 = s_1390096[i_1390172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1390170[j_1390174] = decodeURIComponent(helper_1390198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1390170[j_1390174] = helper_1390198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1390174 += 1;
        }
    } while(false);
    if (res_1390170 === null) res_1390170 = [];
               if (res_1390170.length < j_1390174) { for (var i=res_1390170.length;i<j_1390174;++i) res_1390170.push(null); }
               else { res_1390170.length = j_1390174; };
    result_1390097 = res_1390170.join("");

  return result_1390097;

}
function raiseException(e_1355218, ename_1355219) {
    e_1355218.name = ename_1355219;
    if ((excHandler == 0)) {
    unhandledException(e_1355218);
    }
    
    throw e_1355218;

  
}
function addInt(a_1395403, b_1395404) {
        var result = a_1395403 + b_1395404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function subInt(a_1395421, b_1395422) {
        var result = a_1395421 - b_1395422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckRange(i_1420016, a_1420017, b_1420018) {
      var Tmp1;

  var result_1420019 = 0;

  BeforeRet: do {
      if (!(a_1420017 <= i_1420016)) Tmp1 = false; else {        Tmp1 = (i_1420016 <= b_1420018);      }    if (Tmp1) {
    result_1420019 = i_1420016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1420019;

}
function cstrToNimstr(c_1390079) {
      var ln = c_1390079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1390079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1390079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function chckIndx(i_1415086, a_1415087, b_1415088) {
      var Tmp1;

  var result_1415089 = 0;

  BeforeRet: do {
      if (!(a_1415087 <= i_1415086)) Tmp1 = false; else {        Tmp1 = (i_1415086 <= b_1415088);      }    if (Tmp1) {
    result_1415089 = i_1415086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1415086, a_1415087, b_1415088);
    }
    
  } while (false);

  return result_1415089;

}
function nimMax(a_1395821, b_1395822) {
    var Tmp1;

  var result_1395823 = 0;

  BeforeRet: do {
    if ((b_1395822 <= a_1395821)) {
    Tmp1 = a_1395821;
    }
    else {
    Tmp1 = b_1395822;
    }
    
    result_1395823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1395823;

}
function nimMin(a_1395803, b_1395804) {
    var Tmp1;

  var result_1395805 = 0;

  BeforeRet: do {
    if ((a_1395803 <= b_1395804)) {
    Tmp1 = a_1395803;
    }
    else {
    Tmp1 = b_1395804;
    }
    
    result_1395805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1395805;

}
function mnewString(len_1395044) {
        return new Array(len_1395044);
  

  
}
function mulInt(a_1395439, b_1395440) {
        var result = a_1395439 * b_1395440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function eqStrings(a_1395222, b_1395223) {
        if (a_1395222 == b_1395223) return true;
    if (a_1395222 === null && b_1395223.length == 0) return true;
    if (b_1395223 === null && a_1395222.length == 0) return true;
    if ((!a_1395222) || (!b_1395223)) return false;
    var alen = a_1395222.length;
    if (alen != b_1395223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_1395222[i] != b_1395223[i]) return false;
    return true;
  

  
}
function divInt(a_1395457, b_1395458) {
        if (b_1395458 == 0) raiseDivByZero();
    if (b_1395458 == -1 && a_1395457 == 2147483647) raiseOverflow();
    return Math.trunc(a_1395457 / b_1395458);
  

  
}
        var to_lower_ranges_3350223 = [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534];
        var to_lower_singlets_3351470 = [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884];
        var to_upper_ranges_3351615 = [97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466];
        var to_upper_singlets_3352879 = [181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428];
var ConstSet2 = setConstr([97, 122]);
function nimCharToStr(x_1321052) {
  var result_1321053 = null;

    result_1321053 = nimCopy(null, mnewString(1), NTI1163014);
    result_1321053[0] = x_1321052;

  return result_1321053;

}
var ConstSet3 = setConstr([97, 122]);
function absInt(a_1395617) {
    var Tmp1;

  var result_1395618 = 0;

    if ((a_1395617 < 0)) {
    Tmp1 = (a_1395617 * -1);
    }
    else {
    Tmp1 = a_1395617;
    }
    
    result_1395618 = Tmp1;

  return result_1395618;

}
var ConstSet4 = setConstr([65, 90]);
var ConstSet5 = setConstr(32, 9, 11, 13, 10, 12);
function modInt(a_1395475, b_1395476) {
        if (b_1395476 == 0) raiseDivByZero();
    if (b_1395476 == -1 && a_1395475 == 2147483647) raiseOverflow();
    return Math.trunc(a_1395475 % b_1395476);
  

  
}
function addChar(x_1440031, c_1440032) {
    x_1440031.push(c_1440032);

  
}
var ConstSet6 = setConstr(60, 62, 94);
var ConstSet7 = setConstr(60, 62, 94);
var ConstSet8 = setConstr(45, 43, 32);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([48, 57]);
var ConstSet11 = setConstr([48, 57]);
var ConstSet12 = setConstr([65, 90], [97, 122]);
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var nim_program_result = 0;
var global_raise_hook_1307018 = [null];
var local_raise_hook_1307023 = [null];
var out_of_mem_hook_1307026 = [null];
var unhandled_exception_hook_1307031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_1790031 = [0];
var utc_instance_11320231 = [null];
var local_instance_11320232 = [null];
var maxplies_12180702 = [2];
var qplies_12180704 = [8];
var nodes_12180706 = [0];
function is_fat_pointer_1400401(ti_1400403) {
  var result_1400404 = false;

  BeforeRet: do {
    result_1400404 = !((ConstSet1[ti_1400403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1400404;

}
function nimCopyAux(dest_1405028, src_1405029, n_1405031) {
    switch (n_1405031.kind) {
    case 0:
      break;
    case 1:
            dest_1405028[n_1405031.offset] = nimCopy(dest_1405028[n_1405031.offset], src_1405029[n_1405031.offset], n_1405031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1405031.sons.length; i++) {
      nimCopyAux(dest_1405028, src_1405029, n_1405031.sons[i]);
    }
    
      break;
    case 3:
            dest_1405028[n_1405031.offset] = nimCopy(dest_1405028[n_1405031.offset], src_1405029[n_1405031.offset], n_1405031.typ);
      for (var i = 0; i < n_1405031.sons.length; ++i) {
        nimCopyAux(dest_1405028, src_1405029, n_1405031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_1307042(x_1307045, x_1307045_Idx, y_1307046) {
          if (x_1307045[x_1307045_Idx] === null) { x_1307045[x_1307045_Idx] = []; }
      var off = x_1307045[x_1307045_Idx].length;
      x_1307045[x_1307045_Idx].length += y_1307046.length;
      for (var i = 0; i < y_1307046.length; ++i) {
        x_1307045[x_1307045_Idx][off+i] = y_1307046.charCodeAt(i);
      }
    

  
}
function new_seq_1390128(len_1390131) {
  var result_1390133 = null;

    result_1390133 = new Array(len_1390131); for (var i=0;i<len_1390131;++i) {result_1390133[i]=null;}
  return result_1390133;

}
function unhandledException(e_1350059) {
    var buf_1350060 = [[]];
    if (!(((e_1350059.message != null ? e_1350059.message.length : 0) == 0))) {
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_1350060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(e_1350059.message); } else { buf_1350060[0] = e_1350059.message.slice(); };
    }
    else {
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_1350060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit(" [")); } else { buf_1350060[0] = makeNimstrLit(" ["); };
    add_1307042(buf_1350060, 0, e_1350059.name);
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_1350060[0] = makeNimstrLit("]\x0A"); };
    var cbuf_1355201 = toJSStr(buf_1350060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1355201);
  }
  else {
    throw cbuf_1355201;
  }
  

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1169037, name: null, trace: null, up: null}, "OverflowError");

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1169053, name: null, trace: null, up: null}, "RangeError");

  
}
function raiseIndexError(i_1375047, a_1375048, b_1375049) {
    var Tmp1;

    if ((b_1375049 < a_1375048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1375047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1375048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1375049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1163014), parent: null, m_type: NTI1169049, name: null, trace: null, up: null}, "IndexError");

  
}
function HEX5BHEX5D_12441049(s_12441055, x_12441057) {
  var result_12441059 = null;

    var a_12441201 = x_12441057.a;
    var l_12441401 = addInt(subInt(x_12441057.b, a_12441201), 1);
    result_12441059 = new Array(chckRange(l_12441401, 0, 2147483647)); for (var i=0;i<chckRange(l_12441401, 0, 2147483647);++i) {result_12441059[i]=null;}    L1: do {
      var i_12441416 = 0;
      var i_12470347 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12470347 < l_12441401)) break L3;
            i_12441416 = i_12470347;
            result_12441059[chckIndx(i_12441416, 0, (result_12441059 != null ? result_12441059.length : 0)+0-1)-0] = nimCopy(null, s_12441055[chckIndx(addInt(i_12441416, a_12441201), 0, (s_12441055 != null ? s_12441055.length : 0)+0-1)-0], NTI1163014);
            i_12470347 = addInt(i_12470347, 1);
          }
      } while(false);
    } while(false);

  return result_12441059;

}
function sys_fatal_1267618(message_1267622) {
    raiseException({message: nimCopy(null, message_1267622, NTI1163014), m_type: NTI1169041, parent: null, name: null, trace: null, up: null}, "AssertionError");

  
}
function raise_assert_1267614(msg_1267616) {
    sys_fatal_1267618(msg_1267616);

  
}
function failed_assert_impl_1267680(msg_1267682) {
    raise_assert_1267614(msg_1267682);

  
}
function substr_eq_10130026(s_10130028, pos_10130029, substr_10130030) {
  var result_10130031 = false;

  BeforeRet: do {
    var i_10130033 = 0;
    var length_10130034 = (substr_10130030 != null ? substr_10130030.length : 0);
    L1: do {
        L2: while (true) {
        if (!(((i_10130033 < length_10130034) && (addInt(pos_10130029, i_10130033) < (s_10130028 != null ? s_10130028.length : 0))) && (s_10130028[chckIndx(addInt(pos_10130029, i_10130033), 0, (s_10130028 != null ? s_10130028.length : 0)+0-1)-0] == substr_10130030[chckIndx(i_10130033, 0, (substr_10130030 != null ? substr_10130030.length : 0)+0-1)-0]))) break L2;
          i_10130033 = addInt(i_10130033, 1);
        }
    } while(false);
    result_10130031 = (i_10130033 == length_10130034);
    break BeforeRet;
  } while (false);

  return result_10130031;

}
function substr_1506022(s_1506024, first_1506025, last_1506026) {
  var result_1506027 = null;

    var first_1506028 = nimMax(first_1506025, 0);
    var l_1506030 = nimMax(addInt(subInt(nimMin(last_1506026, (s_1506024 != null ? (s_1506024.length-1) : -1)), first_1506028), 1), 0);
    result_1506027 = nimCopy(null, mnewString(chckRange(l_1506030, 0, 2147483647)), NTI1163014);
    L1: do {
      var i_1506039 = 0;
      var colontmp__12470374 = 0;
      colontmp__12470374 = subInt(l_1506030, 1);
      var res_12470375 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12470375 <= colontmp__12470374)) break L3;
            i_1506039 = res_12470375;
            result_1506027[chckIndx(i_1506039, 0, (result_1506027 != null ? result_1506027.length : 0)+0-1)-0] = s_1506024[chckIndx(addInt(i_1506039, first_1506028), 0, (s_1506024 != null ? s_1506024.length : 0)+0-1)-0];
            res_12470375 = addInt(res_12470375, 1);
          }
      } while(false);
    } while(false);

  return result_1506027;

}
function nsuSplitString(s_10305039, sep_10305040, maxsplit_10305041) {
  var result_10305043 = null;

    if (!((0 < (sep_10305040 != null ? sep_10305040.length : 0)))) {
    failed_assert_impl_1267680(makeNimstrLit("strutils.nim(756, 11) `sep.len > 0` "));
    }
    
    result_10305043 = nimCopy(null, [], NTI10325015);
    L1: do {
      var xHEX60gensym10320201_10325016 = null;
      var lastHEX60gensym10165043_12470365 = 0;
      var splitsHEX60gensym10165044_12470366 = maxsplit_10305041;
      L2: do {
          L3: while (true) {
          if (!(lastHEX60gensym10165043_12470365 <= (s_10305039 != null ? s_10305039.length : 0))) break L3;
            var firstHEX60gensym10165045_12470368 = lastHEX60gensym10165043_12470365;
            L4: do {
                L5: while (true) {
                if (!((lastHEX60gensym10165043_12470365 < (s_10305039 != null ? s_10305039.length : 0)) && !(substr_eq_10130026(s_10305039, lastHEX60gensym10165043_12470365, sep_10305040)))) break L5;
                  lastHEX60gensym10165043_12470365 = addInt(lastHEX60gensym10165043_12470365, 1);
                }
            } while(false);
            if ((splitsHEX60gensym10165044_12470366 == 0)) {
            lastHEX60gensym10165043_12470365 = (s_10305039 != null ? s_10305039.length : 0);
            }
            
            xHEX60gensym10320201_10325016 = substr_1506022(s_10305039, firstHEX60gensym10165045_12470368, subInt(lastHEX60gensym10165043_12470365, 1));
            var Tmp6 = nimCopy(null, xHEX60gensym10320201_10325016, NTI1163014);
            if (result_10305043 != null) { result_10305043.push(Tmp6); } else { result_10305043 = [Tmp6]; };
            if ((splitsHEX60gensym10165044_12470366 == 0)) {
            break L2;
            }
            
            splitsHEX60gensym10165044_12470366 = subInt(splitsHEX60gensym10165044_12470366, 1);
            lastHEX60gensym10165043_12470365 = addInt(lastHEX60gensym10165043_12470365, (sep_10305040 != null ? sep_10305040.length : 0));
          }
      } while(false);
    } while(false);

  return result_10305043;

}
function HEX2EHEX2E_3335220(a_3335225, b_3335227) {
  var result_3335229 = {a: 0, b: 0};

    nimCopy(result_3335229, {a: a_3335225, b: b_3335227}, NTI2161907);

  return result_3335229;

}
function nsuJoinSep(a_10690018, sep_10690019) {
  var result_10690020 = null;

    if ((0 < (a_10690018 != null ? a_10690018.length : 0))) {
    var l_10695009 = mulInt((sep_10690019 != null ? sep_10690019.length : 0), subInt((a_10690018 != null ? a_10690018.length : 0), 1));
    L1: do {
      var i_10695023 = 0;
      var colontmp__12470383 = 0;
      colontmp__12470383 = (a_10690018 != null ? (a_10690018.length-1) : -1);
      var res_12470384 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12470384 <= colontmp__12470383)) break L3;
            i_10695023 = res_12470384;
            l_10695009 = addInt(l_10695009, (a_10690018[chckIndx(i_10695023, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0] != null ? a_10690018[chckIndx(i_10695023, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0].length : 0));
            res_12470384 = addInt(res_12470384, 1);
          }
      } while(false);
    } while(false);
    result_10690020 = nimCopy(null, mnewString(0), NTI1163014);
    if (result_10690020 != null) { result_10690020 = (result_10690020).concat(a_10690018[chckIndx(0, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0]); } else { result_10690020 = a_10690018[chckIndx(0, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0].slice(); };
    L4: do {
      var i_10695043 = 0;
      var colontmp__12470390 = 0;
      colontmp__12470390 = (a_10690018 != null ? (a_10690018.length-1) : -1);
      var res_12470391 = 1;
      L5: do {
          L6: while (true) {
          if (!(res_12470391 <= colontmp__12470390)) break L6;
            i_10695043 = res_12470391;
            if (result_10690020 != null) { result_10690020 = (result_10690020).concat(sep_10690019); } else { result_10690020 = sep_10690019.slice(); };
            if (result_10690020 != null) { result_10690020 = (result_10690020).concat(a_10690018[chckIndx(i_10695043, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0]); } else { result_10690020 = a_10690018[chckIndx(i_10695043, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0].slice(); };
            res_12470391 = addInt(res_12470391, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      result_10690020 = nimCopy(null, [], NTI1163014);
    }
    

  return result_10690020;

}
function parse_12205062(c_12205064, inv_12205065) {
  var result_12205066 = 0;

  BeforeRet: do {
    var f_12205076 = subInt(c_12205064[chckIndx(0, 0, (c_12205064 != null ? c_12205064.length : 0)+0-1)-0], 97);
    var r_12205085 = subInt(c_12205064[chckIndx(1, 0, (c_12205064 != null ? c_12205064.length : 0)+0-1)-0], 49);
    if (inv_12205065) {
    f_12205076 = subInt(7, f_12205076);
    r_12205085 = subInt(7, r_12205085);
    }
    
    result_12205066 = subInt(addInt(91, f_12205076), mulInt(10, r_12205085));
    break BeforeRet;
  } while (false);

  return result_12205066;

}
function find_12230011(a_12230015, item_12230016) {
  var result_12230017 = 0;

  BeforeRet: do {
    L1: do {
      var i_12230048 = 0;
      var i_12470403 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12470403 < (a_12230015 != null ? a_12230015.length : 0))) break L3;
            i_12230048 = a_12230015[chckIndx(i_12470403, 0, (a_12230015 != null ? a_12230015.length : 0)+0-1)-0];
            if ((i_12230048 == item_12230016)) {
            break BeforeRet;
            }
            
            result_12230017 = addInt(result_12230017, 1);
            i_12470403 = addInt(i_12470403, 1);
          }
      } while(false);
    } while(false);
    result_12230017 = -1;
  } while (false);

  return result_12230017;

}
function contains_12230004(a_12230008, item_12230009) {
  var result_12230010 = false;

  BeforeRet: do {
    result_12230010 = (0 <= find_12230011(a_12230008, item_12230009));
    break BeforeRet;
  } while (false);

  return result_12230010;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI1169035, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function binary_search_3354187(c_3354189, tab_3354191, len_3354192, stride_3354193) {
      var Tmp3;

  var result_3354194 = 0;

  BeforeRet: do {
    var n_3354195 = len_3354192;
    var t_3354197 = 0;
    L1: do {
        L2: while (true) {
        if (!(1 < n_3354195)) break L2;
          var m_3355001 = divInt(n_3354195, 2);
          var p_3355002 = addInt(t_3354197, mulInt(m_3355001, stride_3354193));
          if ((tab_3354191[chckIndx(p_3355002, 0, (tab_3354191 != null ? tab_3354191.length : 0)+0-1)-0] <= ((c_3354189)|0))) {
          t_3354197 = p_3355002;
          n_3354195 = subInt(n_3354195, m_3355001);
          }
          else {
            n_3354195 = m_3355001;
          }
          
        }
    } while(false);
      if (!!((n_3354195 == 0))) Tmp3 = false; else {        Tmp3 = (tab_3354191[chckIndx(t_3354197, 0, (tab_3354191 != null ? tab_3354191.length : 0)+0-1)-0] <= ((c_3354189)|0));      }    if (Tmp3) {
    result_3354194 = t_3354197;
    break BeforeRet;
    }
    
    result_3354194 = -1;
    break BeforeRet;
  } while (false);

  return result_3354194;

}
function nucisUpper(c_3420016) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_3420017 = false;

  BeforeRet: do {
    var c_3420018 = c_3420016;
    var p_3420041 = binary_search_3354187(c_3420018, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534], 45, 3);
      if (!(0 <= p_3420041)) Tmp2 = false; else {        Tmp2 = (to_lower_ranges_3350223[chckIndx(p_3420041, 0, (to_lower_ranges_3350223 != null ? to_lower_ranges_3350223.length : 0)+0-1)-0] <= ((c_3420018)|0));      }      if (!Tmp2) Tmp1 = false; else {        Tmp1 = (((c_3420018)|0) <= to_lower_ranges_3350223[chckIndx(addInt(p_3420041, 1), 0, (to_lower_ranges_3350223 != null ? to_lower_ranges_3350223.length : 0)+0-1)-0]);      }    if (Tmp1) {
    result_3420017 = true;
    break BeforeRet;
    }
    
    p_3420041 = binary_search_3354187(c_3420018, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884], 610, 2);
      if (!(0 <= p_3420041)) Tmp3 = false; else {        Tmp3 = (((c_3420018)|0) == to_lower_singlets_3351470[chckIndx(p_3420041, 0, (to_lower_singlets_3351470 != null ? to_lower_singlets_3351470.length : 0)+0-1)-0]);      }    if (Tmp3) {
    result_3420017 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_3420017;

}
function nuctoLower(c_3370016) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_3370017 = 0;

  BeforeRet: do {
    var c_3370018 = c_3370016;
    var p_3370041 = binary_search_3354187(c_3370018, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534], 45, 3);
      if (!(0 <= p_3370041)) Tmp2 = false; else {        Tmp2 = (to_lower_ranges_3350223[chckIndx(p_3370041, 0, (to_lower_ranges_3350223 != null ? to_lower_ranges_3350223.length : 0)+0-1)-0] <= ((c_3370018)|0));      }      if (!Tmp2) Tmp1 = false; else {        Tmp1 = (((c_3370018)|0) <= to_lower_ranges_3350223[chckIndx(addInt(p_3370041, 1), 0, (to_lower_ranges_3350223 != null ? to_lower_ranges_3350223.length : 0)+0-1)-0]);      }    if (Tmp1) {
    result_3370017 = subInt(addInt(((c_3370018)|0), to_lower_ranges_3350223[chckIndx(addInt(p_3370041, 2), 0, (to_lower_ranges_3350223 != null ? to_lower_ranges_3350223.length : 0)+0-1)-0]), 500);
    break BeforeRet;
    }
    
    p_3370041 = binary_search_3354187(c_3370018, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884], 610, 2);
      if (!(0 <= p_3370041)) Tmp3 = false; else {        Tmp3 = (((c_3370018)|0) == to_lower_singlets_3351470[chckIndx(p_3370041, 0, (to_lower_singlets_3351470 != null ? to_lower_singlets_3351470.length : 0)+0-1)-0]);      }    if (Tmp3) {
    result_3370017 = subInt(addInt(((c_3370018)|0), to_lower_singlets_3351470[chckIndx(addInt(p_3370041, 1), 0, (to_lower_singlets_3351470 != null ? to_lower_singlets_3351470.length : 0)+0-1)-0]), 500);
    break BeforeRet;
    }
    
    result_3370017 = c_3370018;
    break BeforeRet;
  } while (false);

  return result_3370017;

}
function nucisLower(c_3405032) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_3405033 = false;

  BeforeRet: do {
    var c_3405034 = c_3405032;
    var p_3405057 = binary_search_3354187(c_3405034, [97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466], 46, 3);
      if (!(0 <= p_3405057)) Tmp2 = false; else {        Tmp2 = (to_upper_ranges_3351615[chckIndx(p_3405057, 0, (to_upper_ranges_3351615 != null ? to_upper_ranges_3351615.length : 0)+0-1)-0] <= ((c_3405034)|0));      }      if (!Tmp2) Tmp1 = false; else {        Tmp1 = (((c_3405034)|0) <= to_upper_ranges_3351615[chckIndx(addInt(p_3405057, 1), 0, (to_upper_ranges_3351615 != null ? to_upper_ranges_3351615.length : 0)+0-1)-0]);      }    if (Tmp1) {
    result_3405033 = true;
    break BeforeRet;
    }
    
    p_3405057 = binary_search_3354187(c_3405034, [181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428], 624, 2);
      if (!(0 <= p_3405057)) Tmp3 = false; else {        Tmp3 = (((c_3405034)|0) == to_upper_singlets_3352879[chckIndx(p_3405057, 0, (to_upper_singlets_3352879 != null ? to_upper_singlets_3352879.length : 0)+0-1)-0]);      }    if (Tmp3) {
    result_3405033 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_3405033;

}
function nuctoUpper(c_3385062) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_3385063 = 0;

  BeforeRet: do {
    var c_3385064 = c_3385062;
    var p_3385087 = binary_search_3354187(c_3385064, [97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466], 46, 3);
      if (!(0 <= p_3385087)) Tmp2 = false; else {        Tmp2 = (to_upper_ranges_3351615[chckIndx(p_3385087, 0, (to_upper_ranges_3351615 != null ? to_upper_ranges_3351615.length : 0)+0-1)-0] <= ((c_3385064)|0));      }      if (!Tmp2) Tmp1 = false; else {        Tmp1 = (((c_3385064)|0) <= to_upper_ranges_3351615[chckIndx(addInt(p_3385087, 1), 0, (to_upper_ranges_3351615 != null ? to_upper_ranges_3351615.length : 0)+0-1)-0]);      }    if (Tmp1) {
    result_3385063 = subInt(addInt(((c_3385064)|0), to_upper_ranges_3351615[chckIndx(addInt(p_3385087, 2), 0, (to_upper_ranges_3351615 != null ? to_upper_ranges_3351615.length : 0)+0-1)-0]), 500);
    break BeforeRet;
    }
    
    p_3385087 = binary_search_3354187(c_3385064, [181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428], 624, 2);
      if (!(0 <= p_3385087)) Tmp3 = false; else {        Tmp3 = (((c_3385064)|0) == to_upper_singlets_3352879[chckIndx(p_3385087, 0, (to_upper_singlets_3352879 != null ? to_upper_singlets_3352879.length : 0)+0-1)-0]);      }    if (Tmp3) {
    result_3385063 = subInt(addInt(((c_3385064)|0), to_upper_singlets_3352879[chckIndx(addInt(p_3385087, 1), 0, (to_upper_singlets_3352879 != null ? to_upper_singlets_3352879.length : 0)+0-1)-0]), 500);
    break BeforeRet;
    }
    
    result_3385063 = c_3385064;
    break BeforeRet;
  } while (false);

  return result_3385063;

}
function HEX3CHEX3DHEX25_1167094(x_1167096, y_1167097) {
  var result_1167098 = false;

    result_1167098 = ((x_1167096 >>> 0) <= (y_1167097 >>> 0));

  return result_1167098;

}
function nucswapCase(s_4855222) {
  var result_4855223 = null;

    var i_4855225 = 0;
    var result_index_4855227 = 0;
    var rune_4855228 = 0;
    result_4855223 = nimCopy(null, mnewString(chckRange((s_4855222 != null ? s_4855222.length : 0), 0, 2147483647)), NTI1163014);
    L1: do {
        L2: while (true) {
        if (!(i_4855225 < (s_4855222 != null ? s_4855222.length : 0))) break L2;
          if ((s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] <= 127)) {
          rune_4855228 = chckRange(s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0], -2147483648, 2147483647);
          i_4855225 = addInt(i_4855225, 1);
          }
          else {
          if ((((s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((i_4855225 <= subInt((s_4855222 != null ? s_4855222.length : 0), 2))) {
          rune_4855228 = chckRange((((s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 31) << 6) | (s_4855222[chckIndx(addInt(i_4855225, 1), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
          i_4855225 = addInt(i_4855225, 2);
          }
          else {
            rune_4855228 = 65533;
            i_4855225 = addInt(i_4855225, 1);
          }
          
          }
          else {
          if ((((s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          if ((i_4855225 <= subInt((s_4855222 != null ? s_4855222.length : 0), 3))) {
          rune_4855228 = chckRange(((((s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 15) << 12) | ((s_4855222[chckIndx(addInt(i_4855225, 1), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63) << 6)) | (s_4855222[chckIndx(addInt(i_4855225, 2), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
          i_4855225 = addInt(i_4855225, 3);
          }
          else {
            rune_4855228 = 65533;
            i_4855225 = addInt(i_4855225, 1);
          }
          
          }
          else {
          if ((((s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          if ((i_4855225 <= subInt((s_4855222 != null ? s_4855222.length : 0), 4))) {
          rune_4855228 = chckRange((((((s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 7) << 18) | ((s_4855222[chckIndx(addInt(i_4855225, 1), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63) << 12)) | ((s_4855222[chckIndx(addInt(i_4855225, 2), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63) << 6)) | (s_4855222[chckIndx(addInt(i_4855225, 3), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
          i_4855225 = addInt(i_4855225, 4);
          }
          else {
            rune_4855228 = 65533;
            i_4855225 = addInt(i_4855225, 1);
          }
          
          }
          else {
          if ((((s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          if ((i_4855225 <= subInt((s_4855222 != null ? s_4855222.length : 0), 5))) {
          rune_4855228 = chckRange(((((((s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 3) << 24) | ((s_4855222[chckIndx(addInt(i_4855225, 1), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63) << 18)) | ((s_4855222[chckIndx(addInt(i_4855225, 2), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63) << 12)) | ((s_4855222[chckIndx(addInt(i_4855225, 3), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63) << 6)) | (s_4855222[chckIndx(addInt(i_4855225, 4), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
          i_4855225 = addInt(i_4855225, 5);
          }
          else {
            rune_4855228 = 65533;
            i_4855225 = addInt(i_4855225, 1);
          }
          
          }
          else {
          if ((((s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          if ((i_4855225 <= subInt((s_4855222 != null ? s_4855222.length : 0), 6))) {
          rune_4855228 = chckRange((((((((s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 1) << 30) | ((s_4855222[chckIndx(addInt(i_4855225, 1), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63) << 24)) | ((s_4855222[chckIndx(addInt(i_4855225, 2), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63) << 18)) | ((s_4855222[chckIndx(addInt(i_4855225, 3), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63) << 12)) | ((s_4855222[chckIndx(addInt(i_4855225, 4), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63) << 6)) | (s_4855222[chckIndx(addInt(i_4855225, 5), 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
          i_4855225 = addInt(i_4855225, 6);
          }
          else {
            rune_4855228 = 65533;
            i_4855225 = addInt(i_4855225, 1);
          }
          
          }
          else {
            rune_4855228 = chckRange(s_4855222[chckIndx(i_4855225, 0, (s_4855222 != null ? s_4855222.length : 0)+0-1)-0], -2147483648, 2147483647);
            i_4855225 = addInt(i_4855225, 1);
          }
          }}}}}
          if (nucisUpper(rune_4855228)) {
          rune_4855228 = nuctoLower(rune_4855228);
          }
          else {
          if (nucisLower(rune_4855228)) {
          rune_4855228 = nuctoUpper(rune_4855228);
          }
          }
          var iHEX60gensym5100207_5105001 = rune_4855228;
          if (HEX3CHEX3DHEX25_1167094(iHEX60gensym5100207_5105001, 127)) {
          (result_4855223 == null ? result_4855223 = mnewString(chckRange(addInt(result_index_4855227, 1), 0, 2147483647)) : result_4855223.length = chckRange(addInt(result_index_4855227, 1), 0, 2147483647));
          result_4855223[chckIndx(addInt(result_index_4855227, 0), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange(iHEX60gensym5100207_5105001, 0, 255);
          result_index_4855227 = addInt(result_index_4855227, 1);
          }
          else {
          if (HEX3CHEX3DHEX25_1167094(iHEX60gensym5100207_5105001, 2047)) {
          (result_4855223 == null ? result_4855223 = mnewString(chckRange(addInt(result_index_4855227, 2), 0, 2147483647)) : result_4855223.length = chckRange(addInt(result_index_4855227, 2), 0, 2147483647));
          result_4855223[chckIndx(addInt(result_index_4855227, 0), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym5100207_5105001 >> 6) | 192), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 1), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym5100207_5105001 & 63) | 128), 0, 255);
          result_index_4855227 = addInt(result_index_4855227, 2);
          }
          else {
          if (HEX3CHEX3DHEX25_1167094(iHEX60gensym5100207_5105001, 65535)) {
          (result_4855223 == null ? result_4855223 = mnewString(chckRange(addInt(result_index_4855227, 3), 0, 2147483647)) : result_4855223.length = chckRange(addInt(result_index_4855227, 3), 0, 2147483647));
          result_4855223[chckIndx(addInt(result_index_4855227, 0), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym5100207_5105001 >> 12) | 224), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 1), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym5100207_5105001 >> 6) & 63) | 128), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 2), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym5100207_5105001 & 63) | 128), 0, 255);
          result_index_4855227 = addInt(result_index_4855227, 3);
          }
          else {
          if (HEX3CHEX3DHEX25_1167094(iHEX60gensym5100207_5105001, 2097151)) {
          (result_4855223 == null ? result_4855223 = mnewString(chckRange(addInt(result_index_4855227, 4), 0, 2147483647)) : result_4855223.length = chckRange(addInt(result_index_4855227, 4), 0, 2147483647));
          result_4855223[chckIndx(addInt(result_index_4855227, 0), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym5100207_5105001 >> 18) | 240), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 1), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym5100207_5105001 >> 12) & 63) | 128), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 2), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym5100207_5105001 >> 6) & 63) | 128), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 3), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym5100207_5105001 & 63) | 128), 0, 255);
          result_index_4855227 = addInt(result_index_4855227, 4);
          }
          else {
          if (HEX3CHEX3DHEX25_1167094(iHEX60gensym5100207_5105001, 67108863)) {
          (result_4855223 == null ? result_4855223 = mnewString(chckRange(addInt(result_index_4855227, 5), 0, 2147483647)) : result_4855223.length = chckRange(addInt(result_index_4855227, 5), 0, 2147483647));
          result_4855223[chckIndx(addInt(result_index_4855227, 0), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym5100207_5105001 >> 24) | 248), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 1), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym5100207_5105001 >> 18) & 63) | 128), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 2), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym5100207_5105001 >> 12) & 63) | 128), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 3), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym5100207_5105001 >> 6) & 63) | 128), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 4), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym5100207_5105001 & 63) | 128), 0, 255);
          result_index_4855227 = addInt(result_index_4855227, 5);
          }
          else {
          if (HEX3CHEX3DHEX25_1167094(iHEX60gensym5100207_5105001, 2147483647)) {
          (result_4855223 == null ? result_4855223 = mnewString(chckRange(addInt(result_index_4855227, 6), 0, 2147483647)) : result_4855223.length = chckRange(addInt(result_index_4855227, 6), 0, 2147483647));
          result_4855223[chckIndx(addInt(result_index_4855227, 0), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym5100207_5105001 >> 30) | 252), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 1), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym5100207_5105001 >> 24) & 63) | 128), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 2), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym5100207_5105001 >> 18) & 63) | 128), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 3), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym5100207_5105001 >> 12) & 63) | 128), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 4), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym5100207_5105001 >> 6) & 63) | 128), 0, 255);
          result_4855223[chckIndx(addInt(result_index_4855227, 5), 0, (result_4855223 != null ? result_4855223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym5100207_5105001 & 63) | 128), 0, 255);
          result_index_4855227 = addInt(result_index_4855227, 6);
          }
          else {
          }
          }}}}}
        }
    } while(false);

  return result_4855223;

}
function nucisCombining(c_3460031) {
    var Tmp1;
      var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
        var Tmp6;
        var Tmp7;
        var Tmp8;
        var Tmp9;

  var result_3460032 = false;

  BeforeRet: do {
    var c_3460033 = c_3460031;
    if (!(768 <= c_3460033)) Tmp1 = false; else {      if ((c_3460033 <= 879)) Tmp5 = true; else {        if (!(6832 <= c_3460033)) Tmp6 = false; else {          Tmp6 = (c_3460033 <= 6911);        }        Tmp5 = Tmp6;      }      if (Tmp5) Tmp4 = true; else {        if (!(7616 <= c_3460033)) Tmp7 = false; else {          Tmp7 = (c_3460033 <= 7679);        }        Tmp4 = Tmp7;      }      if (Tmp4) Tmp3 = true; else {        if (!(8400 <= c_3460033)) Tmp8 = false; else {          Tmp8 = (c_3460033 <= 8447);        }        Tmp3 = Tmp8;      }      if (Tmp3) Tmp2 = true; else {        if (!(65056 <= c_3460033)) Tmp9 = false; else {          Tmp9 = (c_3460033 <= 65071);        }        Tmp2 = Tmp9;      }      Tmp1 = Tmp2;    }    result_3460032 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_3460032;

}
function reversed_6965014(s_6965016) {
  var result_6965017 = null;

    var i_6965019 = 0;
    var last_i_6965021 = 0;
    var new_pos_6965022 = subInt((s_6965016 != null ? s_6965016.length : 0), 1);
    var block_pos_6965024 = 0;
    var r_6965025 = 0;
    result_6965017 = nimCopy(null, mnewString(chckRange((s_6965016 != null ? s_6965016.length : 0), 0, 2147483647)), NTI1163014);
    L1: do {
        L2: while (true) {
        if (!(i_6965019 < (s_6965016 != null ? s_6965016.length : 0))) break L2;
          last_i_6965021 = i_6965019;
          if ((s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] <= 127)) {
          r_6965025 = chckRange(s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0], -2147483648, 2147483647);
          i_6965019 = addInt(i_6965019, 1);
          }
          else {
          if ((((s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((i_6965019 <= subInt((s_6965016 != null ? s_6965016.length : 0), 2))) {
          r_6965025 = chckRange((((s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 31) << 6) | (s_6965016[chckIndx(addInt(i_6965019, 1), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
          i_6965019 = addInt(i_6965019, 2);
          }
          else {
            r_6965025 = 65533;
            i_6965019 = addInt(i_6965019, 1);
          }
          
          }
          else {
          if ((((s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          if ((i_6965019 <= subInt((s_6965016 != null ? s_6965016.length : 0), 3))) {
          r_6965025 = chckRange(((((s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 15) << 12) | ((s_6965016[chckIndx(addInt(i_6965019, 1), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63) << 6)) | (s_6965016[chckIndx(addInt(i_6965019, 2), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
          i_6965019 = addInt(i_6965019, 3);
          }
          else {
            r_6965025 = 65533;
            i_6965019 = addInt(i_6965019, 1);
          }
          
          }
          else {
          if ((((s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          if ((i_6965019 <= subInt((s_6965016 != null ? s_6965016.length : 0), 4))) {
          r_6965025 = chckRange((((((s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 7) << 18) | ((s_6965016[chckIndx(addInt(i_6965019, 1), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63) << 12)) | ((s_6965016[chckIndx(addInt(i_6965019, 2), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63) << 6)) | (s_6965016[chckIndx(addInt(i_6965019, 3), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
          i_6965019 = addInt(i_6965019, 4);
          }
          else {
            r_6965025 = 65533;
            i_6965019 = addInt(i_6965019, 1);
          }
          
          }
          else {
          if ((((s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          if ((i_6965019 <= subInt((s_6965016 != null ? s_6965016.length : 0), 5))) {
          r_6965025 = chckRange(((((((s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 3) << 24) | ((s_6965016[chckIndx(addInt(i_6965019, 1), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63) << 18)) | ((s_6965016[chckIndx(addInt(i_6965019, 2), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63) << 12)) | ((s_6965016[chckIndx(addInt(i_6965019, 3), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63) << 6)) | (s_6965016[chckIndx(addInt(i_6965019, 4), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
          i_6965019 = addInt(i_6965019, 5);
          }
          else {
            r_6965025 = 65533;
            i_6965019 = addInt(i_6965019, 1);
          }
          
          }
          else {
          if ((((s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          if ((i_6965019 <= subInt((s_6965016 != null ? s_6965016.length : 0), 6))) {
          r_6965025 = chckRange((((((((s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 1) << 30) | ((s_6965016[chckIndx(addInt(i_6965019, 1), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63) << 24)) | ((s_6965016[chckIndx(addInt(i_6965019, 2), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63) << 18)) | ((s_6965016[chckIndx(addInt(i_6965019, 3), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63) << 12)) | ((s_6965016[chckIndx(addInt(i_6965019, 4), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63) << 6)) | (s_6965016[chckIndx(addInt(i_6965019, 5), 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
          i_6965019 = addInt(i_6965019, 6);
          }
          else {
            r_6965025 = 65533;
            i_6965019 = addInt(i_6965019, 1);
          }
          
          }
          else {
            r_6965025 = chckRange(s_6965016[chckIndx(i_6965019, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0], -2147483648, 2147483647);
            i_6965019 = addInt(i_6965019, 1);
          }
          }}}}}
          if (!(nucisCombining(r_6965025))) {
          var jHEX60gensym7210207_7215001 = subInt(last_i_6965021, 1);
          L3: do {
              L4: while (true) {
              if (!(block_pos_6965024 < jHEX60gensym7210207_7215001)) break L4;
                result_6965017[chckIndx(new_pos_6965022, 0, (result_6965017 != null ? result_6965017.length : 0)+0-1)-0] = s_6965016[chckIndx(jHEX60gensym7210207_7215001, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0];
                jHEX60gensym7210207_7215001 = subInt(jHEX60gensym7210207_7215001, 1);
                new_pos_6965022 = subInt(new_pos_6965022, 1);
              }
          } while(false);
          block_pos_6965024 = subInt(last_i_6965021, 1);
          }
          
        }
    } while(false);
    var jHEX60gensym7230013_7235001 = subInt((s_6965016 != null ? s_6965016.length : 0), 1);
    L5: do {
        L6: while (true) {
        if (!(block_pos_6965024 < jHEX60gensym7230013_7235001)) break L6;
          result_6965017[chckIndx(new_pos_6965022, 0, (result_6965017 != null ? result_6965017.length : 0)+0-1)-0] = s_6965016[chckIndx(jHEX60gensym7230013_7235001, 0, (s_6965016 != null ? s_6965016.length : 0)+0-1)-0];
          jHEX60gensym7230013_7235001 = subInt(jHEX60gensym7230013_7235001, 1);
          new_pos_6965022 = subInt(new_pos_6965022, 1);
        }
    } while(false);
    block_pos_6965024 = subInt((s_6965016 != null ? s_6965016.length : 0), 1);

  return result_6965017;

}
function rotate_12205221(s_12205223) {
  var result_12205224 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

  BeforeRet: do {
    var ep_12205226 = 0;
    var kp_12205228 = 0;
    var lastcap_12205230 = 0;
    if ((0 < s_12205223.ep)) {
    ep_12205226 = subInt(119, s_12205223.ep);
    }
    
    if ((0 < s_12205223.kp)) {
    kp_12205228 = subInt(119, s_12205223.kp);
    }
    
    if ((0 < s_12205223.lastcap)) {
    lastcap_12205230 = subInt(119, s_12205223.lastcap);
    }
    
    nimCopy(result_12205224, {board: nucswapCase(reversed_6965014(s_12205223.board)), score: -(s_12205223.score), wc_w: s_12205223.bc_w, wc_e: s_12205223.bc_e, bc_w: s_12205223.wc_w, bc_e: s_12205223.wc_e, ep: ep_12205226, kp: kp_12205228, lastcap: lastcap_12205230}, NTI12180708);
    break BeforeRet;
  } while (false);

  return result_12205224;

}
function fromfen_12220017(fen_12220019) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
              var Tmp7;
      var Tmp8;

  var result_12220020 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

  BeforeRet: do {
    var b_12220021 = makeNimstrLit("         \x0A         \x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A         \x0A         \x0A");
    var f_12220022 = nimCopy(null, (Tmp1 = nsuSplitString(fen_12220019, makeNimstrLit(" "), -1), Tmp1)[chckIndx(0, 0, (Tmp1 != null ? Tmp1.length : 0)+0-1)-0], NTI1163014);
    var cas_12220023 = nimCopy(null, (Tmp2 = nsuSplitString(fen_12220019, makeNimstrLit(" "), -1), Tmp2)[chckIndx(2, 0, (Tmp2 != null ? Tmp2.length : 0)+0-1)-0], NTI1163014);
    var enpas_12220024 = nimCopy(null, (Tmp3 = nsuSplitString(fen_12220019, makeNimstrLit(" "), -1), Tmp3)[chckIndx(3, 0, (Tmp3 != null ? Tmp3.length : 0)+0-1)-0], NTI1163014);
    var i_12220026 = 0;
    var j_12220028 = 0;
    L4: do {
      var x_12220030 = 0;
      var i_12470397 = 0;
      var l_12470398 = (f_12220022 != null ? f_12220022.length : 0);
      L5: do {
          L6: while (true) {
          if (!(i_12470397 < l_12470398)) break L6;
            x_12220030 = f_12220022[chckIndx(i_12470397, 0, (f_12220022 != null ? f_12220022.length : 0)+0-1)-0];
            var a_12220035 = x_12220030;
              if (!(48 < a_12220035)) Tmp7 = false; else {                Tmp7 = (a_12220035 < 57);              }            if (Tmp7) {
            i_12220026 = addInt(i_12220026, subInt(a_12220035, 48));
            }
            else {
            if ((a_12220035 == 47)) {
            i_12220026 = 0;
            j_12220028 = addInt(j_12220028, 1);
            }
            else {
              b_12220021[chckIndx(addInt(addInt(21, mulInt(10, j_12220028)), i_12220026), 0, (b_12220021 != null ? b_12220021.length : 0)+0-1)-0] = x_12220030;
              i_12220026 = addInt(i_12220026, 1);
            }
            }
            i_12470397 = addInt(i_12470397, 1);
            if (!(((f_12220022 != null ? f_12220022.length : 0) == l_12470398))) {
            failed_assert_impl_1267680(makeNimstrLit("iterators.nim(207, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    var ep_12225014 = 0;
    if (!(eqStrings(enpas_12220024, makeNimstrLit("-")))) {
    ep_12225014 = parse_12205062(enpas_12220024, false);
    }
    
    var pos_12230102 = {board: nimCopy(null, b_12220021, NTI1163014), score: 0.0, wc_w: contains_12230004(cas_12220023, 81), wc_e: contains_12230004(cas_12220023, 75), bc_w: contains_12230004(cas_12220023, 107), bc_e: contains_12230004(cas_12220023, 113), ep: ep_12225014, kp: 0, lastcap: 0};
    if (eqStrings((Tmp8 = nsuSplitString(fen_12220019, makeNimstrLit(" "), -1), Tmp8)[chckIndx(1, 0, (Tmp8 != null ? Tmp8.length : 0)+0-1)-0], makeNimstrLit("b"))) {
    nimCopy(pos_12230102, rotate_12205221(pos_12230102), NTI12180708);
    }
    
    nimCopy(result_12220020, pos_12230102, NTI12180708);
    break BeforeRet;
  } while (false);

  return result_12220020;

}
function nsuFindChar(s_10700216, sub_10700217, start_10700218, last_10700219) {
    var Tmp1;

  var result_10700221 = 0;

  BeforeRet: do {
    if ((last_10700219 == 0)) {
    Tmp1 = (s_10700216 != null ? (s_10700216.length-1) : -1);
    }
    else {
    Tmp1 = last_10700219;
    }
    
    var last_10700223 = Tmp1;
    L2: do {
      var i_10700606 = 0;
      var colontmp__12470492 = 0;
      colontmp__12470492 = start_10700218;
      var res_12470493 = colontmp__12470492;
      L3: do {
          L4: while (true) {
          if (!(res_12470493 <= last_10700223)) break L4;
            i_10700606 = res_12470493;
            if ((sub_10700217 == s_10700216[chckIndx(i_10700606, 0, (s_10700216 != null ? s_10700216.length : 0)+0-1)-0])) {
            result_10700221 = i_10700606;
            break BeforeRet;
            }
            
            res_12470493 = addInt(res_12470493, 1);
          }
      } while(false);
    } while(false);
    result_10700221 = -1;
    break BeforeRet;
  } while (false);

  return result_10700221;

}
function nsuInitSkipTable(a_10695081, sub_10695082) {
    var m_10695083 = (sub_10695082 != null ? sub_10695082.length : 0);
    var i_10695085 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_10695085 <= 248)) break L2;
          a_10695081[chckIndx(chckRange(addInt(i_10695085, 0), 0, 255), 0, (a_10695081 != null ? a_10695081.length : 0)+0-1)-0] = m_10695083;
          a_10695081[chckIndx(chckRange(addInt(i_10695085, 1), 0, 255), 0, (a_10695081 != null ? a_10695081.length : 0)+0-1)-0] = m_10695083;
          a_10695081[chckIndx(chckRange(addInt(i_10695085, 2), 0, 255), 0, (a_10695081 != null ? a_10695081.length : 0)+0-1)-0] = m_10695083;
          a_10695081[chckIndx(chckRange(addInt(i_10695085, 3), 0, 255), 0, (a_10695081 != null ? a_10695081.length : 0)+0-1)-0] = m_10695083;
          a_10695081[chckIndx(chckRange(addInt(i_10695085, 4), 0, 255), 0, (a_10695081 != null ? a_10695081.length : 0)+0-1)-0] = m_10695083;
          a_10695081[chckIndx(chckRange(addInt(i_10695085, 5), 0, 255), 0, (a_10695081 != null ? a_10695081.length : 0)+0-1)-0] = m_10695083;
          a_10695081[chckIndx(chckRange(addInt(i_10695085, 6), 0, 255), 0, (a_10695081 != null ? a_10695081.length : 0)+0-1)-0] = m_10695083;
          a_10695081[chckIndx(chckRange(addInt(i_10695085, 7), 0, 255), 0, (a_10695081 != null ? a_10695081.length : 0)+0-1)-0] = m_10695083;
          i_10695085 = addInt(i_10695085, 8);
        }
    } while(false);
    L3: do {
      var i_10695101 = 0;
      var colontmp__12470500 = 0;
      colontmp__12470500 = subInt(m_10695083, 1);
      var i_12470501 = 0;
      L4: do {
          L5: while (true) {
          if (!(i_12470501 < colontmp__12470500)) break L5;
            i_10695101 = i_12470501;
            a_10695081[chckIndx(sub_10695082[chckIndx(i_10695101, 0, (sub_10695082 != null ? sub_10695082.length : 0)+0-1)-0], 0, (a_10695081 != null ? a_10695081.length : 0)+0-1)-0] = subInt(subInt(m_10695083, 1), i_10695101);
            i_12470501 = addInt(i_12470501, 1);
          }
      } while(false);
    } while(false);

  
}
function nsuFindStrA(a_10695117, s_10695118, sub_10695119, start_10695120, last_10695121) {
    var Tmp1;

  var result_10695123 = 0;

  BeforeRet: do {
    if ((last_10695121 == 0)) {
    Tmp1 = (s_10695118 != null ? (s_10695118.length-1) : -1);
    }
    else {
    Tmp1 = last_10695121;
    }
    
    var last_10695125 = Tmp1;
    var sub_last_10695126 = subInt((sub_10695119 != null ? sub_10695119.length : 0), 1);
    if ((sub_last_10695126 == -1)) {
    result_10695123 = start_10695120;
    break BeforeRet;
    }
    
    var skip_10695127 = start_10695120;
    L2: do {
        L3: while (true) {
        if (!(sub_last_10695126 <= subInt(last_10695125, skip_10695127))) break L3;
          var i_10700001 = sub_last_10695126;
          L4: do {
              L5: while (true) {
              if (!(s_10695118[chckIndx(addInt(skip_10695127, i_10700001), 0, (s_10695118 != null ? s_10695118.length : 0)+0-1)-0] == sub_10695119[chckIndx(i_10700001, 0, (sub_10695119 != null ? sub_10695119.length : 0)+0-1)-0])) break L5;
                if ((i_10700001 == 0)) {
                result_10695123 = skip_10695127;
                break BeforeRet;
                }
                
                i_10700001 = subInt(i_10700001, 1);
              }
          } while(false);
          skip_10695127 = addInt(skip_10695127, a_10695117[chckIndx(s_10695118[chckIndx(addInt(skip_10695127, sub_last_10695126), 0, (s_10695118 != null ? s_10695118.length : 0)+0-1)-0], 0, (a_10695117 != null ? a_10695117.length : 0)+0-1)-0]);
        }
    } while(false);
    result_10695123 = -1;
    break BeforeRet;
  } while (false);

  return result_10695123;

}
function nsuFindStr(s_10705022, sub_10705023, start_10705024, last_10705025) {
  var result_10705027 = 0;

  BeforeRet: do {
    if (((s_10705022 != null ? s_10705022.length : 0) < (sub_10705023 != null ? sub_10705023.length : 0))) {
    result_10705027 = -1;
    break BeforeRet;
    }
    
    if (((sub_10705023 != null ? sub_10705023.length : 0) == 1)) {
    result_10705027 = nsuFindChar(s_10705022, sub_10705023[chckIndx(0, 0, (sub_10705023 != null ? sub_10705023.length : 0)+0-1)-0], start_10705024, last_10705025);
    break BeforeRet;
    }
    
    var a_10710001 = [new Int32Array(256)];
    nsuInitSkipTable(a_10710001[0], sub_10705023);
    result_10705027 = nsuFindStrA(a_10710001[0], s_10705022, sub_10705023, start_10705024, last_10705025);
  } while (false);

  return result_10705027;

}
function contains_10760277(s_10760279, sub_10760280) {
  var result_10760281 = false;

  BeforeRet: do {
    result_10760281 = (0 <= nsuFindStr(s_10760279, sub_10760280, 0, 0));
    break BeforeRet;
  } while (false);

  return result_10760281;

}
function HEX5BHEX5D_12460022(s_12460028, x_12460030) {
  var result_12460032 = null;

    var a_12460201 = x_12460030.a;
    var l_12460405 = addInt(subInt(subInt((s_12460028 != null ? s_12460028.length : 0), x_12460030.b), a_12460201), 1);
    result_12460032 = new Array(chckRange(l_12460405, 0, 2147483647)); for (var i=0;i<chckRange(l_12460405, 0, 2147483647);++i) {result_12460032[i]=null;}    L1: do {
      var i_12460420 = 0;
      var i_12470508 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12470508 < l_12460405)) break L3;
            i_12460420 = i_12470508;
            result_12460032[chckIndx(i_12460420, 0, (result_12460032 != null ? result_12460032.length : 0)+0-1)-0] = nimCopy(null, s_12460028[chckIndx(addInt(i_12460420, a_12460201), 0, (s_12460028 != null ? s_12460028.length : 0)+0-1)-0], NTI1163014);
            i_12470508 = addInt(i_12470508, 1);
          }
      } while(false);
    } while(false);

  return result_12460032;

}
function HEX2EHEX2E_5785001(a_5785006, b_5785008) {
  var result_5785014 = {a: 0, b: 0};

    nimCopy(result_5785014, {a: a_5785006, b: b_5785008}, NTI5785011);

  return result_5785014;

}
function HEX5BHEX5D_3335283(s_3335287, x_3335289) {
  var result_3335290 = null;

    var a_3335401 = x_3335289.a;
    var l_3335601 = addInt(subInt(x_3335289.b, a_3335401), 1);
    result_3335290 = nimCopy(null, mnewString(chckRange(l_3335601, 0, 2147483647)), NTI1163014);
    L1: do {
      var i_3335609 = 0;
      var i_12470515 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12470515 < l_3335601)) break L3;
            i_3335609 = i_12470515;
            result_3335290[chckIndx(i_3335609, 0, (result_3335290 != null ? result_3335290.length : 0)+0-1)-0] = s_3335287[chckIndx(addInt(i_3335609, a_3335401), 0, (s_3335287 != null ? s_3335287.length : 0)+0-1)-0];
            i_12470515 = addInt(i_12470515, 1);
          }
      } while(false);
    } while(false);

  return result_3335290;

}
function nsuIsLowerAsciiChar(c_10040022) {
  var result_10040023 = false;

  BeforeRet: do {
    result_10040023 = (ConstSet2[c_10040022] != undefined);
    break BeforeRet;
  } while (false);

  return result_10040023;

}
function HEX2BHEX3D_10875021(x_10875025, x_10875025_Idx, y_10875026) {
    x_10875025[x_10875025_Idx] = (x_10875025[x_10875025_Idx] + y_10875026);

  
}
function hash_12010001(x_12010004) {
  var result_12010005 = 0;

    result_12010005 = x_12010004;

  return result_12010005;

}
function is_filled_2164018(hcode_2164020) {
  var result_2164021 = false;

    result_2164021 = !((hcode_2164020 == 0));

  return result_2164021;

}
function next_try_2165014(h_2165016, max_hash_2165017) {
  var result_2165018 = 0;

    result_2165018 = (addInt(h_2165016, 1) & max_hash_2165017);

  return result_2165018;

}
function raw_get_12115602(t_12115606, key_12115607, hc_12115608, hc_12115608_Idx) {
            var Tmp3;

  var result_12115609 = 0;

  BeforeRet: do {
    hc_12115608[hc_12115608_Idx] = hash_12010001(key_12115607);
    if ((hc_12115608[hc_12115608_Idx] == 0)) {
    hc_12115608[hc_12115608_Idx] = 314159265;
    }
    
    if (((t_12115606.data != null ? t_12115606.data.length : 0) == 0)) {
    result_12115609 = -1;
    break BeforeRet;
    }
    
    var h_12125138 = (hc_12115608[hc_12115608_Idx] & (t_12115606.data != null ? (t_12115606.data.length-1) : -1));
    L1: do {
        L2: while (true) {
        if (!is_filled_2164018(t_12115606.data[chckIndx(h_12125138, 0, (t_12115606.data != null ? t_12115606.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_12115606.data[chckIndx(h_12125138, 0, (t_12115606.data != null ? t_12115606.data.length : 0)+0-1)-0].Field0 == hc_12115608[hc_12115608_Idx])) Tmp3 = false; else {              Tmp3 = (t_12115606.data[chckIndx(h_12125138, 0, (t_12115606.data != null ? t_12115606.data.length : 0)+0-1)-0].Field1 == key_12115607);            }          if (Tmp3) {
          result_12115609 = h_12125138;
          break BeforeRet;
          }
          
          h_12125138 = next_try_2165014(h_12125138, (t_12115606.data != null ? (t_12115606.data.length-1) : -1));
        }
    } while(false);
    result_12115609 = subInt(-1, h_12125138);
  } while (false);

  return result_12115609;

}
function HEX5BHEX5D_12295315(t_12295320, key_12295321) {
  var result_12295322 = 0.0;

    var hcHEX60gensym2165396_12295323 = [0];
    var indexHEX60gensym2165397_12295332 = raw_get_12115602(t_12295320, key_12295321, hcHEX60gensym2165396_12295323, 0);
    if ((0 <= indexHEX60gensym2165397_12295332)) {
    result_12295322 = t_12295320.data[chckIndx(indexHEX60gensym2165397_12295332, 0, (t_12295320.data != null ? t_12295320.data.length : 0)+0-1)-0].Field2;
    }
    else {
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(nimCharToStr(key_12295321) || []), parent: null, m_type: NTI1169045, name: null, trace: null, up: null}, "KeyError");
    }
    

  return result_12295322;

}
function nsuToUpperAsciiChar(c_10070016) {
  var result_10070017 = 0;

    if ((ConstSet3[c_10070016] != undefined)) {
    result_10070017 = chckRange(subInt(c_10070016, 32), 0, 255);
    }
    else {
      result_10070017 = c_10070016;
    }
    

  return result_10070017;

}
function value_12295163(s_12295165, fr_12295166, to_12295167) {
  var result_12295168 = [0.0];

    var p_12295169 = s_12295165.board[chckIndx(fr_12295166, 0, (s_12295165.board != null ? s_12295165.board.length : 0)+0-1)-0];
    var q_12295170 = s_12295165.board[chckIndx(to_12295167, 0, (s_12295165.board != null ? s_12295165.board.length : 0)+0-1)-0];
    if (nsuIsLowerAsciiChar(q_12295170)) {
    HEX2BHEX3D_10875021(result_12295168, 0, HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, nsuToUpperAsciiChar(q_12295170)));
    }
    
    if ((p_12295169 == 80)) {
    if (((21 <= to_12295167) && (to_12295167 <= 28))) {
    HEX2BHEX3D_10875021(result_12295168, 0, (HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, 81) - HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, 80)));
    }
    
    if ((to_12295167 == s_12295165.ep)) {
    HEX2BHEX3D_10875021(result_12295168, 0, HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, 80));
    }
    
    }
    

  return result_12295168[0];

}
function put_12205130(board_12205132, at_12205133, piece_12205134) {
  var result_12205135 = null;

  BeforeRet: do {
    result_12205135 = nimCopy(null, (HEX5BHEX5D_3335283(board_12205132, HEX2EHEX2E_3335220(0, subInt(at_12205133, 1))) || []).concat([piece_12205134],HEX5BHEX5D_3335283(board_12205132, HEX2EHEX2E_3335220(addInt(at_12205133, 1), 119)) || []), NTI1163014);
    break BeforeRet;
  } while (false);

  return result_12205135;

}
function to_float_1191459(i_1191461) {
  var result_1191462 = 0.0;

    result_1191462 = i_1191461;

  return result_1191462;

}
function HEX2F_1490648(x_1490650, y_1490651) {
  var result_1490652 = 0.0;

    result_1490652 = (to_float_1191459(x_1490650) / to_float_1191459(y_1490651));

  return result_1490652;

}
function move_12300502(s_12300504, fr_12300505, to_12300506) {
  var result_12300507 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

  BeforeRet: do {
    var p_12300508 = s_12300504.board[chckIndx(fr_12300505, 0, (s_12300504.board != null ? s_12300504.board.length : 0)+0-1)-0];
    var q_12300509 = s_12300504.board[chckIndx(to_12300506, 0, (s_12300504.board != null ? s_12300504.board.length : 0)+0-1)-0];
    var board_12300510 = nimCopy(null, s_12300504.board, NTI1163014);
    var score_12300511 = (s_12300504.score + value_12295163(s_12300504, fr_12300505, to_12300506));
    var wc_w_12300512 = s_12300504.wc_w;
    var wc_e_12300513 = s_12300504.wc_e;
    var bc_w_12300514 = s_12300504.bc_w;
    var bc_e_12300515 = s_12300504.bc_e;
    var ep_12300517 = 0;
    var kp_12300519 = 0;
    var lastcap_12300521 = 0;
    if (!((q_12300509 == 46))) {
    lastcap_12300521 = to_12300506;
    }
    else {
      lastcap_12300521 = 0;
    }
    
    board_12300510 = nimCopy(null, put_12205130(board_12300510, to_12300506, p_12300508), NTI1163014);
    board_12300510 = nimCopy(null, put_12205130(board_12300510, fr_12300505, 46), NTI1163014);
    if ((fr_12300505 == 91)) {
    wc_w_12300512 = false;
    }
    
    if ((fr_12300505 == 98)) {
    wc_e_12300513 = false;
    }
    
    if ((to_12300506 == 21)) {
    bc_e_12300515 = false;
    }
    
    if ((to_12300506 == 28)) {
    bc_w_12300514 = false;
    }
    
    if ((p_12300508 == 75)) {
    wc_w_12300512 = false;
    wc_e_12300513 = false;
    if ((absInt(subInt(to_12300506, fr_12300505)) == 2)) {
    kp_12300519 = ((HEX2F_1490648(addInt(to_12300506, fr_12300505), 2))|0);
    if ((to_12300506 < fr_12300505)) {
    board_12300510 = nimCopy(null, put_12205130(board_12300510, 91, 46), NTI1163014);
    }
    else {
      board_12300510 = nimCopy(null, put_12205130(board_12300510, 98, 46), NTI1163014);
    }
    
    board_12300510 = nimCopy(null, put_12205130(board_12300510, kp_12300519, 82), NTI1163014);
    }
    
    }
    
    if ((p_12300508 == 80)) {
    if (((21 <= to_12300506) && (to_12300506 <= 28))) {
    board_12300510 = nimCopy(null, put_12205130(board_12300510, to_12300506, 81), NTI1163014);
    }
    
    if ((subInt(to_12300506, fr_12300505) == -20)) {
    ep_12300517 = addInt(fr_12300505, -10);
    }
    
    if ((to_12300506 == s_12300504.ep)) {
    board_12300510 = nimCopy(null, put_12205130(board_12300510, addInt(to_12300506, 10), 46), NTI1163014);
    }
    
    }
    
    nimCopy(result_12300507, {board: nimCopy(null, board_12300510, NTI1163014), score: score_12300511, wc_w: wc_w_12300512, wc_e: wc_e_12300513, bc_w: bc_w_12300514, bc_e: bc_e_12300515, ep: ep_12300517, kp: kp_12300519, lastcap: lastcap_12300521}, NTI12180708);
    break BeforeRet;
  } while (false);

  return result_12300507;

}
function epoch_time_11845401() {
  var result_11845403 = 0.0;

    result_11845403 = HEX2F_1490648(new Date().getTime(), 1000);

  return result_11845403;

}
function HEX2A_2161019(x_2161021, order_2161022) {
  var result_2161023 = 0;

    var y_2161028 = subInt(order_2161022, 1);
    result_2161023 = subInt((x_2161021 ^ y_2161028), y_2161028);

  return result_2161023;

}
function merge_12330686(a_12330691, b_12330694, lo_12330695, m_12330696, hi_12330697, cmp_12330701, order_12330702) {
  BeforeRet: do {
    if ((HEX2A_2161019(cmp_12330701(a_12330691[chckIndx(m_12330696, 0, (a_12330691 != null ? a_12330691.length : 0)+0-1)-0], a_12330691[chckIndx(addInt(m_12330696, 1), 0, (a_12330691 != null ? a_12330691.length : 0)+0-1)-0]), order_12330702) <= 0)) {
    break BeforeRet;
    }
    
    var j_12330703 = lo_12330695;
    if (!((j_12330703 <= m_12330696))) {
    failed_assert_impl_1267680(makeNimstrLit("algorithm.nim(346, 10) `j <= m` "));
    }
    
    var bb_12340402 = 0;
    L1: do {
        L2: while (true) {
        if (!(j_12330703 <= m_12330696)) break L2;
          nimCopy(b_12330694[chckIndx(bb_12340402, 0, (b_12330694 != null ? b_12330694.length : 0)+0-1)-0], a_12330691[chckIndx(j_12330703, 0, (a_12330691 != null ? a_12330691.length : 0)+0-1)-0], NTI12325025);
          bb_12340402 = addInt(bb_12340402, 1);
          j_12330703 = addInt(j_12330703, 1);
        }
    } while(false);
    var i_12340614 = 0;
    var k_12340615 = lo_12330695;
    L3: do {
        L4: while (true) {
        if (!((k_12340615 < j_12330703) && (j_12330703 <= hi_12330697))) break L4;
          if ((HEX2A_2161019(cmp_12330701(b_12330694[chckIndx(i_12340614, 0, (b_12330694 != null ? b_12330694.length : 0)+0-1)-0], a_12330691[chckIndx(j_12330703, 0, (a_12330691 != null ? a_12330691.length : 0)+0-1)-0]), order_12330702) <= 0)) {
          nimCopy(a_12330691[chckIndx(k_12340615, 0, (a_12330691 != null ? a_12330691.length : 0)+0-1)-0], b_12330694[chckIndx(i_12340614, 0, (b_12330694 != null ? b_12330694.length : 0)+0-1)-0], NTI12325025);
          i_12340614 = addInt(i_12340614, 1);
          }
          else {
            nimCopy(a_12330691[chckIndx(k_12340615, 0, (a_12330691 != null ? a_12330691.length : 0)+0-1)-0], a_12330691[chckIndx(j_12330703, 0, (a_12330691 != null ? a_12330691.length : 0)+0-1)-0], NTI12325025);
            j_12330703 = addInt(j_12330703, 1);
          }
          
          k_12340615 = addInt(k_12340615, 1);
        }
    } while(false);
    L5: do {
        L6: while (true) {
        if (!(k_12340615 < j_12330703)) break L6;
          nimCopy(a_12330691[chckIndx(k_12340615, 0, (a_12330691 != null ? a_12330691.length : 0)+0-1)-0], b_12330694[chckIndx(i_12340614, 0, (b_12330694 != null ? b_12330694.length : 0)+0-1)-0], NTI12325025);
          k_12340615 = addInt(k_12340615, 1);
          i_12340614 = addInt(i_12340614, 1);
        }
    } while(false);
  } while (false);

  
}
function sort_12330656(a_12330661, cmp_12330665, order_12330666) {
    var n_12330671 = (a_12330661 != null ? a_12330661.length : 0);
    var b_12330673 = null;
    b_12330673 = new Array(chckRange(divInt(n_12330671, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_12330671, 2), 0, 2147483647);++i) {b_12330673[i]={Field0: 0.0, Field1: 0, Field2: 0};}    var s_12330682 = 1;
    L1: do {
        L2: while (true) {
        if (!(s_12330682 < n_12330671)) break L2;
          var m_12330683 = subInt(subInt(n_12330671, 1), s_12330682);
          L3: do {
              L4: while (true) {
              if (!(0 <= m_12330683)) break L4;
                merge_12330686(a_12330661, b_12330673, nimMax(addInt(subInt(m_12330683, s_12330682), 1), 0), m_12330683, addInt(m_12330683, s_12330682), cmp_12330665, order_12330666);
                m_12330683 = subInt(m_12330683, mulInt(s_12330682, 2));
              }
          } while(false);
          s_12330682 = mulInt(s_12330682, 2);
        }
    } while(false);

  
}
function my_cmp_12330633(x_12330637, y_12330638) {
    var Tmp1;

  var result_12330639 = 0;

    if ((y_12330638["Field0"] < x_12330637["Field0"])) {
    Tmp1 = -1;
    }
    else {
    Tmp1 = 1;
    }
    
    result_12330639 = Tmp1;

  return result_12330639;

}
function order_12325014(b_12325016, ply_12325017, moves_12325020) {
  var result_12325023 = null;

    var mlist_12325026 = null;
    L1: do {
      var m_12325033 = {Field0: 0, Field1: 0};
      var i_12470534 = 0;
      var l_12470535 = (moves_12325020 != null ? moves_12325020.length : 0);
      L2: do {
          L3: while (true) {
          if (!(i_12470534 < l_12470535)) break L3;
            nimCopy(m_12325033, moves_12325020[chckIndx(i_12470534, 0, (moves_12325020 != null ? moves_12325020.length : 0)+0-1)-0], NTI12305187);
            var p_12325034 = nsuToUpperAsciiChar(b_12325016.board[chckIndx(m_12325033["Field0"], 0, (b_12325016.board != null ? b_12325016.board.length : 0)+0-1)-0]);
            var q_12325035 = nsuToUpperAsciiChar(b_12325016.board[chckIndx(m_12325033["Field1"], 0, (b_12325016.board != null ? b_12325016.board.length : 0)+0-1)-0]);
            if (!((q_12325035 == 46))) {
            if (mlist_12325026 != null) { mlist_12325026.push({Field0: ((1.0000000000000000e+01 * HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, q_12325035)) - HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_12325034)), Field1: m_12325033["Field0"], Field2: m_12325033["Field1"]}); } else { mlist_12325026 = [{Field0: ((1.0000000000000000e+01 * HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, q_12325035)) - HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_12325034)), Field1: m_12325033["Field0"], Field2: m_12325033["Field1"]}]; };
            }
            else {
            if ((m_12325033["Field1"] == b_12325016.ep)) {
            if (mlist_12325026 != null) { mlist_12325026.push({Field0: (1.0000000000000000e+01 - HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_12325034)), Field1: m_12325033["Field0"], Field2: m_12325033["Field1"]}); } else { mlist_12325026 = [{Field0: (1.0000000000000000e+01 - HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_12325034)), Field1: m_12325033["Field0"], Field2: m_12325033["Field1"]}]; };
            }
            else {
            if (mlist_12325026 != null) { mlist_12325026.push({Field0: HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_12325034), Field1: m_12325033["Field0"], Field2: m_12325033["Field1"]}); } else { mlist_12325026 = [{Field0: HEX5BHEX5D_12295315({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_12325034), Field1: m_12325033["Field0"], Field2: m_12325033["Field1"]}]; };
            }
            }
            i_12470534 = addInt(i_12470534, 1);
            if (!(((moves_12325020 != null ? moves_12325020.length : 0) == l_12470535))) {
            failed_assert_impl_1267680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    sort_12330656(mlist_12325026, my_cmp_12330633, 1);
    L4: do {
      var m_12350214 = {Field0: 0.0, Field1: 0, Field2: 0};
      var i_12470539 = 0;
      var l_12470540 = (mlist_12325026 != null ? mlist_12325026.length : 0);
      L5: do {
          L6: while (true) {
          if (!(i_12470539 < l_12470540)) break L6;
            nimCopy(m_12350214, mlist_12325026[chckIndx(i_12470539, 0, (mlist_12325026 != null ? mlist_12325026.length : 0)+0-1)-0], NTI12325025);
            if (result_12325023 != null) { result_12325023.push({Field0: m_12350214["Field1"], Field1: m_12350214["Field2"]}); } else { result_12325023 = [{Field0: m_12350214["Field1"], Field1: m_12350214["Field2"]}]; };
            i_12470539 = addInt(i_12470539, 1);
            if (!(((mlist_12325026 != null ? mlist_12325026.length : 0) == l_12470540))) {
            failed_assert_impl_1267680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);

  return result_12325023;

}
function nsuIsUpperAsciiChar(c_10045023) {
  var result_10045024 = false;

  BeforeRet: do {
    result_10045024 = (ConstSet4[c_10045023] != undefined);
    break BeforeRet;
  } while (false);

  return result_10045024;

}
function raw_get_12005602(t_12005606, key_12005607, hc_12005608, hc_12005608_Idx) {
            var Tmp3;

  var result_12005609 = 0;

  BeforeRet: do {
    hc_12005608[hc_12005608_Idx] = hash_12010001(key_12005607);
    if ((hc_12005608[hc_12005608_Idx] == 0)) {
    hc_12005608[hc_12005608_Idx] = 314159265;
    }
    
    if (((t_12005606.data != null ? t_12005606.data.length : 0) == 0)) {
    result_12005609 = -1;
    break BeforeRet;
    }
    
    var h_12015138 = (hc_12005608[hc_12005608_Idx] & (t_12005606.data != null ? (t_12005606.data.length-1) : -1));
    L1: do {
        L2: while (true) {
        if (!is_filled_2164018(t_12005606.data[chckIndx(h_12015138, 0, (t_12005606.data != null ? t_12005606.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_12005606.data[chckIndx(h_12015138, 0, (t_12005606.data != null ? t_12005606.data.length : 0)+0-1)-0].Field0 == hc_12005608[hc_12005608_Idx])) Tmp3 = false; else {              Tmp3 = (t_12005606.data[chckIndx(h_12015138, 0, (t_12005606.data != null ? t_12005606.data.length : 0)+0-1)-0].Field1 == key_12005607);            }          if (Tmp3) {
          result_12005609 = h_12015138;
          break BeforeRet;
          }
          
          h_12015138 = next_try_2165014(h_12015138, (t_12005606.data != null ? (t_12005606.data.length-1) : -1));
        }
    } while(false);
    result_12005609 = subInt(-1, h_12015138);
  } while (false);

  return result_12005609;

}
function HEX5BHEX5D_12230295(t_12230300, key_12230301) {
  var result_12230302 = new Int32Array(8);

    var hcHEX60gensym2165396_12230303 = [0];
    var indexHEX60gensym2165397_12230312 = raw_get_12005602(t_12230300, key_12230301, hcHEX60gensym2165396_12230303, 0);
    if ((0 <= indexHEX60gensym2165397_12230312)) {
    nimCopy(result_12230302, t_12230300.data[chckIndx(indexHEX60gensym2165397_12230312, 0, (t_12230300.data != null ? t_12230300.data.length : 0)+0-1)-0].Field2, NTI11961042);
    }
    else {
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(nimCharToStr(key_12230301) || []), parent: null, m_type: NTI1169045, name: null, trace: null, up: null}, "KeyError");
    }
    

  return result_12230302;

}
function nsuIsSpaceAsciiChar(c_10035022) {
  var result_10035023 = false;

  BeforeRet: do {
    result_10035023 = (ConstSet5[c_10035022] != undefined);
    break BeforeRet;
  } while (false);

  return result_10035023;

}
function find_12240129(a_12240133, item_12240134) {
  var result_12240135 = 0;

  BeforeRet: do {
    L1: do {
      var i_12240166 = 0;
      var i_12470603 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12470603 < (a_12240133 != null ? a_12240133.length : 0))) break L3;
            i_12240166 = a_12240133[chckIndx(i_12470603, 0, (a_12240133 != null ? a_12240133.length : 0)+0-1)-0];
            if ((i_12240166 == item_12240134)) {
            break BeforeRet;
            }
            
            result_12240135 = addInt(result_12240135, 1);
            i_12470603 = addInt(i_12470603, 1);
          }
      } while(false);
    } while(false);
    result_12240135 = -1;
  } while (false);

  return result_12240135;

}
function contains_12240122(a_12240126, item_12240127) {
  var result_12240128 = false;

  BeforeRet: do {
    result_12240128 = (0 <= find_12240129(a_12240126, item_12240127));
    break BeforeRet;
  } while (false);

  return result_12240128;

}
function gen_moves_no_castle_12230133(s_12230135) {
                              var Tmp10;
                              var Tmp11;
                                var Tmp12;

  var result_12230138 = null;

    L1: do {
      var i_12230149 = 0;
      var res_12470594 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12470594 <= 119)) break L3;
            i_12230149 = res_12470594;
            L4: do {
              var p_12230150 = s_12230135.board[chckIndx(i_12230149, 0, (s_12230135.board != null ? s_12230135.board.length : 0)+0-1)-0];
              if (!(nsuIsUpperAsciiChar(p_12230150))) {
              break L4;
              }
              
              L5: do {
                var d_12235105 = 0;
                var colontmp__12470591 = new Int32Array(8);
                nimCopy(colontmp__12470591, HEX5BHEX5D_12230295({data: [{Field0: 80, Field1: 80, Field2: [-10, -20, -11, -9, 0, 0, 0, 0]}, {Field0: 81, Field1: 81, Field2: [-10, 1, 10, -1, -9, 11, 9, -11]}, {Field0: 66, Field1: 66, Field2: [-9, 11, 9, -11, 0, 0, 0, 0]}, {Field0: 82, Field1: 82, Field2: [-10, 1, 10, -1, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 75, Field1: 75, Field2: [-10, 1, 10, -1, -9, 11, 9, -11]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 78, Field1: 78, Field2: [-19, -8, 12, 21, 19, 8, -12, -21]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}], counter: 6}, p_12230150), NTI11961042);
                var i_12470592 = 0;
                if ((i_12470592 <= 7)) {
                L6: do {
                    L7: while (true) {
                    if (!true) break L7;
                      d_12235105 = colontmp__12470591[chckIndx(i_12470592, 0, (colontmp__12470591 != null ? colontmp__12470591.length : 0)+0-1)-0];
                      if ((d_12235105 == 0)) {
                      break L5;
                      }
                      
                      var j_12235106 = addInt(i_12230149, d_12235105);
                      L8: do {
                          L9: while (true) {
                          if (!true) break L9;
                            var q_12235107 = s_12230135.board[chckIndx(j_12235106, 0, (s_12230135.board != null ? s_12230135.board.length : 0)+0-1)-0];
                            if ((nsuIsSpaceAsciiChar(q_12235107) || nsuIsUpperAsciiChar(q_12235107))) {
                            break L8;
                            }
                            
                              if (!((p_12230150 == 80) && contains_12240122([-10, -20], d_12235105))) Tmp10 = false; else {                                Tmp10 = !((q_12235107 == 46));                              }                            if (Tmp10) {
                            break L8;
                            }
                            
                              if (!((p_12230150 == 80) && (d_12235105 == -20))) Tmp11 = false; else {                                if ((i_12230149 < 81)) Tmp12 = true; else {                                  Tmp12 = !((s_12230135.board[chckIndx(addInt(i_12230149, -10), 0, (s_12230135.board != null ? s_12230135.board.length : 0)+0-1)-0] == 46));                                }                                Tmp11 = Tmp12;                              }                            if (Tmp11) {
                            break L8;
                            }
                            
                            if (((((p_12230150 == 80) && contains_12240122([-11, -9], d_12235105)) && (q_12235107 == 46)) && !(contains_12240122([s_12230135.ep, s_12230135.kp, subInt(s_12230135.kp, 1), addInt(s_12230135.kp, 1)], j_12235106)))) {
                            break L8;
                            }
                            
                            if (result_12230138 != null) { result_12230138.push({Field0: i_12230149, Field1: j_12235106}); } else { result_12230138 = [{Field0: i_12230149, Field1: j_12235106}]; };
                            if (((((p_12230150 == 80) || (p_12230150 == 78)) || (p_12230150 == 75)) || nsuIsLowerAsciiChar(q_12235107))) {
                            break L8;
                            }
                            
                            j_12235106 = addInt(j_12235106, d_12235105);
                          }
                      } while(false);
                      if ((7 <= i_12470592)) {
                      break L6;
                      }
                      
                      i_12470592 = addInt(i_12470592, 1);
                    }
                } while(false);
                }
                
              } while(false);
            } while(false);
            res_12470594 = addInt(res_12470594, 1);
          }
      } while(false);
    } while(false);

  return result_12230138;

}
function attacks_12260177(pos_12260179, x_12260180) {
  var result_12260182 = null;

    var moves_12260183 = gen_moves_no_castle_12230133(pos_12260179);
    L1: do {
      var n_12260197 = 0;
      var colontmp__12470581 = 0;
      colontmp__12470581 = subInt((moves_12260183 != null ? moves_12260183.length : 0), 1);
      var res_12470582 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12470582 <= colontmp__12470581)) break L3;
            n_12260197 = res_12470582;
            var i_12260198 = moves_12260183[chckIndx(n_12260197, 0, (moves_12260183 != null ? moves_12260183.length : 0)+0-1)-0]["Field0"];
            var j_12260199 = moves_12260183[chckIndx(n_12260197, 0, (moves_12260183 != null ? moves_12260183.length : 0)+0-1)-0]["Field1"];
            if ((i_12260198 == x_12260180)) {
            if (result_12260182 != null) { result_12260182.push(j_12260199); } else { result_12260182 = [j_12260199]; };
            }
            
            res_12470582 = addInt(res_12470582, 1);
          }
      } while(false);
    } while(false);

  return result_12260182;

}
function ischeck_12260235(s_12260237) {
  var result_12260239 = {Field0: false, Field1: false, Field2: false};

  BeforeRet: do {
    var check_12260240 = false;
    var wcastle_12260241 = true;
    var ecastle_12260242 = true;
    L1: do {
      var i_12260253 = 0;
      var res_12470571 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12470571 <= 119)) break L3;
            i_12260253 = res_12470571;
            L4: do {
              var p_12260254 = s_12260237.board[chckIndx(i_12260253, 0, (s_12260237.board != null ? s_12260237.board.length : 0)+0-1)-0];
              if (!(nsuIsUpperAsciiChar(p_12260254))) {
              break L4;
              }
              
              var a_12260255 = attacks_12260177(s_12260237, i_12260253);
              L5: do {
                var j_12270214 = 0;
                var i_12470568 = 0;
                var l_12470569 = (a_12260255 != null ? a_12260255.length : 0);
                L6: do {
                    L7: while (true) {
                    if (!(i_12470568 < l_12470569)) break L7;
                      j_12270214 = a_12260255[chckIndx(i_12470568, 0, (a_12260255 != null ? a_12260255.length : 0)+0-1)-0];
                      if ((s_12260237.board[chckIndx(j_12270214, 0, (s_12260237.board != null ? s_12260237.board.length : 0)+0-1)-0] == 107)) {
                      check_12260240 = true;
                      }
                      
                      if (((j_12270214 == 23) || (j_12270214 == 24))) {
                      ecastle_12260242 = false;
                      }
                      
                      if (((j_12270214 == 26) || (j_12270214 == 27))) {
                      wcastle_12260241 = false;
                      }
                      
                      i_12470568 = addInt(i_12470568, 1);
                      if (!(((a_12260255 != null ? a_12260255.length : 0) == l_12470569))) {
                      failed_assert_impl_1267680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while(false);
              } while(false);
            } while(false);
            res_12470571 = addInt(res_12470571, 1);
          }
      } while(false);
    } while(false);
    var colontmp__12470577 = check_12260240;
    var colontmp__12470578 = wcastle_12260241;
    var colontmp__12470579 = ecastle_12260242;
    nimCopy(result_12260239, {Field0: colontmp__12470577, Field1: colontmp__12470578, Field2: colontmp__12470579}, NTI12260238);
    break BeforeRet;
  } while (false);

  return result_12260239;

}
function gen_moves_12270259(s_12270261, test_check_12270262) {
                              var Tmp10;
                              var Tmp11;
                                var Tmp12;

  var result_12270265 = null;

    var check_12270266 = false;
    var wcastle_12270267 = true;
    var ecastle_12270268 = true;
    if (test_check_12270262) {
    var __12270269 = ischeck_12260235(rotate_12205221(s_12270261));
    check_12270266 = __12270269["Field0"];
    wcastle_12270267 = __12270269["Field1"];
    ecastle_12270268 = __12270269["Field2"];
    }
    
    L1: do {
      var i_12270280 = 0;
      var res_12470558 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12470558 <= 119)) break L3;
            i_12270280 = res_12470558;
            L4: do {
              var p_12270281 = s_12270261.board[chckIndx(i_12270280, 0, (s_12270261.board != null ? s_12270261.board.length : 0)+0-1)-0];
              if (!(nsuIsUpperAsciiChar(p_12270281))) {
              break L4;
              }
              
              L5: do {
                var d_12270440 = 0;
                var colontmp__12470551 = new Int32Array(8);
                nimCopy(colontmp__12470551, HEX5BHEX5D_12230295({data: [{Field0: 80, Field1: 80, Field2: [-10, -20, -11, -9, 0, 0, 0, 0]}, {Field0: 81, Field1: 81, Field2: [-10, 1, 10, -1, -9, 11, 9, -11]}, {Field0: 66, Field1: 66, Field2: [-9, 11, 9, -11, 0, 0, 0, 0]}, {Field0: 82, Field1: 82, Field2: [-10, 1, 10, -1, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 75, Field1: 75, Field2: [-10, 1, 10, -1, -9, 11, 9, -11]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 78, Field1: 78, Field2: [-19, -8, 12, 21, 19, 8, -12, -21]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}], counter: 6}, p_12270281), NTI11961042);
                var i_12470556 = 0;
                if ((i_12470556 <= 7)) {
                L6: do {
                    L7: while (true) {
                    if (!true) break L7;
                      d_12270440 = colontmp__12470551[chckIndx(i_12470556, 0, (colontmp__12470551 != null ? colontmp__12470551.length : 0)+0-1)-0];
                      if ((d_12270440 == 0)) {
                      break L5;
                      }
                      
                      var j_12270441 = addInt(i_12270280, d_12270440);
                      L8: do {
                          L9: while (true) {
                          if (!true) break L9;
                            var q_12270442 = s_12270261.board[chckIndx(j_12270441, 0, (s_12270261.board != null ? s_12270261.board.length : 0)+0-1)-0];
                            if ((nsuIsSpaceAsciiChar(q_12270442) || nsuIsUpperAsciiChar(q_12270442))) {
                            break L8;
                            }
                            
                              if (!((p_12270281 == 80) && contains_12240122([-10, -20], d_12270440))) Tmp10 = false; else {                                Tmp10 = !((q_12270442 == 46));                              }                            if (Tmp10) {
                            break L8;
                            }
                            
                              if (!((p_12270281 == 80) && (d_12270440 == -20))) Tmp11 = false; else {                                if ((i_12270280 < 81)) Tmp12 = true; else {                                  Tmp12 = !((s_12270261.board[chckIndx(addInt(i_12270280, -10), 0, (s_12270261.board != null ? s_12270261.board.length : 0)+0-1)-0] == 46));                                }                                Tmp11 = Tmp12;                              }                            if (Tmp11) {
                            break L8;
                            }
                            
                            if (((((p_12270281 == 80) && contains_12240122([-11, -9], d_12270440)) && (q_12270442 == 46)) && !(contains_12240122([s_12270261.ep, s_12270261.kp, subInt(s_12270261.kp, 1), addInt(s_12270261.kp, 1)], j_12270441)))) {
                            break L8;
                            }
                            
                            if (result_12270265 != null) { result_12270265.push({Field0: i_12270280, Field1: j_12270441}); } else { result_12270265 = [{Field0: i_12270280, Field1: j_12270441}]; };
                            if (((((p_12270281 == 80) || (p_12270281 == 78)) || (p_12270281 == 75)) || nsuIsLowerAsciiChar(q_12270442))) {
                            break L8;
                            }
                            
                            if ((((((i_12270280 == 91) && (s_12270261.board[chckIndx(addInt(j_12270441, 1), 0, (s_12270261.board != null ? s_12270261.board.length : 0)+0-1)-0] == 75)) && s_12270261.wc_w) && wcastle_12270267) && !(check_12270266))) {
                            if (result_12270265 != null) { result_12270265.push({Field0: addInt(j_12270441, 1), Field1: addInt(j_12270441, -1)}); } else { result_12270265 = [{Field0: addInt(j_12270441, 1), Field1: addInt(j_12270441, -1)}]; };
                            }
                            
                            if ((((((i_12270280 == 98) && (s_12270261.board[chckIndx(addInt(j_12270441, -1), 0, (s_12270261.board != null ? s_12270261.board.length : 0)+0-1)-0] == 75)) && s_12270261.wc_e) && ecastle_12270268) && !(check_12270266))) {
                            if (result_12270265 != null) { result_12270265.push({Field0: addInt(j_12270441, -1), Field1: addInt(j_12270441, 1)}); } else { result_12270265 = [{Field0: addInt(j_12270441, -1), Field1: addInt(j_12270441, 1)}]; };
                            }
                            
                            j_12270441 = addInt(j_12270441, d_12270440);
                          }
                      } while(false);
                      if ((7 <= i_12470556)) {
                      break L6;
                      }
                      
                      i_12470556 = addInt(i_12470556, 1);
                    }
                } while(false);
                }
                
              } while(false);
            } while(false);
            res_12470558 = addInt(res_12470558, 1);
          }
      } while(false);
    } while(false);

  return result_12270265;

}
function parse_saturated_natural_2375017(s_2375019, b_2375021, b_2375021_Idx, start_2375022) {
      var Tmp1;
          var Tmp4;

  var result_2375024 = 0;

    var i_2375025 = start_2375022;
    if (((i_2375025 < (s_2375019 != null ? s_2375019.length : 0)) && (s_2375019[chckIndx(i_2375025, 0, (s_2375019 != null ? s_2375019.length : 0)+0-1)-0] == 43))) {
    i_2375025 = addInt(i_2375025, 1);
    }
    
      if (!(i_2375025 < (s_2375019 != null ? s_2375019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet10[s_2375019[chckIndx(i_2375025, 0, (s_2375019 != null ? s_2375019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    b_2375021[b_2375021_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_2375025 < (s_2375019 != null ? s_2375019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet11[s_2375019[chckIndx(i_2375025, 0, (s_2375019 != null ? s_2375019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          var c_2385016 = subInt(s_2375019[chckIndx(i_2375025, 0, (s_2375019 != null ? s_2375019.length : 0)+0-1)-0], 48);
          if ((b_2375021[b_2375021_Idx] <= divInt(subInt(2147483647, c_2385016), 10))) {
          b_2375021[b_2375021_Idx] = addInt(mulInt(b_2375021[b_2375021_Idx], 10), c_2385016);
          }
          else {
            b_2375021[b_2375021_Idx] = 2147483647;
          }
          
          i_2375025 = addInt(i_2375025, 1);
          L5: do {
              L6: while (true) {
              if (!((i_2375025 < (s_2375019 != null ? s_2375019.length : 0)) && (s_2375019[chckIndx(i_2375025, 0, (s_2375019 != null ? s_2375019.length : 0)+0-1)-0] == 95))) break L6;
                i_2375025 = addInt(i_2375025, 1);
              }
          } while(false);
        }
    } while(false);
    result_2375024 = subInt(i_2375025, start_2375022);
    }
    

  return result_2375024;

}
function HEX5BHEX5D_5785068(s_5785072, x_5785074) {
  var result_5785075 = null;

    var a_5785201 = x_5785074.a;
    var l_5785401 = addInt(subInt(subInt((s_5785072 != null ? s_5785072.length : 0), x_5785074.b), a_5785201), 1);
    result_5785075 = nimCopy(null, mnewString(chckRange(l_5785401, 0, 2147483647)), NTI1163014);
    L1: do {
      var i_5785409 = 0;
      var i_12470619 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12470619 < l_5785401)) break L3;
            i_5785409 = i_12470619;
            result_5785075[chckIndx(i_5785409, 0, (result_5785075 != null ? result_5785075.length : 0)+0-1)-0] = s_5785072[chckIndx(addInt(i_5785409, a_5785201), 0, (s_5785072 != null ? s_5785072.length : 0)+0-1)-0];
            i_12470619 = addInt(i_12470619, 1);
          }
      } while(false);
    } while(false);

  return result_5785075;

}
function parse_standard_format_specifier_11855322(s_11855324, start_11855325, ignore_unknown_suffix_11855327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_11855328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

    result_11855328.fill = 32;
    result_11855328.align = 0;
    result_11855328.sign = 45;
    var i_11855331 = start_11855325;
    if (((addInt(i_11855331, 1) < (s_11855324 != null ? s_11855324.length : 0)) && (ConstSet6[s_11855324[chckIndx(addInt(i_11855331, 1), 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0]] != undefined))) {
    result_11855328.fill = s_11855324[chckIndx(i_11855331, 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0];
    result_11855328.align = s_11855324[chckIndx(addInt(i_11855331, 1), 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0];
    i_11855331 = addInt(i_11855331, 2);
    }
    else {
    if (((i_11855331 < (s_11855324 != null ? s_11855324.length : 0)) && (ConstSet7[s_11855324[chckIndx(i_11855331, 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0]] != undefined))) {
    result_11855328.align = s_11855324[chckIndx(i_11855331, 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0];
    i_11855331 = addInt(i_11855331, 1);
    }
    }
    if (((i_11855331 < (s_11855324 != null ? s_11855324.length : 0)) && (ConstSet8[s_11855324[chckIndx(i_11855331, 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0]] != undefined))) {
    result_11855328.sign = s_11855324[chckIndx(i_11855331, 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0];
    i_11855331 = addInt(i_11855331, 1);
    }
    
    if (((i_11855331 < (s_11855324 != null ? s_11855324.length : 0)) && (s_11855324[chckIndx(i_11855331, 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0] == 35))) {
    result_11855328.alternateForm = true;
    i_11855331 = addInt(i_11855331, 1);
    }
    
      if (!((addInt(i_11855331, 1) < (s_11855324 != null ? s_11855324.length : 0)) && (s_11855324[chckIndx(i_11855331, 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet9[s_11855324[chckIndx(addInt(i_11855331, 1), 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    result_11855328.padWithZero = true;
    i_11855331 = addInt(i_11855331, 1);
    }
    
    var parsed_length_11875015 = parse_saturated_natural_2375017(s_11855324, result_11855328, "minimumWidth", i_11855331);
    i_11855331 = addInt(i_11855331, parsed_length_11875015);
    if (((i_11855331 < (s_11855324 != null ? s_11855324.length : 0)) && (s_11855324[chckIndx(i_11855331, 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0] == 46))) {
    i_11855331 = addInt(i_11855331, 1);
    var parsed_length_b_11875029 = parse_saturated_natural_2375017(s_11855324, result_11855328, "precision", i_11855331);
    i_11855331 = addInt(i_11855331, parsed_length_b_11875029);
    }
    else {
      result_11855328.precision = -1;
    }
    
      if (!(i_11855331 < (s_11855324 != null ? s_11855324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet12[s_11855324[chckIndx(i_11855331, 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    result_11855328.typ = s_11855324[chckIndx(i_11855331, 0, (s_11855324 != null ? s_11855324.length : 0)+0-1)-0];
    i_11855331 = addInt(i_11855331, 1);
    }
    
    result_11855328.endPosition = i_11855331;
      if (!!((i_11855331 == (s_11855324 != null ? s_11855324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_11855327);      }    if (Tmp3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_5785068(s_11855324, HEX2EHEX2E_5785001(i_11855331, 1)) || []), parent: null, m_type: NTI1169043, name: null, trace: null, up: null}, "ValueError");
    }
    

  return result_11855328;

}
function mk_digit_11847054(v_11847056, typ_11847057) {
      var Tmp1;

  var result_11847058 = null;

    if (!((v_11847056 < 26))) {
    failed_assert_impl_1267680(makeNimstrLit("strformat.nim(270, 9) `v < 26` "));
    }
    
    if ((v_11847056 < 10)) {
    result_11847058 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_11847056), 0, 255)), NTI1163014);
    }
    else {
      if ((typ_11847057 == 120)) {
      Tmp1 = 97;
      }
      else {
      Tmp1 = 65;
      }
      
      result_11847058 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Tmp1, v_11847056), 10), 0, 255)), NTI1163014);
    }
    

  return result_11847058;

}
function nsuRepeatChar(c_10555048, count_10555049) {
  var result_10555050 = null;

    result_10555050 = nimCopy(null, mnewString(count_10555049), NTI1163014);
    L1: do {
      var i_10555059 = 0;
      var colontmp__12470633 = 0;
      colontmp__12470633 = subInt(count_10555049, 1);
      var res_12470634 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12470634 <= colontmp__12470633)) break L3;
            i_10555059 = res_12470634;
            result_10555050[chckIndx(i_10555059, 0, (result_10555050 != null ? result_10555050.length : 0)+0-1)-0] = c_10555048;
            res_12470634 = addInt(res_12470634, 1);
          }
      } while(false);
    } while(false);

  return result_10555050;

}
function format_int_12195002(n_12195005, radix_12195006, spec_12195007) {
    var Tmp7;

  var result_12195008 = null;

    var v_12195201 = n_12195005;
    var negative_12195202 = (v_12195201 < 0);
    if (negative_12195202) {
    v_12195201 = mulInt(v_12195201, -1);
    }
    
    var xx_12195203 = [];
    if (spec_12195007.alternateForm) {
    switch (spec_12195007.typ) {
    case 88:
      xx_12195203 = nimCopy(null, makeNimstrLit("0x"), NTI1163014);
      break;
    case 120:
      xx_12195203 = nimCopy(null, makeNimstrLit("0x"), NTI1163014);
      break;
    case 98:
      xx_12195203 = nimCopy(null, makeNimstrLit("0b"), NTI1163014);
      break;
    case 111:
      xx_12195203 = nimCopy(null, makeNimstrLit("0o"), NTI1163014);
      break;
    default: 
      break;
    }
    }
    
    if ((v_12195201 == 0)) {
    result_12195008 = nimCopy(null, makeNimstrLit("0"), NTI1163014);
    }
    else {
      result_12195008 = nimCopy(null, [], NTI1163014);
      L1: do {
          L2: while (true) {
          if (!(0 < v_12195201)) break L2;
            var d_12195206 = modInt(v_12195201, radix_12195006);
            v_12195201 = divInt(v_12195201, radix_12195006);
            if (result_12195008 != null) { result_12195008 = (result_12195008).concat(mk_digit_11847054(chckRange(d_12195206, -2147483648, 2147483647), spec_12195007.typ)); } else { result_12195008 = mk_digit_11847054(chckRange(d_12195206, -2147483648, 2147483647), spec_12195007.typ).slice(); };
          }
      } while(false);
      L3: do {
        var idx_12195215 = 0;
        var colontmp__12470625 = 0;
        colontmp__12470625 = divInt((result_12195008 != null ? result_12195008.length : 0), 2);
        var i_12470626 = 0;
        L4: do {
            L5: while (true) {
            if (!(i_12470626 < colontmp__12470625)) break L5;
              idx_12195215 = i_12470626;
              var Tmp6 = result_12195008[chckIndx(idx_12195215, 0, (result_12195008 != null ? result_12195008.length : 0)+0-1)-0]; result_12195008[chckIndx(idx_12195215, 0, (result_12195008 != null ? result_12195008.length : 0)+0-1)-0] = result_12195008[chckIndx(subInt(subInt((result_12195008 != null ? result_12195008.length : 0), idx_12195215), 1), 0, (result_12195008 != null ? result_12195008.length : 0)+0-1)-0]; result_12195008[chckIndx(subInt(subInt((result_12195008 != null ? result_12195008.length : 0), idx_12195215), 1), 0, (result_12195008 != null ? result_12195008.length : 0)+0-1)-0] = Tmp6;              i_12470626 = addInt(i_12470626, 1);
            }
        } while(false);
      } while(false);
    }
    
    if (spec_12195007.padWithZero) {
    if (negative_12195202) Tmp7 = true; else {      Tmp7 = !((spec_12195007.sign == 45));    }    var sign_12205008 = Tmp7;
    var to_fill_12205013 = subInt(subInt(subInt(spec_12195007.minimumWidth, (result_12195008 != null ? result_12195008.length : 0)), (xx_12195203 != null ? xx_12195203.length : 0)), (sign_12205008 ? 1:0));
    if ((0 < to_fill_12205013)) {
    result_12195008 = nimCopy(null, (nsuRepeatChar(48, chckRange(to_fill_12205013, 0, 2147483647)) || []).concat(result_12195008 || []), NTI1163014);
    }
    
    }
    
    if (negative_12195202) {
    result_12195008 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_12195203 || [],result_12195008 || []), NTI1163014);
    }
    else {
    if (!((spec_12195007.sign == 45))) {
    result_12195008 = nimCopy(null, [spec_12195007.sign].concat(xx_12195203 || [],result_12195008 || []), NTI1163014);
    }
    else {
      result_12195008 = nimCopy(null, (xx_12195203 || []).concat(result_12195008 || []), NTI1163014);
    }
    }
    if ((spec_12195007.align == 60)) {
    L8: do {
      var i_12205019 = 0;
      var colontmp__12470629 = 0;
      colontmp__12470629 = (result_12195008 != null ? result_12195008.length : 0);
      var i_12470630 = colontmp__12470629;
      L9: do {
          L10: while (true) {
          if (!(i_12470630 < spec_12195007.minimumWidth)) break L10;
            i_12205019 = i_12470630;
            if (result_12195008 != null) { addChar(result_12195008, spec_12195007.fill); } else { result_12195008 = [spec_12195007.fill]; };
            i_12470630 = addInt(i_12470630, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      var to_fill_12205020 = subInt(spec_12195007.minimumWidth, (result_12195008 != null ? result_12195008.length : 0));
      if ((spec_12195007.align == 94)) {
      var half_12205021 = divInt(to_fill_12205020, 2);
      result_12195008 = nimCopy(null, (nsuRepeatChar(spec_12195007.fill, chckRange(half_12205021, 0, 2147483647)) || []).concat(result_12195008 || [],nsuRepeatChar(spec_12195007.fill, chckRange(subInt(to_fill_12205020, half_12205021), 0, 2147483647)) || []), NTI1163014);
      }
      else {
        if ((0 < to_fill_12205020)) {
        result_12195008 = nimCopy(null, (nsuRepeatChar(spec_12195007.fill, chckRange(to_fill_12205020, 0, 2147483647)) || []).concat(result_12195008 || []), NTI1163014);
        }
        
      }
      
    }
    

  return result_12195008;

}
function format_value_12190001(result_12190004, result_12190004_Idx, value_12190005, specifier_12190006) {
  BeforeRet: do {
    if (((specifier_12190006 != null ? specifier_12190006.length : 0) == 0)) {
    if (result_12190004[result_12190004_Idx] != null) { result_12190004[result_12190004_Idx] = (result_12190004[result_12190004_Idx]).concat(cstrToNimstr((value_12190005)+"")); } else { result_12190004[result_12190004_Idx] = cstrToNimstr((value_12190005)+"").slice(); };
    break BeforeRet;
    }
    
    var spec_12190007 = parse_standard_format_specifier_11855322(specifier_12190006, 0, false);
    var radix_12190009 = 10;
    switch (spec_12190007.typ) {
    case 120:
    case 88:
      radix_12190009 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_12190009 = 2;
      break;
    case 111:
      radix_12190009 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_12190007.typ]), parent: null, m_type: NTI1169043, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (result_12190004[result_12190004_Idx] != null) { result_12190004[result_12190004_Idx] = (result_12190004[result_12190004_Idx]).concat(format_int_12195002(value_12190005, radix_12190009, spec_12190007)); } else { result_12190004[result_12190004_Idx] = format_int_12195002(value_12190005, radix_12190009, spec_12190007).slice(); };
  } while (false);

  
}
function render_12180731(x_12180733) {
  var result_12180734 = null;

    var r_12180735 = ((HEX2F_1490648(subInt(x_12180733, 21), 10))|0);
    var f_12180736 = modInt(subInt(x_12180733, 21), 10);
    var fmt_res_12180740 = [mnewString(0)];
    if (fmt_res_12180740[0] != null) { addChar(fmt_res_12180740[0], chckRange(addInt(f_12180736, 97), 0, 255)); } else { fmt_res_12180740[0] = [chckRange(addInt(f_12180736, 97), 0, 255)]; };
    format_value_12190001(fmt_res_12180740, 0, subInt(8, r_12180735), []);
    result_12180734 = nimCopy(null, fmt_res_12180740[0], NTI1163014);

  return result_12180734;

}
function starts_with_10600106(s_10600108, prefix_10600109) {
    var Tmp1;

  var result_10600110 = false;

    if (!(0 < (s_10600108 != null ? s_10600108.length : 0))) Tmp1 = false; else {      Tmp1 = (s_10600108[chckIndx(0, 0, (s_10600108 != null ? s_10600108.length : 0)+0-1)-0] == prefix_10600109);    }    result_10600110 = Tmp1;

  return result_10600110;

}
function isblack_12305029(pos_12305031) {
    var Tmp1;

  var result_12305032 = false;

    if (starts_with_10600106(pos_12305031.board, 10)) {
    Tmp1 = true;
    }
    else {
    Tmp1 = false;
    }
    
    result_12305032 = Tmp1;

  return result_12305032;

}
function isdead_12305183(s_12305185, mm_12305188) {
              var Tmp11;
              var Tmp12;

  var result_12305189 = false;

  BeforeRet: do {
    var check_12305190 = false;
    L1: do {
      var i_12305201 = 0;
      var res_12470674 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12470674 <= 119)) break L3;
            i_12305201 = res_12470674;
            L4: do {
              var p_12305202 = s_12305185.board[chckIndx(i_12305201, 0, (s_12305185.board != null ? s_12305185.board.length : 0)+0-1)-0];
              if (!(nsuIsUpperAsciiChar(p_12305202))) {
              break L4;
              }
              
              var a_12305203 = attacks_12260177(s_12305185, i_12305201);
              L5: do {
                var j_12305210 = 0;
                var i_12470671 = 0;
                var l_12470672 = (a_12305203 != null ? a_12305203.length : 0);
                L6: do {
                    L7: while (true) {
                    if (!(i_12470671 < l_12470672)) break L7;
                      j_12305210 = a_12305203[chckIndx(i_12470671, 0, (a_12305203 != null ? a_12305203.length : 0)+0-1)-0];
                      if ((s_12305185.board[chckIndx(j_12305210, 0, (s_12305185.board != null ? s_12305185.board.length : 0)+0-1)-0] == 107)) {
                      check_12305190 = true;
                      }
                      
                      i_12470671 = addInt(i_12470671, 1);
                      if (!(((a_12305203 != null ? a_12305203.length : 0) == l_12470672))) {
                      failed_assert_impl_1267680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while(false);
              } while(false);
            } while(false);
            res_12470674 = addInt(res_12470674, 1);
          }
      } while(false);
    } while(false);
    if (check_12305190) {
    result_12305189 = false;
    break BeforeRet;
    }
    
    L8: do {
      var m_12315214 = {Field0: 0, Field1: 0};
      var i_12470681 = 0;
      var l_12470682 = (mm_12305188 != null ? mm_12305188.length : 0);
      L9: do {
          L10: while (true) {
          if (!(i_12470681 < l_12470682)) break L10;
            nimCopy(m_12315214, mm_12305188[chckIndx(i_12470681, 0, (mm_12305188 != null ? mm_12305188.length : 0)+0-1)-0], NTI12305187);
            var q_12315215 = s_12305185.board[chckIndx(m_12315214["Field1"], 0, (s_12305185.board != null ? s_12305185.board.length : 0)+0-1)-0];
              if (!!((q_12315215 == 46))) Tmp12 = false; else {                Tmp12 = (0 < s_12305185.lastcap);              }              if (!Tmp12) Tmp11 = false; else {                Tmp11 = (m_12315214["Field1"] == s_12305185.lastcap);              }            if (Tmp11) {
            result_12305189 = false;
            break BeforeRet;
            }
            
            i_12470681 = addInt(i_12470681, 1);
            if (!(((mm_12305188 != null ? mm_12305188.length : 0) == l_12470682))) {
            failed_assert_impl_1267680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_12305189 = true;
    break BeforeRet;
  } while (false);

  return result_12305189;

}
function mirror_12305046(x_12305048) {
  var result_12305049 = null;

  BeforeRet: do {
    var f1_12305065 = chckRange(subInt(104, subInt(x_12305048[chckIndx(0, 0, (x_12305048 != null ? x_12305048.length : 0)+0-1)-0], 97)), 0, 255);
    var f2_12305081 = chckRange(subInt(104, subInt(x_12305048[chckIndx(2, 0, (x_12305048 != null ? x_12305048.length : 0)+0-1)-0], 97)), 0, 255);
    var r1_12305094 = chckRange(subInt(56, subInt(x_12305048[chckIndx(1, 0, (x_12305048 != null ? x_12305048.length : 0)+0-1)-0], 49)), 0, 255);
    var r2_12305107 = chckRange(subInt(56, subInt(x_12305048[chckIndx(3, 0, (x_12305048 != null ? x_12305048.length : 0)+0-1)-0], 49)), 0, 255);
    if (((x_12305048 != null ? x_12305048.length : 0) == 4)) {
    result_12305049 = nimCopy(null, [f1_12305065].concat([r1_12305094],[f2_12305081],[r2_12305107]), NTI1163014);
    break BeforeRet;
    }
    else {
      result_12305049 = nimCopy(null, [f1_12305065].concat([r1_12305094],[f2_12305081],[r2_12305107],[x_12305048[chckIndx(4, 0, (x_12305048 != null ? x_12305048.length : 0)+0-1)-0]]), NTI1163014);
      break BeforeRet;
    }
    
  } while (false);

  return result_12305049;

}
function mirrmv_12305121(pos_12305123, x_12305124) {
  var result_12305125 = null;

  BeforeRet: do {
    if (isblack_12305029(pos_12305123)) {
    result_12305125 = nimCopy(null, mirror_12305046(x_12305124), NTI1163014);
    break BeforeRet;
    }
    else {
      result_12305125 = nimCopy(null, x_12305124, NTI1163014);
      break BeforeRet;
    }
    
  } while (false);

  return result_12305125;

}
function searchmax_12350266(b_12350268, ply_12350269, alpha_12350270, beta_12350271, pv_12350272) {
      var Tmp1;

  var result_12350274 = {Field0: 0.0, Field1: null};

  BeforeRet: do {
    nodes_12180706[0] = addInt(nodes_12180706[0], 1);
    if ((qplies_12180704[0] <= ply_12350269)) {
    var colontmp__12470640 = b_12350268.score;
    var colontmp__12470641 = nimCopy(null, pv_12350272, NTI1163014);
    nimCopy(result_12350274, {Field0: colontmp__12470640, Field1: nimCopy(null, colontmp__12470641, NTI1163014)}, NTI12350273);
    break BeforeRet;
    }
    
    if (!(contains_12230004(b_12350268.board, 75))) {
    var colontmp__12470642 = -9.9990000000000000e+03;
    var colontmp__12470643 = nimCopy(null, pv_12350272, NTI1163014);
    nimCopy(result_12350274, {Field0: colontmp__12470642, Field1: nimCopy(null, colontmp__12470643, NTI1163014)}, NTI12350273);
    break BeforeRet;
    }
    
    if (!(contains_12230004(b_12350268.board, 107))) {
    var colontmp__12470644 = 9.9990000000000000e+03;
    var colontmp__12470645 = nimCopy(null, pv_12350272, NTI1163014);
    nimCopy(result_12350274, {Field0: colontmp__12470644, Field1: nimCopy(null, colontmp__12470645, NTI1163014)}, NTI12350273);
    break BeforeRet;
    }
    
    var moves_12365009 = order_12325014(b_12350268, ply_12350269, gen_moves_12270259(b_12350268, false));
      if (!(maxplies_12180702[0] < ply_12350269)) Tmp1 = false; else {        Tmp1 = isdead_12305183(b_12350268, moves_12365009);      }    if (Tmp1) {
    var colontmp__12470646 = b_12350268.score;
    var colontmp__12470647 = nimCopy(null, pv_12350272, NTI1163014);
    nimCopy(result_12350274, {Field0: colontmp__12470646, Field1: nimCopy(null, colontmp__12470647, NTI1163014)}, NTI12350273);
    break BeforeRet;
    }
    
    if ((maxplies_12180702[0] < ply_12350269)) {
    var mov2_12375003 = null;
    L2: do {
      var i_12375017 = 0;
      var colontmp__12470649 = 0;
      colontmp__12470649 = subInt((moves_12365009 != null ? moves_12365009.length : 0), 1);
      var res_12470650 = 0;
      L3: do {
          L4: while (true) {
          if (!(res_12470650 <= colontmp__12470649)) break L4;
            i_12375017 = res_12470650;
            if (!((b_12350268.board[chckIndx(moves_12365009[chckIndx(i_12375017, 0, (moves_12365009 != null ? moves_12365009.length : 0)+0-1)-0]["Field1"], 0, (b_12350268.board != null ? b_12350268.board.length : 0)+0-1)-0] == 46))) {
            if (mov2_12375003 != null) { mov2_12375003.push({Field0: moves_12365009[chckIndx(i_12375017, 0, (moves_12365009 != null ? moves_12365009.length : 0)+0-1)-0]["Field0"], Field1: moves_12365009[chckIndx(i_12375017, 0, (moves_12365009 != null ? moves_12365009.length : 0)+0-1)-0]["Field1"]}); } else { mov2_12375003 = [{Field0: moves_12365009[chckIndx(i_12375017, 0, (moves_12365009 != null ? moves_12365009.length : 0)+0-1)-0]["Field0"], Field1: moves_12365009[chckIndx(i_12375017, 0, (moves_12365009 != null ? moves_12365009.length : 0)+0-1)-0]["Field1"]}]; };
            }
            
            res_12470650 = addInt(res_12470650, 1);
          }
      } while(false);
    } while(false);
    moves_12365009 = nimCopy(null, mov2_12375003, NTI12375001);
    }
    
    if (((moves_12365009 != null ? moves_12365009.length : 0) == 0)) {
    var colontmp__12470655 = b_12350268.score;
    var colontmp__12470656 = nimCopy(null, pv_12350272, NTI1163014);
    nimCopy(result_12350274, {Field0: colontmp__12470655, Field1: nimCopy(null, colontmp__12470656, NTI1163014)}, NTI12350273);
    break BeforeRet;
    }
    
    var al_12380015 = alpha_12350270;
    var v_12380016 = nimCopy(null, pv_12350272, NTI1163014);
    L5: do {
      var i_12380030 = 0;
      var colontmp__12470660 = 0;
      colontmp__12470660 = subInt((moves_12365009 != null ? moves_12365009.length : 0), 1);
      var res_12470661 = 0;
      L6: do {
          L7: while (true) {
          if (!(res_12470661 <= colontmp__12470660)) break L7;
            i_12380030 = res_12470661;
            var c_12380031 = move_12300502(b_12350268, moves_12365009[chckIndx(i_12380030, 0, (moves_12365009 != null ? moves_12365009.length : 0)+0-1)-0]["Field0"], moves_12365009[chckIndx(i_12380030, 0, (moves_12365009 != null ? moves_12365009.length : 0)+0-1)-0]["Field1"]);
            var d_12380032 = rotate_12205221(c_12380031);
            var fr_12380033 = render_12180731(moves_12365009[chckIndx(i_12380030, 0, (moves_12365009 != null ? moves_12365009.length : 0)+0-1)-0]["Field0"]);
            var to_12380034 = render_12180731(moves_12365009[chckIndx(i_12380030, 0, (moves_12365009 != null ? moves_12365009.length : 0)+0-1)-0]["Field1"]);
            var colontmp__12470684 = searchmax_12350266(d_12380032, addInt(ply_12350269, 1), -(beta_12350271), -(al_12380015), (pv_12350272 || []).concat(makeNimstrLit(" ") || [],mirrmv_12305121(c_12380031, (fr_12380033 || []).concat(to_12380034 || [])) || []));
            var t_12380035 = colontmp__12470684["Field0"];
            var vv_12380036 = nimCopy(null, colontmp__12470684["Field1"], NTI1163014);
            t_12380035 = -(t_12380035);
            if ((beta_12350271 <= t_12380035)) {
            var colontmp__12470658 = beta_12350271;
            var colontmp__12470659 = nimCopy(null, vv_12380036, NTI1163014);
            nimCopy(result_12350274, {Field0: colontmp__12470658, Field1: nimCopy(null, colontmp__12470659, NTI1163014)}, NTI12350273);
            break BeforeRet;
            }
            
            if ((al_12380015 < t_12380035)) {
            al_12380015 = t_12380035;
            v_12380016 = nimCopy(null, vv_12380036, NTI1163014);
            }
            
            res_12470661 = addInt(res_12470661, 1);
          }
      } while(false);
    } while(false);
    var colontmp__12470666 = al_12380015;
    var colontmp__12470667 = nimCopy(null, v_12380016, NTI1163014);
    nimCopy(result_12350274, {Field0: colontmp__12470666, Field1: nimCopy(null, colontmp__12470667, NTI1163014)}, NTI12350273);
    break BeforeRet;
  } while (false);

  return result_12350274;

}
function defenders_12305139(pos_12305141, x_12305142) {
  var result_12305144 = null;

    var db_12305145 = {board: nimCopy(null, pos_12305141.board, NTI1163014), score: pos_12305141.score, wc_w: pos_12305141.wc_w, wc_e: pos_12305141.wc_e, bc_w: pos_12305141.bc_w, bc_e: pos_12305141.bc_e, ep: pos_12305141.ep, kp: pos_12305141.kp, lastcap: 0};
    db_12305145.board[chckIndx(x_12305142, 0, (db_12305145.board != null ? db_12305145.board.length : 0)+0-1)-0] = 112;
    var moves_12305146 = gen_moves_12270259(db_12305145, false);
    L1: do {
      var n_12305160 = 0;
      var colontmp__12470714 = 0;
      colontmp__12470714 = subInt((moves_12305146 != null ? moves_12305146.length : 0), 1);
      var res_12470715 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12470715 <= colontmp__12470714)) break L3;
            n_12305160 = res_12470715;
            var i_12305161 = moves_12305146[chckIndx(n_12305160, 0, (moves_12305146 != null ? moves_12305146.length : 0)+0-1)-0]["Field0"];
            var j_12305162 = moves_12305146[chckIndx(n_12305160, 0, (moves_12305146 != null ? moves_12305146.length : 0)+0-1)-0]["Field1"];
            if ((j_12305162 == x_12305142)) {
            if (result_12305144 != null) { result_12305144.push(i_12305161); } else { result_12305144 = [i_12305161]; };
            }
            
            res_12470715 = addInt(res_12470715, 1);
          }
      } while(false);
    } while(false);

  return result_12305144;

}
function HEX2DHEX3D_12415027(x_12415031, x_12415031_Idx, y_12415032) {
    x_12415031[x_12415031_Idx] = (x_12415031[x_12415031_Idx] - y_12415032);

  
}
function turing_12390030(s_12390032) {
              var Tmp11;

  var result_12390033 = [0.0];

    var bking_12390034 = false;
    L1: do {
      var i_12390045 = 0;
      var res_12470706 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12470706 <= 119)) break L3;
            i_12390045 = res_12470706;
            L4: do {
              var p_12390046 = s_12390032.board[chckIndx(i_12390045, 0, (s_12390032.board != null ? s_12390032.board.length : 0)+0-1)-0];
              var tt_12390047 = [0.0];
              if (!(nsuIsUpperAsciiChar(p_12390046))) {
              break L4;
              }
              
              var a_12390048 = attacks_12260177(s_12390032, i_12390045);
              L5: do {
                var j_12390055 = 0;
                var i_12470688 = 0;
                var l_12470689 = (a_12390048 != null ? a_12390048.length : 0);
                L6: do {
                    L7: while (true) {
                    if (!(i_12470688 < l_12470689)) break L7;
                      j_12390055 = a_12390048[chckIndx(i_12470688, 0, (a_12390048 != null ? a_12390048.length : 0)+0-1)-0];
                      if ((s_12390032.board[chckIndx(j_12390055, 0, (s_12390032.board != null ? s_12390032.board.length : 0)+0-1)-0] == 107)) {
                      bking_12390034 = true;
                      }
                      
                      i_12470688 = addInt(i_12470688, 1);
                      if (!(((a_12390048 != null ? a_12390048.length : 0) == l_12470689))) {
                      failed_assert_impl_1267680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while(false);
              } while(false);
              if (!((p_12390046 == 80))) {
              if ((0 < (a_12390048 != null ? a_12390048.length : 0))) {
              L8: do {
                var j_12400012 = 0;
                var i_12470692 = 0;
                var l_12470693 = (a_12390048 != null ? a_12390048.length : 0);
                L9: do {
                    L10: while (true) {
                    if (!(i_12470692 < l_12470693)) break L10;
                      j_12400012 = a_12390048[chckIndx(i_12470692, 0, (a_12390048 != null ? a_12390048.length : 0)+0-1)-0];
                      if ((s_12390032.board[chckIndx(j_12400012, 0, (s_12390032.board != null ? s_12390032.board.length : 0)+0-1)-0] == 46)) {
                      HEX2BHEX3D_10875021(tt_12390047, 0, 1.0000000000000000e+00);
                      }
                      else {
                      HEX2BHEX3D_10875021(tt_12390047, 0, 2.0000000000000000e+00);
                      }
                      
                      i_12470692 = addInt(i_12470692, 1);
                      if (!(((a_12390048 != null ? a_12390048.length : 0) == l_12470693))) {
                      failed_assert_impl_1267680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while(false);
              } while(false);
              }
              
              HEX2BHEX3D_10875021(result_12390033, 0, Math.sqrt(tt_12390047[0]));
              }
              
              if ((((p_12390046 == 82) || (p_12390046 == 66)) || (p_12390046 == 78))) {
              var ndef_12400039 = ((Tmp11 = defenders_12305139(s_12390032, i_12390045), Tmp11) != null ? Tmp11.length : 0);
              if ((0 < ndef_12400039)) {
              HEX2BHEX3D_10875021(result_12390033, 0, 1.0000000000000000e+00);
              }
              
              if ((1 < ndef_12400039)) {
              HEX2BHEX3D_10875021(result_12390033, 0, 5.0000000000000000e-01);
              }
              
              }
              
              if ((p_12390046 == 75)) {
              var ks_12410008 = {board: nimCopy(null, s_12390032.board, NTI1163014), score: s_12390032.score, wc_w: s_12390032.wc_w, wc_e: s_12390032.wc_e, bc_w: s_12390032.bc_w, bc_e: s_12390032.bc_e, ep: s_12390032.ep, kp: s_12390032.kp, lastcap: 0};
              tt_12390047[0] = 0.0;
              ks_12410008.board[chckIndx(i_12390045, 0, (ks_12410008.board != null ? ks_12410008.board.length : 0)+0-1)-0] = 81;
              var ka_12410009 = attacks_12260177(ks_12410008, i_12390045);
              if ((0 < (ka_12410009 != null ? ka_12410009.length : 0))) {
              L12: do {
                var j_12415012 = 0;
                var i_12470697 = 0;
                var l_12470698 = (ka_12410009 != null ? ka_12410009.length : 0);
                L13: do {
                    L14: while (true) {
                    if (!(i_12470697 < l_12470698)) break L14;
                      j_12415012 = ka_12410009[chckIndx(i_12470697, 0, (ka_12410009 != null ? ka_12410009.length : 0)+0-1)-0];
                      if ((s_12390032.board[chckIndx(j_12415012, 0, (s_12390032.board != null ? s_12390032.board.length : 0)+0-1)-0] == 46)) {
                      HEX2BHEX3D_10875021(tt_12390047, 0, 1.0000000000000000e+00);
                      }
                      else {
                      HEX2BHEX3D_10875021(tt_12390047, 0, 2.0000000000000000e+00);
                      }
                      
                      i_12470697 = addInt(i_12470697, 1);
                      if (!(((ka_12410009 != null ? ka_12410009.length : 0) == l_12470698))) {
                      failed_assert_impl_1267680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while(false);
              } while(false);
              }
              
              HEX2DHEX3D_12415027(result_12390033, 0, Math.sqrt(tt_12390047[0]));
              }
              
              if ((p_12390046 == 80)) {
              var rad_12415047 = (((6.0000000000000000e+00 - HEX2F_1490648(subInt(i_12390045, 21), 10)))|0);
              HEX2BHEX3D_10875021(result_12390033, 0, (2.0000000000000001e-01 * rad_12415047));
              var pdef_12415055 = defenders_12305139(s_12390032, i_12390045);
              var pawndef_12415056 = false;
              L15: do {
                var k_12415063 = 0;
                var i_12470703 = 0;
                var l_12470704 = (pdef_12415055 != null ? pdef_12415055.length : 0);
                L16: do {
                    L17: while (true) {
                    if (!(i_12470703 < l_12470704)) break L17;
                      k_12415063 = pdef_12415055[chckIndx(i_12470703, 0, (pdef_12415055 != null ? pdef_12415055.length : 0)+0-1)-0];
                      if (!((s_12390032.board[chckIndx(k_12415063, 0, (s_12390032.board != null ? s_12390032.board.length : 0)+0-1)-0] == 80))) {
                      pawndef_12415056 = true;
                      }
                      
                      i_12470703 = addInt(i_12470703, 1);
                      if (!(((pdef_12415055 != null ? pdef_12415055.length : 0) == l_12470704))) {
                      failed_assert_impl_1267680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while(false);
              } while(false);
              if (pawndef_12415056) {
              HEX2BHEX3D_10875021(result_12390033, 0, 2.9999999999999999e-01);
              }
              
              }
              
            } while(false);
            res_12470706 = addInt(res_12470706, 1);
          }
      } while(false);
    } while(false);
    if (bking_12390034) {
    HEX2BHEX3D_10875021(result_12390033, 0, 5.0000000000000000e-01);
    }
    

  return result_12390033[0];

}
function merge_12425080(a_12425085, b_12425088, lo_12425089, m_12425090, hi_12425091, cmp_12425095, order_12425096) {
  BeforeRet: do {
    if ((HEX2A_2161019(cmp_12425095(a_12425085[chckIndx(m_12425090, 0, (a_12425085 != null ? a_12425085.length : 0)+0-1)-0], a_12425085[chckIndx(addInt(m_12425090, 1), 0, (a_12425085 != null ? a_12425085.length : 0)+0-1)-0]), order_12425096) <= 0)) {
    break BeforeRet;
    }
    
    var j_12425097 = lo_12425089;
    if (!((j_12425097 <= m_12425090))) {
    failed_assert_impl_1267680(makeNimstrLit("algorithm.nim(346, 10) `j <= m` "));
    }
    
    var bb_12435402 = 0;
    L1: do {
        L2: while (true) {
        if (!(j_12425097 <= m_12425090)) break L2;
          nimCopy(b_12425088[chckIndx(bb_12435402, 0, (b_12425088 != null ? b_12425088.length : 0)+0-1)-0], a_12425085[chckIndx(j_12425097, 0, (a_12425085 != null ? a_12425085.length : 0)+0-1)-0], NTI12420037);
          bb_12435402 = addInt(bb_12435402, 1);
          j_12425097 = addInt(j_12425097, 1);
        }
    } while(false);
    var i_12435614 = 0;
    var k_12435615 = lo_12425089;
    L3: do {
        L4: while (true) {
        if (!((k_12435615 < j_12425097) && (j_12425097 <= hi_12425091))) break L4;
          if ((HEX2A_2161019(cmp_12425095(b_12425088[chckIndx(i_12435614, 0, (b_12425088 != null ? b_12425088.length : 0)+0-1)-0], a_12425085[chckIndx(j_12425097, 0, (a_12425085 != null ? a_12425085.length : 0)+0-1)-0]), order_12425096) <= 0)) {
          nimCopy(a_12425085[chckIndx(k_12435615, 0, (a_12425085 != null ? a_12425085.length : 0)+0-1)-0], b_12425088[chckIndx(i_12435614, 0, (b_12425088 != null ? b_12425088.length : 0)+0-1)-0], NTI12420037);
          i_12435614 = addInt(i_12435614, 1);
          }
          else {
            nimCopy(a_12425085[chckIndx(k_12435615, 0, (a_12425085 != null ? a_12425085.length : 0)+0-1)-0], a_12425085[chckIndx(j_12425097, 0, (a_12425085 != null ? a_12425085.length : 0)+0-1)-0], NTI12420037);
            j_12425097 = addInt(j_12425097, 1);
          }
          
          k_12435615 = addInt(k_12435615, 1);
        }
    } while(false);
    L5: do {
        L6: while (true) {
        if (!(k_12435615 < j_12425097)) break L6;
          nimCopy(a_12425085[chckIndx(k_12435615, 0, (a_12425085 != null ? a_12425085.length : 0)+0-1)-0], b_12425088[chckIndx(i_12435614, 0, (b_12425088 != null ? b_12425088.length : 0)+0-1)-0], NTI12420037);
          k_12435615 = addInt(k_12435615, 1);
          i_12435614 = addInt(i_12435614, 1);
        }
    } while(false);
  } while (false);

  
}
function sort_12425050(a_12425055, cmp_12425059, order_12425060) {
    var n_12425065 = (a_12425055 != null ? a_12425055.length : 0);
    var b_12425067 = null;
    b_12425067 = new Array(chckRange(divInt(n_12425065, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_12425065, 2), 0, 2147483647);++i) {b_12425067[i]={Field0: 0.0, Field1: null, Field2: null, Field3: 0, Field4: 0, Field5: null};}    var s_12425076 = 1;
    L1: do {
        L2: while (true) {
        if (!(s_12425076 < n_12425065)) break L2;
          var m_12425077 = subInt(subInt(n_12425065, 1), s_12425076);
          L3: do {
              L4: while (true) {
              if (!(0 <= m_12425077)) break L4;
                merge_12425080(a_12425055, b_12425067, nimMax(addInt(subInt(m_12425077, s_12425076), 1), 0), m_12425077, addInt(m_12425077, s_12425076), cmp_12425059, order_12425060);
                m_12425077 = subInt(m_12425077, mulInt(s_12425076, 2));
              }
          } while(false);
          s_12425076 = mulInt(s_12425076, 2);
        }
    } while(false);

  
}
function my_cmp_12425027(x_12425031, y_12425032) {
    var Tmp1;

  var result_12425033 = 0;

    if ((y_12425032["Field0"] < x_12425031["Field0"])) {
    Tmp1 = -1;
    }
    else {
    Tmp1 = 1;
    }
    
    result_12425033 = Tmp1;

  return result_12425033;

}
function nucruneLen(s_2456829) {
  var result_2456830 = 0;

    var i_2456832 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_2456832 < (s_2456829 != null ? s_2456829.length : 0))) break L2;
          if ((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] <= 127)) {
          i_2456832 = addInt(i_2456832, 1);
          }
          else {
          if ((((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          i_2456832 = addInt(i_2456832, 2);
          }
          else {
          if ((((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          i_2456832 = addInt(i_2456832, 3);
          }
          else {
          if ((((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          i_2456832 = addInt(i_2456832, 4);
          }
          else {
          if ((((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          i_2456832 = addInt(i_2456832, 5);
          }
          else {
          if ((((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          i_2456832 = addInt(i_2456832, 6);
          }
          else {
          i_2456832 = addInt(i_2456832, 1);
          }
          }}}}}
          result_2456830 = addInt(result_2456830, 1);
        }
    } while(false);

  return result_2456830;

}
function rune_len_at_2456931(s_2456933, i_2456934) {
  var result_2456935 = 0;

    if ((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] <= 127)) {
    result_2456935 = 1;
    }
    else {
    if ((((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    result_2456935 = 2;
    }
    else {
    if ((((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    result_2456935 = 3;
    }
    else {
    if ((((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    result_2456935 = 4;
    }
    else {
    if ((((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    result_2456935 = 5;
    }
    else {
    if ((((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    result_2456935 = 6;
    }
    else {
      result_2456935 = 1;
    }
    }}}}}

  return result_2456935;

}
function rune_offset_3080244(s_3080246, pos_3080247, start_3080248) {
  var result_3080249 = 0;

  BeforeRet: do {
    var i_3080251 = 0;
    var o_3080252 = start_3080248;
    L1: do {
        L2: while (true) {
        if (!(i_3080251 < pos_3080247)) break L2;
          o_3080252 = addInt(o_3080252, chckRange(rune_len_at_2456931(s_3080246, o_3080252), 0, 2147483647));
          if (((s_3080246 != null ? s_3080246.length : 0) <= o_3080252)) {
          result_3080249 = -1;
          break BeforeRet;
          }
          
          i_3080251 = addInt(i_3080251, 1);
        }
    } while(false);
    result_3080249 = o_3080252;
    break BeforeRet;
  } while (false);

  return result_3080249;

}
function validate_utf8_2700229(s_2700231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_2700232 = 0;

  BeforeRet: do {
    var i_2700234 = 0;
    var l_2700235 = (s_2700231 != null ? s_2700231.length : 0);
    L1: do {
        L2: while (true) {
        if (!(i_2700234 < l_2700235)) break L2;
          if ((s_2700231[chckIndx(i_2700234, 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] <= 127)) {
          i_2700234 = addInt(i_2700234, 1);
          }
          else {
          if ((((s_2700231[chckIndx(i_2700234, 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_2700231[chckIndx(i_2700234, 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] < 194)) {
          result_2700232 = i_2700234;
          break BeforeRet;
          }
          
            if (!(addInt(i_2700234, 1) < l_2700235)) Tmp3 = false; else {              Tmp3 = (((s_2700231[chckIndx(addInt(i_2700234, 1), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          i_2700234 = addInt(i_2700234, 2);
          }
          else {
            result_2700232 = i_2700234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2700231[chckIndx(i_2700234, 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_2700234, 2) < l_2700235)) Tmp5 = false; else {              Tmp5 = (((s_2700231[chckIndx(addInt(i_2700234, 1), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_2700231[chckIndx(addInt(i_2700234, 2), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          i_2700234 = addInt(i_2700234, 3);
          }
          else {
            result_2700232 = i_2700234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2700231[chckIndx(i_2700234, 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_2700234, 3) < l_2700235)) Tmp8 = false; else {              Tmp8 = (((s_2700231[chckIndx(addInt(i_2700234, 1), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_2700231[chckIndx(addInt(i_2700234, 2), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_2700231[chckIndx(addInt(i_2700234, 3), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          i_2700234 = addInt(i_2700234, 4);
          }
          else {
            result_2700232 = i_2700234;
            break BeforeRet;
          }
          
          }
          else {
            result_2700232 = i_2700234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    result_2700232 = -1;
    break BeforeRet;
  } while (false);

  return result_2700232;

}
function align_string_11855222(s_11855224, minimum_width_11855225, align_11855226, fill_11855227) {
      var Tmp1;

  var result_11855228 = null;

    if ((minimum_width_11855225 == 0)) {
    result_11855228 = nimCopy(null, s_11855224, NTI1163014);
    }
    else {
      if ((validate_utf8_2700229(s_11855224) == -1)) {
      Tmp1 = nucruneLen(s_11855224);
      }
      else {
      Tmp1 = (s_11855224 != null ? s_11855224.length : 0);
      }
      
      var s_rune_len_11855229 = Tmp1;
      var to_fill_11855230 = subInt(minimum_width_11855225, s_rune_len_11855229);
      if ((to_fill_11855230 <= 0)) {
      result_11855228 = nimCopy(null, s_11855224, NTI1163014);
      }
      else {
      if (((align_11855226 == 60) || (align_11855226 == 0))) {
      result_11855228 = nimCopy(null, (s_11855224 || []).concat(nsuRepeatChar(fill_11855227, chckRange(to_fill_11855230, 0, 2147483647)) || []), NTI1163014);
      }
      else {
      if ((align_11855226 == 94)) {
      var half_11855231 = divInt(to_fill_11855230, 2);
      result_11855228 = nimCopy(null, (nsuRepeatChar(fill_11855227, chckRange(half_11855231, 0, 2147483647)) || []).concat(s_11855224 || [],nsuRepeatChar(fill_11855227, chckRange(subInt(to_fill_11855230, half_11855231), 0, 2147483647)) || []), NTI1163014);
      }
      else {
        result_11855228 = nimCopy(null, (nsuRepeatChar(fill_11855227, chckRange(to_fill_11855230, 0, 2147483647)) || []).concat(s_11855224 || []), NTI1163014);
      }
      }}
    }
    

  return result_11855228;

}
function format_value_11900080(result_11900083, result_11900083_Idx, value_11900084, specifier_11900085) {
    var spec_11900086 = parse_standard_format_specifier_11855322(specifier_11900085, 0, false);
    var value_11900087 = nimCopy(null, value_11900084, NTI1163014);
    switch (spec_11900086.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_11900086.typ]), parent: null, m_type: NTI1169043, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_11900086.precision == -1))) {
    if ((spec_11900086.precision < nucruneLen(value_11900087))) {
    (value_11900087 == null ? value_11900087 = mnewString(chckRange(rune_offset_3080244(value_11900087, chckRange(spec_11900086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_11900087.length = chckRange(rune_offset_3080244(value_11900087, chckRange(spec_11900086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    if (result_11900083[result_11900083_Idx] != null) { result_11900083[result_11900083_Idx] = (result_11900083[result_11900083_Idx]).concat(align_string_11855222(value_11900087, spec_11900086.minimumWidth, spec_11900086.align, spec_11900086.fill)); } else { result_11900083[result_11900083_Idx] = align_string_11855222(value_11900087, spec_11900086.minimumWidth, spec_11900086.align, spec_11900086.fill).slice(); };

  
}
function getmove_12420028(b_12420030, output_12420031) {
  var result_12420032 = null;

    nodes_12180706[0] = 0;
    var start_12420033 = epoch_time_11845401();
    var moves_12420034 = order_12325014(b_12420030, 0, gen_moves_12270259(b_12420030, true));
    var tbest_12420035 = -1.0000000000000000e+06;
    var ll_12420038 = null;
    L1: do {
      var i_12420052 = 0;
      var colontmp__12470522 = 0;
      colontmp__12470522 = subInt((moves_12420034 != null ? moves_12420034.length : 0), 1);
      var res_12470523 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12470523 <= colontmp__12470522)) break L3;
            i_12420052 = res_12470523;
            var fr_12420053 = render_12180731(moves_12420034[chckIndx(i_12420052, 0, (moves_12420034 != null ? moves_12420034.length : 0)+0-1)-0]["Field0"]);
            var to_12420054 = render_12180731(moves_12420034[chckIndx(i_12420052, 0, (moves_12420034 != null ? moves_12420034.length : 0)+0-1)-0]["Field1"]);
            var castle_12420055 = [0.0];
            if (((b_12420030.board[chckIndx(moves_12420034[chckIndx(i_12420052, 0, (moves_12420034 != null ? moves_12420034.length : 0)+0-1)-0]["Field0"], 0, (b_12420030.board != null ? b_12420030.board.length : 0)+0-1)-0] == 75) && (absInt(subInt(moves_12420034[chckIndx(i_12420052, 0, (moves_12420034 != null ? moves_12420034.length : 0)+0-1)-0]["Field0"], moves_12420034[chckIndx(i_12420052, 0, (moves_12420034 != null ? moves_12420034.length : 0)+0-1)-0]["Field1"])) == 2))) {
            HEX2BHEX3D_10875021(castle_12420055, 0, 1.0000000000000000e+00);
            }
            
            var c_12420063 = move_12300502(b_12420030, moves_12420034[chckIndx(i_12420052, 0, (moves_12420034 != null ? moves_12420034.length : 0)+0-1)-0]["Field0"], moves_12420034[chckIndx(i_12420052, 0, (moves_12420034 != null ? moves_12420034.length : 0)+0-1)-0]["Field1"]);
            if (isblack_12305029(c_12420063)) {
            if ((c_12420063.bc_w || c_12420063.bc_e)) {
            HEX2BHEX3D_10875021(castle_12420055, 0, 1.0000000000000000e+00);
            }
            
            }
            else {
              if ((c_12420063.wc_w || c_12420063.wc_e)) {
              HEX2BHEX3D_10875021(castle_12420055, 0, 1.0000000000000000e+00);
              }
              
            }
            
            var d_12420078 = rotate_12205221(c_12420063);
            var colontmp__12470639 = searchmax_12350266(d_12420078, 2, -1.0000000000000000e+06, -(tbest_12420035), mirrmv_12305121(c_12420063, (fr_12420053 || []).concat(to_12420054 || [])));
            var t_12420079 = colontmp__12470639["Field0"];
            var pv_12420080 = nimCopy(null, colontmp__12470639["Field1"], NTI1163014);
            t_12420079 = -(t_12420079);
            if ((tbest_12420035 < t_12420079)) {
            tbest_12420035 = (t_12420079 - 1.0000000000000001e-01);
            }
            
            if (output_12420031) {
            rawEcho(fr_12420053, to_12420054, makeNimstrLit(" "), cstrToNimstr((t_12420079)+""), makeNimstrLit(" "), cstrToNimstr((turing_12390030(c_12420063))+""), makeNimstrLit(" "), pv_12420080);
            }
            
            if (ll_12420038 != null) { ll_12420038.push({Field0: (t_12420079 + ((turing_12390030(c_12420063) + castle_12420055[0]) / 1.0000000000000000e+03)), Field1: nimCopy(null, fr_12420053, NTI1163014), Field2: nimCopy(null, to_12420054, NTI1163014), Field3: moves_12420034[chckIndx(i_12420052, 0, (moves_12420034 != null ? moves_12420034.length : 0)+0-1)-0]["Field0"], Field4: moves_12420034[chckIndx(i_12420052, 0, (moves_12420034 != null ? moves_12420034.length : 0)+0-1)-0]["Field1"], Field5: nimCopy(null, pv_12420080, NTI1163014)}); } else { ll_12420038 = [{Field0: (t_12420079 + ((turing_12390030(c_12420063) + castle_12420055[0]) / 1.0000000000000000e+03)), Field1: nimCopy(null, fr_12420053, NTI1163014), Field2: nimCopy(null, to_12420054, NTI1163014), Field3: moves_12420034[chckIndx(i_12420052, 0, (moves_12420034 != null ? moves_12420034.length : 0)+0-1)-0]["Field0"], Field4: moves_12420034[chckIndx(i_12420052, 0, (moves_12420034 != null ? moves_12420034.length : 0)+0-1)-0]["Field1"], Field5: nimCopy(null, pv_12420080, NTI1163014)}]; };
            res_12470523 = addInt(res_12470523, 1);
          }
      } while(false);
    } while(false);
    sort_12425050(ll_12420038, my_cmp_12425027, 1);
    var diff_12436487 = (epoch_time_11845401() - start_12420033);
    var nps_12436488 = (((nodes_12180706[0] / diff_12436487))|0);
    var fmt_res_12436489 = [mnewString(0)];
    if (fmt_res_12436489[0] != null) { fmt_res_12436489[0] = (fmt_res_12436489[0]).concat(makeNimstrLit("info depth ")); } else { fmt_res_12436489[0] = makeNimstrLit("info depth "); };
    format_value_12190001(fmt_res_12436489, 0, maxplies_12180702[0], []);
    if (fmt_res_12436489[0] != null) { fmt_res_12436489[0] = (fmt_res_12436489[0]).concat(makeNimstrLit(" seldepth ")); } else { fmt_res_12436489[0] = makeNimstrLit(" seldepth "); };
    format_value_12190001(fmt_res_12436489, 0, qplies_12180704[0], []);
    if (fmt_res_12436489[0] != null) { fmt_res_12436489[0] = (fmt_res_12436489[0]).concat(makeNimstrLit(" score cp ")); } else { fmt_res_12436489[0] = makeNimstrLit(" score cp "); };
    format_value_12190001(fmt_res_12436489, 0, (((1.0000000000000000e+02 * ll_12420038[chckIndx(0, 0, (ll_12420038 != null ? ll_12420038.length : 0)+0-1)-0]["Field0"]))|0), []);
    if (fmt_res_12436489[0] != null) { fmt_res_12436489[0] = (fmt_res_12436489[0]).concat(makeNimstrLit(" time ")); } else { fmt_res_12436489[0] = makeNimstrLit(" time "); };
    format_value_12190001(fmt_res_12436489, 0, (((1.0000000000000000e+03 * diff_12436487))|0), []);
    if (fmt_res_12436489[0] != null) { fmt_res_12436489[0] = (fmt_res_12436489[0]).concat(makeNimstrLit(" nodes ")); } else { fmt_res_12436489[0] = makeNimstrLit(" nodes "); };
    format_value_12190001(fmt_res_12436489, 0, nodes_12180706[0], []);
    if (fmt_res_12436489[0] != null) { fmt_res_12436489[0] = (fmt_res_12436489[0]).concat(makeNimstrLit(" nps ")); } else { fmt_res_12436489[0] = makeNimstrLit(" nps "); };
    format_value_12190001(fmt_res_12436489, 0, nps_12436488, []);
    if (fmt_res_12436489[0] != null) { fmt_res_12436489[0] = (fmt_res_12436489[0]).concat(makeNimstrLit(" pv ")); } else { fmt_res_12436489[0] = makeNimstrLit(" pv "); };
    format_value_11900080(fmt_res_12436489, 0, ll_12420038[chckIndx(0, 0, (ll_12420038 != null ? ll_12420038.length : 0)+0-1)-0]["Field5"], []);
    rawEcho(fmt_res_12436489[0]);
    result_12420032 = nimCopy(null, (ll_12420038[chckIndx(0, 0, (ll_12420038 != null ? ll_12420038.length : 0)+0-1)-0]["Field1"] || []).concat(ll_12420038[chckIndx(0, 0, (ll_12420038 != null ? ll_12420038.length : 0)+0-1)-0]["Field2"] || []), NTI1163014);
    if ((((b_12420030.board[chckIndx(ll_12420038[chckIndx(0, 0, (ll_12420038 != null ? ll_12420038.length : 0)+0-1)-0]["Field3"], 0, (b_12420030.board != null ? b_12420030.board.length : 0)+0-1)-0] == 80) && (21 <= ll_12420038[chckIndx(0, 0, (ll_12420038 != null ? ll_12420038.length : 0)+0-1)-0]["Field4"])) && (ll_12420038[chckIndx(0, 0, (ll_12420038 != null ? ll_12420038.length : 0)+0-1)-0]["Field4"] <= 28))) {
    result_12420032 = nimCopy(null, (result_12420032 || []).concat(makeNimstrLit("q") || []), NTI1163014);
    }
    

  return result_12420032;

}
function fen_to_move_12441014(fen_12441016) {
    function getgame_fen_12441020(x_12441022) {
          var Tmp1;

      var result_12441023 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

      BeforeRet: do {
        var inv_12441024 = false;
        var l_12441025 = nimCopy(null, x_12441022, NTI1163014);
        var ff_12441432 = HEX5BHEX5D_12441049(nsuSplitString(l_12441025, makeNimstrLit(" "), -1), HEX2EHEX2E_3335220(2, 7));
        var ff2_12441433 = nsuJoinSep(ff_12441432, makeNimstrLit(" "));
        var b_12441434 = fromfen_12220017(ff2_12441433);
        if (contains_10760277(ff2_12441433, makeNimstrLit(" w "))) {
        side_12441019 = true;
        inv_12441024 = false;
        }
        else {
          side_12441019 = false;
          inv_12441024 = true;
        }
        
        if ((8 < ((Tmp1 = nsuSplitString(l_12441025, makeNimstrLit(" "), -1), Tmp1) != null ? Tmp1.length : 0))) {
        var mm_12460436 = HEX5BHEX5D_12460022(nsuSplitString(l_12441025, makeNimstrLit(" "), -1), HEX2EHEX2E_5785001(9, 1));
        L2: do {
          var i_12470214 = null;
          var i_12470341 = 0;
          var l_12470342 = (mm_12460436 != null ? mm_12460436.length : 0);
          L3: do {
              L4: while (true) {
              if (!(i_12470341 < l_12470342)) break L4;
                i_12470214 = mm_12460436[chckIndx(i_12470341, 0, (mm_12460436 != null ? mm_12460436.length : 0)+0-1)-0];
                var fr_12470252 = parse_12205062(HEX5BHEX5D_3335283(i_12470214, HEX2EHEX2E_3335220(0, 1)), inv_12441024);
                var to_12470290 = parse_12205062(HEX5BHEX5D_3335283(i_12470214, HEX2EHEX2E_3335220(2, 3)), inv_12441024);
                var c_12470291 = move_12300502(b_12441434, fr_12470252, to_12470290);
                side_12441019 = !(side_12441019);
                var d_12470292 = rotate_12205221(c_12470291);
                nimCopy(b_12441434, d_12470292, NTI12180708);
                inv_12441024 = !(inv_12441024);
                i_12470341 = addInt(i_12470341, 1);
                if (!(((mm_12460436 != null ? mm_12460436.length : 0) == l_12470342))) {
                failed_assert_impl_1267680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        }
        
        nimCopy(result_12441023, b_12441434, NTI12180708);
        break BeforeRet;
      } while (false);

      return result_12441023;

    }

  var result_12441017 = null;

  BeforeRet: do {
    var b_12441018 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};
    var side_12441019 = true;
    nimCopy(b_12441018, getgame_fen_12441020((makeNimstrLit("position fen ") || []).concat(fen_12441016 || [])), NTI12180708);
    var m_12470306 = getmove_12420028(b_12441018, false);
    if (!(side_12441019)) {
    m_12470306 = nimCopy(null, mirror_12305046(m_12470306), NTI1163014);
    }
    
    result_12441017 = nimCopy(null, m_12470306, NTI1163014);
    break BeforeRet;
  } while (false);

  return result_12441017;

}


/* web worker code */

self.addEventListener('message', function(e) {
	self.postMessage(toJSStr(fen_to_move_12441014(makeNimstrLit(e.data))));
}, false);


