/* Generated by the Nim Compiler v1.0.6 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI246141 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI245871 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI245870 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI243642 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI243185 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI245843 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI231048 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI231044 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI47430 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47452 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47454 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI150432 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI153247 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI44032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI44026 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI239926 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI47444 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI106907 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI201616 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI47450 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47458 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47462 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47514 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI44016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI44042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI47508 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI47426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47428 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI47446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47446.node = NNI47446;
var NNI47442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47442.node = NNI47442;
var NNI47428 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47428.node = NNI47428;
NTI47508.base = NTI47426;
NTI47514.base = NTI47426;
var NNI47426 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI47508, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI44042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI44040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI44040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI44016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI47514, name: "up", sons: null}]};
NTI47426.node = NNI47426;
var NNI47408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47408.node = NNI47408;
NTI47426.base = NTI47408;
NTI47428.base = NTI47426;
NTI47442.base = NTI47428;
NTI47446.base = NTI47442;
var NNI47462 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47462.node = NNI47462;
NTI47462.base = NTI47428;
var NNI47458 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47458.node = NNI47458;
NTI47458.base = NTI47428;
var NNI47450 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47450.node = NNI47450;
NTI47450.base = NTI47428;
NTI201616.base = NTI44040;
var NNI106907 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI44006, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI44006, name: "b", sons: null}]};
NTI106907.node = NNI106907;
var NNI47444 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47444.node = NNI47444;
NTI47444.base = NTI47442;
var NNI239926 = {kind: 2, len: 9, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "board", len: 0, typ: NTI44040, name: "board", sons: null}, 
{kind: 1, offset: "score", len: 0, typ: NTI44026, name: "score", sons: null}, 
{kind: 1, offset: "wc_w", len: 0, typ: NTI44032, name: "wc_w", sons: null}, 
{kind: 1, offset: "wc_e", len: 0, typ: NTI44032, name: "wc_e", sons: null}, 
{kind: 1, offset: "bc_w", len: 0, typ: NTI44032, name: "bc_w", sons: null}, 
{kind: 1, offset: "bc_e", len: 0, typ: NTI44032, name: "bc_e", sons: null}, 
{kind: 1, offset: "ep", len: 0, typ: NTI44006, name: "ep", sons: null}, 
{kind: 1, offset: "kp", len: 0, typ: NTI44006, name: "kp", sons: null}, 
{kind: 1, offset: "lastcap", len: 0, typ: NTI44006, name: "lastcap", sons: null}]};
NTI239926.node = NNI239926;
var NNI153247 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI150432, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI44006, name: "b", sons: null}]};
NTI153247.node = NNI153247;
var NNI47454 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47454.node = NNI47454;
var NNI47452 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47452.node = NNI47452;
var NNI47430 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47430.node = NNI47430;
NTI47430.base = NTI47426;
NTI47452.base = NTI47430;
NTI47454.base = NTI47452;
NTI231044.base = NTI231048;
var NNI245843 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44026, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI44040, name: "Field1", sons: null}]};
NTI245843.node = NNI245843;
var NNI243185 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI44006, name: "Field1", sons: null}]};
NTI243185.node = NNI243185;
var NNI243642 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44026, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI44006, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI44006, name: "Field2", sons: null}]};
NTI243642.node = NNI243642;
var NNI245871 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI44006, name: "Field1", sons: null}]};
NTI245871.node = NNI245871;
NTI245870.base = NTI245871;
var NNI246141 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44026, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI44040, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI44040, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI44006, name: "Field3", sons: null}, 
{kind: 1, offset: "Field4", len: 0, typ: NTI44006, name: "Field4", sons: null}, 
{kind: 1, offset: "Field5", len: 0, typ: NTI44040, name: "Field5", sons: null}]};
NTI246141.node = NNI246141;

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_68827, src_68828, ti_68829) {
	var result_69019 = null;

		switch (ti_68829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_68801(ti_68829))) {
			result_69019 = src_68828;
			}
			else {
				result_69019 = [src_68828[0], src_68828[1]];
			}
			
			break;
		case 19:
			      if (dest_68827 === null || dest_68827 === undefined) {
        dest_68827 = {};
      }
      else {
        for (var key in dest_68827) { delete dest_68827[key]; }
      }
      for (var key in src_68828) { dest_68827[key] = src_68828[key]; }
      result_69019 = dest_68827;
    
			break;
		case 18:
		case 17:
			if (!((ti_68829.base == null))) {
			result_69019 = nimCopy(dest_68827, src_68828, ti_68829.base);
			}
			else {
			if ((ti_68829.kind == 17)) {
			result_69019 = (dest_68827 === null || dest_68827 === undefined) ? {m_type: ti_68829} : dest_68827;
			}
			else {
				result_69019 = (dest_68827 === null || dest_68827 === undefined) ? {} : dest_68827;
			}
			}
			nimCopyAux(result_69019, src_68828, ti_68829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_68828 === null) {
        result_69019 = null;
      }
      else {
        if (dest_68827 === null || dest_68827 === undefined) {
          dest_68827 = new Array(src_68828.length);
        }
        else {
          dest_68827.length = src_68828.length;
        }
        result_69019 = dest_68827;
        for (var i = 0; i < src_68828.length; ++i) {
          result_69019[i] = nimCopy(result_69019[i], src_68828[i], ti_68829.base);
        }
      }
    
			break;
		case 28:
			      if (src_68828 !== null) {
        result_69019 = src_68828.slice(0);
      }
    
			break;
		default: 
			result_69019 = src_68828;
			break;
		}

	return result_69019;

}

function makeNimstrLit(c_67270) {
		  var ln = c_67270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_67270.charCodeAt(i);
  }
  return result;
  

	
}

function toJSStr(s_67304) {
										var Tmp5;
						var Tmp7;

	var result_67305 = null;

		var res_67363 = new_seq_67336((s_67304 != null ? s_67304.length : 0));
		var i_67365 = 0;
		var j_67367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_67365 < (s_67304 != null ? s_67304.length : 0))) break L2;
					var c_67368 = s_67304[i_67365];
					if ((c_67368 < 128)) {
					res_67363[j_67367] = String.fromCharCode(c_67368);
					i_67365 += 1;
					}
					else {
						var helper_67391 = new_seq_67336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_67392 = c_67368.toString(16);
									if (((code_67392 != null ? code_67392.length : 0) == 1)) {
									if (helper_67391 != null) { helper_67391.push("%0"); } else { helper_67391 = ["%0"]; };
									}
									else {
									if (helper_67391 != null) { helper_67391.push("%"); } else { helper_67391 = ["%"]; };
									}
									
									if (helper_67391 != null) { helper_67391.push(code_67392); } else { helper_67391 = [code_67392]; };
									i_67365 += 1;
										if (((s_67304 != null ? s_67304.length : 0) <= i_67365)) Tmp5 = true; else {											Tmp5 = (s_67304[i_67365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_67368 = s_67304[i_67365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_67363[j_67367] = decodeURIComponent(helper_67391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_67363[j_67367] = helper_67391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_67367 += 1;
				}
		} while(false);
		if (res_67363 === null) res_67363 = [];
               if (res_67363.length < j_67367) { for (var i=res_67363.length;i<j_67367;++i) res_67363.push(null); }
               else { res_67363.length = j_67367; };
		result_67305 = res_67363.join("");

	return result_67305;

}

function raiseException(e_65618, ename_65619) {
		e_65618.name = ename_65619;
		if ((excHandler == 0)) {
		unhandledException(e_65618);
		}
		
		throw e_65618;

	
}

function addInt(a_67803, b_67804) {
		    var result = a_67803 + b_67804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function subInt(a_67821, b_67822) {
		    var result = a_67821 - b_67822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckRange(i_69124, a_69125, b_69126) {
			var Tmp1;

	var result_69127 = 0;

	BeforeRet: do {
			if (!(a_69125 <= i_69124)) Tmp1 = false; else {				Tmp1 = (i_69124 <= b_69126);			}		if (Tmp1) {
		result_69127 = i_69124;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_69127;

}

function cstrToNimstr(c_67287) {
		  var ln = c_67287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_67287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_67287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function chckIndx(i_69105, a_69106, b_69107) {
			var Tmp1;

	var result_69108 = 0;

	BeforeRet: do {
			if (!(a_69106 <= i_69105)) Tmp1 = false; else {				Tmp1 = (i_69105 <= b_69107);			}		if (Tmp1) {
		result_69108 = i_69105;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_69105, a_69106, b_69107);
		}
		
	} while (false);

	return result_69108;

}

function nimMax(a_68221, b_68222) {
		var Tmp1;

	var result_68223 = 0;

	BeforeRet: do {
		if ((b_68222 <= a_68221)) {
		Tmp1 = a_68221;
		}
		else {
		Tmp1 = b_68222;
		}
		
		result_68223 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_68223;

}

function nimMin(a_68203, b_68204) {
		var Tmp1;

	var result_68205 = 0;

	BeforeRet: do {
		if ((a_68203 <= b_68204)) {
		Tmp1 = a_68203;
		}
		else {
		Tmp1 = b_68204;
		}
		
		result_68205 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_68205;

}

function mnewString(len_67463) {
		    return new Array(len_67463);
  

	
}

function mulInt(a_67839, b_67840) {
		    var result = a_67839 * b_67840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function eqStrings(a_67641, b_67642) {
		    if (a_67641 == b_67642) return true;
    if (a_67641 === null && b_67642.length == 0) return true;
    if (b_67642 === null && a_67641.length == 0) return true;
    if ((!a_67641) || (!b_67642)) return false;
    var alen = a_67641.length;
    if (alen != b_67642.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_67641[i] != b_67642[i]) return false;
    return true;
  

	
}

function divInt(a_67857, b_67858) {
		    if (b_67858 == 0) raiseDivByZero();
    if (b_67858 == -1 && a_67857 == 2147483647) raiseOverflow();
    return Math.trunc(a_67857 / b_67858);
  

	
}
				var to_lower_ranges_126892 = [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534];
				var to_lower_singlets_128162 = [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884];
				var to_upper_ranges_128310 = [97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466];
				var to_upper_singlets_129586 = [181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428];
var ConstSet2 = setConstr([97, 122]);

function nimCharToStr(x_65062) {
	var result_65063 = null;

		result_65063 = nimCopy(null, mnewString(1), NTI44040);
		result_65063[0] = x_65062;

	return result_65063;

}
var ConstSet3 = setConstr([97, 122]);

function absInt(a_68019) {
		var Tmp1;

	var result_68020 = 0;

		if ((a_68019 < 0)) {
		Tmp1 = (a_68019 * -1);
		}
		else {
		Tmp1 = a_68019;
		}
		
		result_68020 = Tmp1;

	return result_68020;

}
var ConstSet4 = setConstr([65, 90]);
var ConstSet5 = setConstr(32, 9, 11, 13, 10, 12);

function modInt(a_67875, b_67876) {
		    if (b_67876 == 0) raiseDivByZero();
    if (b_67876 == -1 && a_67875 == 2147483647) raiseOverflow();
    return Math.trunc(a_67875 % b_67876);
  

	
}

function addChar(x_69311, c_69312) {
		x_69311.push(c_69312);

	
}
var ConstSet6 = setConstr(60, 62, 94);
var ConstSet7 = setConstr(60, 62, 94);
var ConstSet8 = setConstr(45, 43, 32);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([48, 57]);
var ConstSet11 = setConstr([48, 57]);
var ConstSet12 = setConstr([65, 90], [97, 122]);

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}
var nim_program_result = 0;
var global_raise_hook_62618 = [null];
var local_raise_hook_62623 = [null];
var out_of_mem_hook_62626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_87237 = [0];
var utc_instance_221031 = [null];
var local_instance_221032 = [null];
var maxplies_239920 = [2];
var qplies_239922 = [8];
var nodes_239924 = [0];

function is_fat_pointer_68801(ti_68803) {
	var result_68804 = false;

	BeforeRet: do {
		result_68804 = !((ConstSet1[ti_68803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_68804;

}

function nimCopyAux(dest_68832, src_68833, n_68835) {
		switch (n_68835.kind) {
		case 0:
			break;
		case 1:
			      dest_68832[n_68835.offset] = nimCopy(dest_68832[n_68835.offset], src_68833[n_68835.offset], n_68835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_68835.sons.length; i++) {
      nimCopyAux(dest_68832, src_68833, n_68835.sons[i]);
    }
    
			break;
		case 3:
			      dest_68832[n_68835.offset] = nimCopy(dest_68832[n_68835.offset], src_68833[n_68835.offset], n_68835.typ);
      for (var i = 0; i < n_68835.sons.length; ++i) {
        nimCopyAux(dest_68832, src_68833, n_68835.sons[i][1]);
      }
    
			break;
		}

	
}

function add_62638(x_62641, x_62641_Idx, y_62642) {
		      if (x_62641[x_62641_Idx] === null) { x_62641[x_62641_Idx] = []; }
      var off = x_62641[x_62641_Idx].length;
      x_62641[x_62641_Idx].length += y_62642.length;
      for (var i = 0; i < y_62642.length; ++i) {
        x_62641[x_62641_Idx][off+i] = y_62642.charCodeAt(i);
      }
    

	
}

function new_seq_67336(len_67339) {
	var result_67341 = null;

		result_67341 = new Array(len_67339); for (var i=0;i<len_67339;++i) {result_67341[i]=null;}
	return result_67341;

}

function unhandledException(e_65529) {
		var buf_65530 = [[]];
		if (!(((e_65529.message != null ? e_65529.message.length : 0) == 0))) {
		if (buf_65530[0] != null) { buf_65530[0] = (buf_65530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_65530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_65530[0] != null) { buf_65530[0] = (buf_65530[0]).concat(e_65529.message); } else { buf_65530[0] = e_65529.message.slice(); };
		}
		else {
		if (buf_65530[0] != null) { buf_65530[0] = (buf_65530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_65530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_65530[0] != null) { buf_65530[0] = (buf_65530[0]).concat(makeNimstrLit(" [")); } else { buf_65530[0] = makeNimstrLit(" ["); };
		add_62638(buf_65530, 0, e_65529.name);
		if (buf_65530[0] != null) { buf_65530[0] = (buf_65530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_65530[0] = makeNimstrLit("]\x0A"); };
		var cbuf_65601 = toJSStr(buf_65530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_65601);
  }
  else {
    throw cbuf_65601;
  }
  

	
}

function raiseOverflow() {
		var eHEX60gensym66058_66203 = null;
		eHEX60gensym66058_66203 = {m_type: NTI47446, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym66058_66203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI44040);
		eHEX60gensym66058_66203.parent = null;
		raiseException(eHEX60gensym66058_66203, "OverflowError");

	
}

function raiseRangeError() {
		var eHEX60gensym66457_66603 = null;
		eHEX60gensym66457_66603 = {m_type: NTI47462, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym66457_66603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI44040);
		eHEX60gensym66457_66603.parent = null;
		raiseException(eHEX60gensym66457_66603, "RangeError");

	
}

function raiseIndexError(i_66655, a_66656, b_66657) {
		var Tmp1;

		var eHEX60gensym66802_67003 = null;
		eHEX60gensym66802_67003 = {m_type: NTI47458, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_66657 < a_66656)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_66655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_66656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_66657)+"") || []);
		}
		
		eHEX60gensym66802_67003.message = nimCopy(null, Tmp1, NTI44040);
		eHEX60gensym66802_67003.parent = null;
		raiseException(eHEX60gensym66802_67003, "IndexError");

	
}

function HEX5BHEX5D_248047(s_248053, x_248055) {
	var result_248057 = null;

		var a_248201 = x_248055.a;
		var l_248401 = addInt(subInt(x_248055.b, a_248201), 1);
		result_248057 = new Array(chckRange(l_248401, 0, 2147483647)); for (var i=0;i<chckRange(l_248401, 0, 2147483647);++i) {result_248057[i]=null;}		L1: do {
			var i_248416 = 0;
			var i_249142 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_249142 < l_248401)) break L3;
						i_248416 = i_249142;
						result_248057[chckIndx(i_248416, 0, (result_248057 != null ? result_248057.length : 0)+0-1)-0] = nimCopy(null, s_248053[chckIndx(addInt(i_248416, a_248201), 0, (s_248053 != null ? s_248053.length : 0)+0-1)-0], NTI44040);
						i_249142 = addInt(i_249142, 1);
					}
			} while(false);
		} while(false);

	return result_248057;

}

function sys_fatal_58862(message_58866) {
		var e_59003 = null;
		e_59003 = {m_type: NTI47450, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_59003.message = nimCopy(null, message_58866, NTI44040);
		raiseException(e_59003, "AssertionError");

	
}

function raise_assert_58858(msg_58860) {
		sys_fatal_58862(msg_58860);

	
}

function failed_assert_impl_59066(msg_59068) {
		raise_assert_58858(msg_59068);

	
}

function substr_eq_200704(s_200706, pos_200707, substr_200708) {
	var result_200709 = false;

	BeforeRet: do {
		var i_200711 = 0;
		var length_200712 = (substr_200708 != null ? substr_200708.length : 0);
		L1: do {
				L2: while (true) {
				if (!(((i_200711 < length_200712) && (addInt(pos_200707, i_200711) < (s_200706 != null ? s_200706.length : 0))) && (s_200706[chckIndx(addInt(pos_200707, i_200711), 0, (s_200706 != null ? s_200706.length : 0)+0-1)-0] == substr_200708[chckIndx(i_200711, 0, (substr_200708 != null ? substr_200708.length : 0)+0-1)-0]))) break L2;
					i_200711 = addInt(i_200711, 1);
				}
		} while(false);
		result_200709 = (i_200711 == length_200712);
		break BeforeRet;
	} while (false);

	return result_200709;

}

function substr_74422(s_74424, first_74425, last_74426) {
	var result_74427 = null;

		var first_74428 = nimMax(first_74425, 0);
		var l_74430 = nimMax(addInt(subInt(nimMin(last_74426, (s_74424 != null ? (s_74424.length-1) : -1)), first_74428), 1), 0);
		result_74427 = nimCopy(null, mnewString(chckRange(l_74430, 0, 2147483647)), NTI44040);
		L1: do {
			var i_74439 = 0;
			var colontmp__249167 = 0;
			colontmp__249167 = subInt(l_74430, 1);
			var res_249168 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_249168 <= colontmp__249167)) break L3;
						i_74439 = res_249168;
						result_74427[chckIndx(i_74439, 0, (result_74427 != null ? result_74427.length : 0)+0-1)-0] = s_74424[chckIndx(addInt(i_74439, first_74428), 0, (s_74424 != null ? s_74424.length : 0)+0-1)-0];
						res_249168 = addInt(res_249168, 1);
					}
			} while(false);
		} while(false);

	return result_74427;

}

function nsuSplitString(s_201546, sep_201547, maxsplit_201549) {
	var result_201551 = null;

		if (!((0 < (sep_201547 != null ? sep_201547.length : 0)))) {
		failed_assert_impl_59066(makeNimstrLit("strutils.nim(769, 11) `sep.len > 0` "));
		}
		
		result_201551 = nimCopy(null, [], NTI201616);
		L1: do {
			var xHEX60gensym201601_201617 = null;
			var lastHEX60gensym200915_249158 = 0;
			var splitsHEX60gensym200916_249159 = maxsplit_201549;
			L2: do {
					L3: while (true) {
					if (!(lastHEX60gensym200915_249158 <= (s_201546 != null ? s_201546.length : 0))) break L3;
						var firstHEX60gensym200917_249161 = lastHEX60gensym200915_249158;
						L4: do {
								L5: while (true) {
								if (!((lastHEX60gensym200915_249158 < (s_201546 != null ? s_201546.length : 0)) && !(substr_eq_200704(s_201546, lastHEX60gensym200915_249158, sep_201547)))) break L5;
									lastHEX60gensym200915_249158 = addInt(lastHEX60gensym200915_249158, 1);
								}
						} while(false);
						if ((splitsHEX60gensym200916_249159 == 0)) {
						lastHEX60gensym200915_249158 = (s_201546 != null ? s_201546.length : 0);
						}
						
						xHEX60gensym201601_201617 = substr_74422(s_201546, firstHEX60gensym200917_249161, subInt(lastHEX60gensym200915_249158, 1));
						var Tmp6 = nimCopy(null, xHEX60gensym201601_201617, NTI44040);
						if (result_201551 != null) { result_201551.push(Tmp6); } else { result_201551 = [Tmp6]; };
						if ((splitsHEX60gensym200916_249159 == 0)) {
						break L2;
						}
						
						splitsHEX60gensym200916_249159 = subInt(splitsHEX60gensym200916_249159, 1);
						lastHEX60gensym200915_249158 = addInt(lastHEX60gensym200915_249158, (sep_201547 != null ? sep_201547.length : 0));
					}
			} while(false);
		} while(false);

	return result_201551;

}

function HEX2EHEX2E_126220(a_126224, b_126225) {
	var result_126227 = {a: 0, b: 0};

		nimCopy(result_126227, {a: a_126224, b: b_126225}, NTI106907);

	return result_126227;

}

function nsuJoinSep(a_205664, sep_205665) {
	var result_205666 = null;

		if ((0 < (a_205664 != null ? a_205664.length : 0))) {
		var l_205677 = mulInt((sep_205665 != null ? sep_205665.length : 0), subInt((a_205664 != null ? a_205664.length : 0), 1));
		L1: do {
			var i_205691 = 0;
			var colontmp__249176 = 0;
			colontmp__249176 = (a_205664 != null ? (a_205664.length-1) : -1);
			var res_249177 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_249177 <= colontmp__249176)) break L3;
						i_205691 = res_249177;
						l_205677 = addInt(l_205677, (a_205664[chckIndx(i_205691, 0, (a_205664 != null ? a_205664.length : 0)+0-1)-0] != null ? a_205664[chckIndx(i_205691, 0, (a_205664 != null ? a_205664.length : 0)+0-1)-0].length : 0));
						res_249177 = addInt(res_249177, 1);
					}
			} while(false);
		} while(false);
		result_205666 = nimCopy(null, mnewString(0), NTI44040);
		if (result_205666 != null) { result_205666 = (result_205666).concat(a_205664[chckIndx(0, 0, (a_205664 != null ? a_205664.length : 0)+0-1)-0]); } else { result_205666 = a_205664[chckIndx(0, 0, (a_205664 != null ? a_205664.length : 0)+0-1)-0].slice(); };
		L4: do {
			var i_205711 = 0;
			var colontmp__249183 = 0;
			colontmp__249183 = (a_205664 != null ? (a_205664.length-1) : -1);
			var res_249184 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_249184 <= colontmp__249183)) break L6;
						i_205711 = res_249184;
						if (result_205666 != null) { result_205666 = (result_205666).concat(sep_205665); } else { result_205666 = sep_205665.slice(); };
						if (result_205666 != null) { result_205666 = (result_205666).concat(a_205664[chckIndx(i_205711, 0, (a_205664 != null ? a_205664.length : 0)+0-1)-0]); } else { result_205666 = a_205664[chckIndx(i_205711, 0, (a_205664 != null ? a_205664.length : 0)+0-1)-0].slice(); };
						res_249184 = addInt(res_249184, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			result_205666 = nimCopy(null, [], NTI44040);
		}
		

	return result_205666;

}

function parse_240290(c_240292, inv_240293) {
	var result_240294 = 0;

	BeforeRet: do {
		var f_240304 = subInt(c_240292[chckIndx(0, 0, (c_240292 != null ? c_240292.length : 0)+0-1)-0], 97);
		var r_240313 = subInt(c_240292[chckIndx(1, 0, (c_240292 != null ? c_240292.length : 0)+0-1)-0], 49);
		if (inv_240293) {
		f_240304 = subInt(7, f_240304);
		r_240313 = subInt(7, r_240313);
		}
		
		result_240294 = subInt(addInt(91, f_240304), mulInt(10, r_240313));
		break BeforeRet;
	} while (false);

	return result_240294;

}

function find_208486(a_208490, item_208491) {
	var result_208492 = 0;

	BeforeRet: do {
		L1: do {
			var i_208523 = 0;
			var i_249196 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_249196 < (a_208490 != null ? a_208490.length : 0))) break L3;
						i_208523 = a_208490[chckIndx(i_249196, 0, (a_208490 != null ? a_208490.length : 0)+0-1)-0];
						if ((i_208523 == item_208491)) {
						break BeforeRet;
						}
						
						result_208492 = addInt(result_208492, 1);
						i_249196 = addInt(i_249196, 1);
					}
			} while(false);
		} while(false);
		result_208492 = -1;
	} while (false);

	return result_208492;

}

function contains_208479(a_208483, item_208484) {
	var result_208485 = false;

	BeforeRet: do {
		result_208485 = (0 <= find_208486(a_208483, item_208484));
		break BeforeRet;
	} while (false);

	return result_208485;

}

function raiseDivByZero() {
		var eHEX60gensym66257_66403 = null;
		eHEX60gensym66257_66403 = {m_type: NTI47444, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym66257_66403.message = nimCopy(null, makeNimstrLit("division by zero"), NTI44040);
		eHEX60gensym66257_66403.parent = null;
		raiseException(eHEX60gensym66257_66403, "DivByZeroError");

	
}

function binary_search_130759(c_130761, tab_130763, len_130764, stride_130765) {
			var Tmp3;

	var result_130766 = 0;

	BeforeRet: do {
		var n_130767 = len_130764;
		var t_130769 = 0;
		L1: do {
				L2: while (true) {
				if (!(1 < n_130767)) break L2;
					var m_130772 = divInt(n_130767, 2);
					var p_130773 = addInt(t_130769, mulInt(m_130772, stride_130765));
					if ((tab_130763[chckIndx(p_130773, 0, (tab_130763 != null ? tab_130763.length : 0)+0-1)-0] <= ((c_130761)|0))) {
					t_130769 = p_130773;
					n_130767 = subInt(n_130767, m_130772);
					}
					else {
						n_130767 = m_130772;
					}
					
				}
		} while(false);
			if (!!((n_130767 == 0))) Tmp3 = false; else {				Tmp3 = (tab_130763[chckIndx(t_130769, 0, (tab_130763 != null ? tab_130763.length : 0)+0-1)-0] <= ((c_130761)|0));			}		if (Tmp3) {
		result_130766 = t_130769;
		break BeforeRet;
		}
		
		result_130766 = -1;
		break BeforeRet;
	} while (false);

	return result_130766;

}

function nucisUpper(c_131041) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_131042 = false;

	BeforeRet: do {
		var c_131043 = c_131041;
		var p_131067 = binary_search_130759(c_131043, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534], 45, 3);
			if (!(0 <= p_131067)) Tmp2 = false; else {				Tmp2 = (to_lower_ranges_126892[chckIndx(p_131067, 0, (to_lower_ranges_126892 != null ? to_lower_ranges_126892.length : 0)+0-1)-0] <= ((c_131043)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_131043)|0) <= to_lower_ranges_126892[chckIndx(addInt(p_131067, 1), 0, (to_lower_ranges_126892 != null ? to_lower_ranges_126892.length : 0)+0-1)-0]);			}		if (Tmp1) {
		result_131042 = true;
		break BeforeRet;
		}
		
		p_131067 = binary_search_130759(c_131043, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884], 610, 2);
			if (!(0 <= p_131067)) Tmp3 = false; else {				Tmp3 = (((c_131043)|0) == to_lower_singlets_128162[chckIndx(p_131067, 0, (to_lower_singlets_128162 != null ? to_lower_singlets_128162.length : 0)+0-1)-0]);			}		if (Tmp3) {
		result_131042 = true;
		break BeforeRet;
		}
		
	} while (false);

	return result_131042;

}

function nuctoLower(c_130790) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_130791 = 0;

	BeforeRet: do {
		var c_130792 = c_130790;
		var p_130816 = binary_search_130759(c_130792, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534], 45, 3);
			if (!(0 <= p_130816)) Tmp2 = false; else {				Tmp2 = (to_lower_ranges_126892[chckIndx(p_130816, 0, (to_lower_ranges_126892 != null ? to_lower_ranges_126892.length : 0)+0-1)-0] <= ((c_130792)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_130792)|0) <= to_lower_ranges_126892[chckIndx(addInt(p_130816, 1), 0, (to_lower_ranges_126892 != null ? to_lower_ranges_126892.length : 0)+0-1)-0]);			}		if (Tmp1) {
		result_130791 = subInt(addInt(((c_130792)|0), to_lower_ranges_126892[chckIndx(addInt(p_130816, 2), 0, (to_lower_ranges_126892 != null ? to_lower_ranges_126892.length : 0)+0-1)-0]), 500);
		break BeforeRet;
		}
		
		p_130816 = binary_search_130759(c_130792, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884], 610, 2);
			if (!(0 <= p_130816)) Tmp3 = false; else {				Tmp3 = (((c_130792)|0) == to_lower_singlets_128162[chckIndx(p_130816, 0, (to_lower_singlets_128162 != null ? to_lower_singlets_128162.length : 0)+0-1)-0]);			}		if (Tmp3) {
		result_130791 = subInt(addInt(((c_130792)|0), to_lower_singlets_128162[chckIndx(addInt(p_130816, 1), 0, (to_lower_singlets_128162 != null ? to_lower_singlets_128162.length : 0)+0-1)-0]), 500);
		break BeforeRet;
		}
		
		result_130791 = c_130792;
		break BeforeRet;
	} while (false);

	return result_130791;

}

function nucisLower(c_130973) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_130974 = false;

	BeforeRet: do {
		var c_130975 = c_130973;
		var p_130999 = binary_search_130759(c_130975, [97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466], 46, 3);
			if (!(0 <= p_130999)) Tmp2 = false; else {				Tmp2 = (to_upper_ranges_128310[chckIndx(p_130999, 0, (to_upper_ranges_128310 != null ? to_upper_ranges_128310.length : 0)+0-1)-0] <= ((c_130975)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_130975)|0) <= to_upper_ranges_128310[chckIndx(addInt(p_130999, 1), 0, (to_upper_ranges_128310 != null ? to_upper_ranges_128310.length : 0)+0-1)-0]);			}		if (Tmp1) {
		result_130974 = true;
		break BeforeRet;
		}
		
		p_130999 = binary_search_130759(c_130975, [181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428], 624, 2);
			if (!(0 <= p_130999)) Tmp3 = false; else {				Tmp3 = (((c_130975)|0) == to_upper_singlets_129586[chckIndx(p_130999, 0, (to_upper_singlets_129586 != null ? to_upper_singlets_129586.length : 0)+0-1)-0]);			}		if (Tmp3) {
		result_130974 = true;
		break BeforeRet;
		}
		
	} while (false);

	return result_130974;

}

function nuctoUpper(c_130860) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_130861 = 0;

	BeforeRet: do {
		var c_130862 = c_130860;
		var p_130886 = binary_search_130759(c_130862, [97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466], 46, 3);
			if (!(0 <= p_130886)) Tmp2 = false; else {				Tmp2 = (to_upper_ranges_128310[chckIndx(p_130886, 0, (to_upper_ranges_128310 != null ? to_upper_ranges_128310.length : 0)+0-1)-0] <= ((c_130862)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_130862)|0) <= to_upper_ranges_128310[chckIndx(addInt(p_130886, 1), 0, (to_upper_ranges_128310 != null ? to_upper_ranges_128310.length : 0)+0-1)-0]);			}		if (Tmp1) {
		result_130861 = subInt(addInt(((c_130862)|0), to_upper_ranges_128310[chckIndx(addInt(p_130886, 2), 0, (to_upper_ranges_128310 != null ? to_upper_ranges_128310.length : 0)+0-1)-0]), 500);
		break BeforeRet;
		}
		
		p_130886 = binary_search_130759(c_130862, [181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428], 624, 2);
			if (!(0 <= p_130886)) Tmp3 = false; else {				Tmp3 = (((c_130862)|0) == to_upper_singlets_129586[chckIndx(p_130886, 0, (to_upper_singlets_129586 != null ? to_upper_singlets_129586.length : 0)+0-1)-0]);			}		if (Tmp3) {
		result_130861 = subInt(addInt(((c_130862)|0), to_upper_singlets_129586[chckIndx(addInt(p_130886, 1), 0, (to_upper_singlets_129586 != null ? to_upper_singlets_129586.length : 0)+0-1)-0]), 500);
		break BeforeRet;
		}
		
		result_130861 = c_130862;
		break BeforeRet;
	} while (false);

	return result_130861;

}

function nucswapCase(s_144022) {
	var result_144023 = null;

		var i_144025 = 0;
		var result_index_144027 = 0;
		var rune_144028 = 0;
		result_144023 = nimCopy(null, mnewString(chckRange((s_144022 != null ? s_144022.length : 0), 0, 2147483647)), NTI44040);
		L1: do {
				L2: while (true) {
				if (!(i_144025 < (s_144022 != null ? s_144022.length : 0))) break L2;
					if ((s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] <= 127)) {
					rune_144028 = chckRange(s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0], -2147483648, 2147483647);
					i_144025 = addInt(i_144025, 1);
					}
					else {
					if ((((s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((i_144025 <= subInt((s_144022 != null ? s_144022.length : 0), 2))) {
					rune_144028 = chckRange((((s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 31) << 6) | (s_144022[chckIndx(addInt(i_144025, 1), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_144025 = addInt(i_144025, 2);
					}
					else {
						rune_144028 = 65533;
						i_144025 = addInt(i_144025, 1);
					}
					
					}
					else {
					if ((((s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
					if ((i_144025 <= subInt((s_144022 != null ? s_144022.length : 0), 3))) {
					rune_144028 = chckRange(((((s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 15) << 12) | ((s_144022[chckIndx(addInt(i_144025, 1), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63) << 6)) | (s_144022[chckIndx(addInt(i_144025, 2), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_144025 = addInt(i_144025, 3);
					}
					else {
						rune_144028 = 65533;
						i_144025 = addInt(i_144025, 1);
					}
					
					}
					else {
					if ((((s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
					if ((i_144025 <= subInt((s_144022 != null ? s_144022.length : 0), 4))) {
					rune_144028 = chckRange((((((s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 7) << 18) | ((s_144022[chckIndx(addInt(i_144025, 1), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63) << 12)) | ((s_144022[chckIndx(addInt(i_144025, 2), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63) << 6)) | (s_144022[chckIndx(addInt(i_144025, 3), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_144025 = addInt(i_144025, 4);
					}
					else {
						rune_144028 = 65533;
						i_144025 = addInt(i_144025, 1);
					}
					
					}
					else {
					if ((((s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
					if ((i_144025 <= subInt((s_144022 != null ? s_144022.length : 0), 5))) {
					rune_144028 = chckRange(((((((s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 3) << 24) | ((s_144022[chckIndx(addInt(i_144025, 1), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63) << 18)) | ((s_144022[chckIndx(addInt(i_144025, 2), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63) << 12)) | ((s_144022[chckIndx(addInt(i_144025, 3), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63) << 6)) | (s_144022[chckIndx(addInt(i_144025, 4), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_144025 = addInt(i_144025, 5);
					}
					else {
						rune_144028 = 65533;
						i_144025 = addInt(i_144025, 1);
					}
					
					}
					else {
					if ((((s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
					if ((i_144025 <= subInt((s_144022 != null ? s_144022.length : 0), 6))) {
					rune_144028 = chckRange((((((((s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 1) << 30) | ((s_144022[chckIndx(addInt(i_144025, 1), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63) << 24)) | ((s_144022[chckIndx(addInt(i_144025, 2), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63) << 18)) | ((s_144022[chckIndx(addInt(i_144025, 3), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63) << 12)) | ((s_144022[chckIndx(addInt(i_144025, 4), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63) << 6)) | (s_144022[chckIndx(addInt(i_144025, 5), 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_144025 = addInt(i_144025, 6);
					}
					else {
						rune_144028 = 65533;
						i_144025 = addInt(i_144025, 1);
					}
					
					}
					else {
						rune_144028 = chckRange(s_144022[chckIndx(i_144025, 0, (s_144022 != null ? s_144022.length : 0)+0-1)-0], -2147483648, 2147483647);
						i_144025 = addInt(i_144025, 1);
					}
					}}}}}
					if (nucisUpper(rune_144028)) {
					rune_144028 = nuctoLower(rune_144028);
					}
					else {
					if (nucisLower(rune_144028)) {
					rune_144028 = nuctoUpper(rune_144028);
					}
					}
					var iHEX60gensym146607_146608 = rune_144028;
					if ((iHEX60gensym146607_146608 <= 127)) {
					(result_144023 == null ? result_144023 = mnewString(chckRange(addInt(result_index_144027, 1), 0, 2147483647)) : result_144023.length = chckRange(addInt(result_index_144027, 1), 0, 2147483647));
					result_144023[chckIndx(addInt(result_index_144027, 0), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange(iHEX60gensym146607_146608, 0, 255);
					result_index_144027 = addInt(result_index_144027, 1);
					}
					else {
					if ((iHEX60gensym146607_146608 <= 2047)) {
					(result_144023 == null ? result_144023 = mnewString(chckRange(addInt(result_index_144027, 2), 0, 2147483647)) : result_144023.length = chckRange(addInt(result_index_144027, 2), 0, 2147483647));
					result_144023[chckIndx(addInt(result_index_144027, 0), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym146607_146608 >> 6) | 192), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 1), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym146607_146608 & 63) | 128), 0, 255);
					result_index_144027 = addInt(result_index_144027, 2);
					}
					else {
					if ((iHEX60gensym146607_146608 <= 65535)) {
					(result_144023 == null ? result_144023 = mnewString(chckRange(addInt(result_index_144027, 3), 0, 2147483647)) : result_144023.length = chckRange(addInt(result_index_144027, 3), 0, 2147483647));
					result_144023[chckIndx(addInt(result_index_144027, 0), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym146607_146608 >> 12) | 224), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 1), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym146607_146608 >> 6) & 63) | 128), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 2), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym146607_146608 & 63) | 128), 0, 255);
					result_index_144027 = addInt(result_index_144027, 3);
					}
					else {
					if ((iHEX60gensym146607_146608 <= 2097151)) {
					(result_144023 == null ? result_144023 = mnewString(chckRange(addInt(result_index_144027, 4), 0, 2147483647)) : result_144023.length = chckRange(addInt(result_index_144027, 4), 0, 2147483647));
					result_144023[chckIndx(addInt(result_index_144027, 0), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym146607_146608 >> 18) | 240), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 1), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym146607_146608 >> 12) & 63) | 128), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 2), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym146607_146608 >> 6) & 63) | 128), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 3), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym146607_146608 & 63) | 128), 0, 255);
					result_index_144027 = addInt(result_index_144027, 4);
					}
					else {
					if ((iHEX60gensym146607_146608 <= 67108863)) {
					(result_144023 == null ? result_144023 = mnewString(chckRange(addInt(result_index_144027, 5), 0, 2147483647)) : result_144023.length = chckRange(addInt(result_index_144027, 5), 0, 2147483647));
					result_144023[chckIndx(addInt(result_index_144027, 0), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym146607_146608 >> 24) | 248), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 1), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym146607_146608 >> 18) & 63) | 128), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 2), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym146607_146608 >> 12) & 63) | 128), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 3), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym146607_146608 >> 6) & 63) | 128), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 4), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym146607_146608 & 63) | 128), 0, 255);
					result_index_144027 = addInt(result_index_144027, 5);
					}
					else {
					if ((iHEX60gensym146607_146608 <= 2147483647)) {
					(result_144023 == null ? result_144023 = mnewString(chckRange(addInt(result_index_144027, 6), 0, 2147483647)) : result_144023.length = chckRange(addInt(result_index_144027, 6), 0, 2147483647));
					result_144023[chckIndx(addInt(result_index_144027, 0), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym146607_146608 >> 30) | 252), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 1), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym146607_146608 >> 24) & 63) | 128), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 2), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym146607_146608 >> 18) & 63) | 128), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 3), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym146607_146608 >> 12) & 63) | 128), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 4), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym146607_146608 >> 6) & 63) | 128), 0, 255);
					result_144023[chckIndx(addInt(result_index_144027, 5), 0, (result_144023 != null ? result_144023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym146607_146608 & 63) | 128), 0, 255);
					result_index_144027 = addInt(result_index_144027, 6);
					}
					else {
					}
					}}}}}
				}
		} while(false);

	return result_144023;

}

function nucisCombining(c_131235) {
		var Tmp1;
			var Tmp2;
			var Tmp3;
			var Tmp4;
			var Tmp5;
				var Tmp6;
				var Tmp7;
				var Tmp8;
				var Tmp9;

	var result_131236 = false;

	BeforeRet: do {
		var c_131237 = c_131235;
		if (!(768 <= c_131237)) Tmp1 = false; else {			if ((c_131237 <= 879)) Tmp5 = true; else {				if (!(6832 <= c_131237)) Tmp6 = false; else {					Tmp6 = (c_131237 <= 6911);				}				Tmp5 = Tmp6;			}			if (Tmp5) Tmp4 = true; else {				if (!(7616 <= c_131237)) Tmp7 = false; else {					Tmp7 = (c_131237 <= 7679);				}				Tmp4 = Tmp7;			}			if (Tmp4) Tmp3 = true; else {				if (!(8400 <= c_131237)) Tmp8 = false; else {					Tmp8 = (c_131237 <= 8447);				}				Tmp3 = Tmp8;			}			if (Tmp3) Tmp2 = true; else {				if (!(65056 <= c_131237)) Tmp9 = false; else {					Tmp9 = (c_131237 <= 65071);				}				Tmp2 = Tmp9;			}			Tmp1 = Tmp2;		}		result_131236 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_131236;

}

function reversed_165220(s_165222) {
	var result_165223 = null;

		var i_165225 = 0;
		var last_i_165227 = 0;
		var new_pos_165228 = subInt((s_165222 != null ? s_165222.length : 0), 1);
		var block_pos_165230 = 0;
		var r_165231 = 0;
		result_165223 = nimCopy(null, mnewString(chckRange((s_165222 != null ? s_165222.length : 0), 0, 2147483647)), NTI44040);
		L1: do {
				L2: while (true) {
				if (!(i_165225 < (s_165222 != null ? s_165222.length : 0))) break L2;
					last_i_165227 = i_165225;
					if ((s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] <= 127)) {
					r_165231 = chckRange(s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0], -2147483648, 2147483647);
					i_165225 = addInt(i_165225, 1);
					}
					else {
					if ((((s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((i_165225 <= subInt((s_165222 != null ? s_165222.length : 0), 2))) {
					r_165231 = chckRange((((s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 31) << 6) | (s_165222[chckIndx(addInt(i_165225, 1), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_165225 = addInt(i_165225, 2);
					}
					else {
						r_165231 = 65533;
						i_165225 = addInt(i_165225, 1);
					}
					
					}
					else {
					if ((((s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
					if ((i_165225 <= subInt((s_165222 != null ? s_165222.length : 0), 3))) {
					r_165231 = chckRange(((((s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 15) << 12) | ((s_165222[chckIndx(addInt(i_165225, 1), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63) << 6)) | (s_165222[chckIndx(addInt(i_165225, 2), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_165225 = addInt(i_165225, 3);
					}
					else {
						r_165231 = 65533;
						i_165225 = addInt(i_165225, 1);
					}
					
					}
					else {
					if ((((s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
					if ((i_165225 <= subInt((s_165222 != null ? s_165222.length : 0), 4))) {
					r_165231 = chckRange((((((s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 7) << 18) | ((s_165222[chckIndx(addInt(i_165225, 1), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63) << 12)) | ((s_165222[chckIndx(addInt(i_165225, 2), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63) << 6)) | (s_165222[chckIndx(addInt(i_165225, 3), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_165225 = addInt(i_165225, 4);
					}
					else {
						r_165231 = 65533;
						i_165225 = addInt(i_165225, 1);
					}
					
					}
					else {
					if ((((s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
					if ((i_165225 <= subInt((s_165222 != null ? s_165222.length : 0), 5))) {
					r_165231 = chckRange(((((((s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 3) << 24) | ((s_165222[chckIndx(addInt(i_165225, 1), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63) << 18)) | ((s_165222[chckIndx(addInt(i_165225, 2), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63) << 12)) | ((s_165222[chckIndx(addInt(i_165225, 3), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63) << 6)) | (s_165222[chckIndx(addInt(i_165225, 4), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_165225 = addInt(i_165225, 5);
					}
					else {
						r_165231 = 65533;
						i_165225 = addInt(i_165225, 1);
					}
					
					}
					else {
					if ((((s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
					if ((i_165225 <= subInt((s_165222 != null ? s_165222.length : 0), 6))) {
					r_165231 = chckRange((((((((s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 1) << 30) | ((s_165222[chckIndx(addInt(i_165225, 1), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63) << 24)) | ((s_165222[chckIndx(addInt(i_165225, 2), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63) << 18)) | ((s_165222[chckIndx(addInt(i_165225, 3), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63) << 12)) | ((s_165222[chckIndx(addInt(i_165225, 4), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63) << 6)) | (s_165222[chckIndx(addInt(i_165225, 5), 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_165225 = addInt(i_165225, 6);
					}
					else {
						r_165231 = 65533;
						i_165225 = addInt(i_165225, 1);
					}
					
					}
					else {
						r_165231 = chckRange(s_165222[chckIndx(i_165225, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0], -2147483648, 2147483647);
						i_165225 = addInt(i_165225, 1);
					}
					}}}}}
					if (!(nucisCombining(r_165231))) {
					var jHEX60gensym167807_167808 = subInt(last_i_165227, 1);
					L3: do {
							L4: while (true) {
							if (!(block_pos_165230 < jHEX60gensym167807_167808)) break L4;
								result_165223[chckIndx(new_pos_165228, 0, (result_165223 != null ? result_165223.length : 0)+0-1)-0] = s_165222[chckIndx(jHEX60gensym167807_167808, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0];
								jHEX60gensym167807_167808 = subInt(jHEX60gensym167807_167808, 1);
								new_pos_165228 = subInt(new_pos_165228, 1);
							}
					} while(false);
					block_pos_165230 = subInt(last_i_165227, 1);
					}
					
				}
		} while(false);
		var jHEX60gensym167827_167828 = subInt((s_165222 != null ? s_165222.length : 0), 1);
		L5: do {
				L6: while (true) {
				if (!(block_pos_165230 < jHEX60gensym167827_167828)) break L6;
					result_165223[chckIndx(new_pos_165228, 0, (result_165223 != null ? result_165223.length : 0)+0-1)-0] = s_165222[chckIndx(jHEX60gensym167827_167828, 0, (s_165222 != null ? s_165222.length : 0)+0-1)-0];
					jHEX60gensym167827_167828 = subInt(jHEX60gensym167827_167828, 1);
					new_pos_165228 = subInt(new_pos_165228, 1);
				}
		} while(false);
		block_pos_165230 = subInt((s_165222 != null ? s_165222.length : 0), 1);

	return result_165223;

}

function rotate_240449(s_240451) {
	var result_240452 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

	BeforeRet: do {
		var ep_240454 = 0;
		var kp_240456 = 0;
		var lastcap_240458 = 0;
		if ((0 < s_240451.ep)) {
		ep_240454 = subInt(119, s_240451.ep);
		}
		
		if ((0 < s_240451.kp)) {
		kp_240456 = subInt(119, s_240451.kp);
		}
		
		if ((0 < s_240451.lastcap)) {
		lastcap_240458 = subInt(119, s_240451.lastcap);
		}
		
		nimCopy(result_240452, {board: nucswapCase(reversed_165220(s_240451.board)), score: -(s_240451.score), wc_w: s_240451.bc_w, wc_e: s_240451.bc_e, bc_w: s_240451.wc_w, bc_e: s_240451.wc_e, ep: ep_240454, kp: kp_240456, lastcap: lastcap_240458}, NTI239926);
		break BeforeRet;
	} while (false);

	return result_240452;

}

function fromfen_240486(fen_240488) {
		var Tmp1;
		var Tmp2;
		var Tmp3;
							var Tmp7;
			var Tmp8;

	var result_240489 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

	BeforeRet: do {
		var b_240490 = makeNimstrLit("         \x0A         \x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A         \x0A         \x0A");
		var f_240491 = nimCopy(null, (Tmp1 = nsuSplitString(fen_240488, makeNimstrLit(" "), -1), Tmp1)[chckIndx(0, 0, (Tmp1 != null ? Tmp1.length : 0)+0-1)-0], NTI44040);
		var cas_240492 = nimCopy(null, (Tmp2 = nsuSplitString(fen_240488, makeNimstrLit(" "), -1), Tmp2)[chckIndx(2, 0, (Tmp2 != null ? Tmp2.length : 0)+0-1)-0], NTI44040);
		var enpas_240493 = nimCopy(null, (Tmp3 = nsuSplitString(fen_240488, makeNimstrLit(" "), -1), Tmp3)[chckIndx(3, 0, (Tmp3 != null ? Tmp3.length : 0)+0-1)-0], NTI44040);
		var i_240495 = 0;
		var j_240497 = 0;
		L4: do {
			var x_240499 = 0;
			var i_249190 = 0;
			var l_249191 = (f_240491 != null ? f_240491.length : 0);
			L5: do {
					L6: while (true) {
					if (!(i_249190 < l_249191)) break L6;
						x_240499 = f_240491[chckIndx(i_249190, 0, (f_240491 != null ? f_240491.length : 0)+0-1)-0];
						var a_240504 = x_240499;
							if (!(48 < a_240504)) Tmp7 = false; else {								Tmp7 = (a_240504 < 57);							}						if (Tmp7) {
						i_240495 = addInt(i_240495, subInt(a_240504, 48));
						}
						else {
						if ((a_240504 == 47)) {
						i_240495 = 0;
						j_240497 = addInt(j_240497, 1);
						}
						else {
							b_240490[chckIndx(addInt(addInt(21, mulInt(10, j_240497)), i_240495), 0, (b_240490 != null ? b_240490.length : 0)+0-1)-0] = x_240499;
							i_240495 = addInt(i_240495, 1);
						}
						}
						i_249190 = addInt(i_249190, 1);
						if (!(((f_240491 != null ? f_240491.length : 0) == l_249191))) {
						failed_assert_impl_59066(makeNimstrLit("iterators.nim(207, 11) `len(a) == L` the length of the string changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		var ep_240522 = 0;
		if (!(eqStrings(enpas_240493, makeNimstrLit("-")))) {
		ep_240522 = parse_240290(enpas_240493, false);
		}
		
		var pos_240553 = {board: nimCopy(null, b_240490, NTI44040), score: 0.0, wc_w: contains_208479(cas_240492, 81), wc_e: contains_208479(cas_240492, 75), bc_w: contains_208479(cas_240492, 75), bc_e: contains_208479(cas_240492, 81), ep: ep_240522, kp: 0, lastcap: 0};
		if (eqStrings((Tmp8 = nsuSplitString(fen_240488, makeNimstrLit(" "), -1), Tmp8)[chckIndx(1, 0, (Tmp8 != null ? Tmp8.length : 0)+0-1)-0], makeNimstrLit("b"))) {
		nimCopy(pos_240553, rotate_240449(pos_240553), NTI239926);
		}
		
		nimCopy(result_240489, pos_240553, NTI239926);
		break BeforeRet;
	} while (false);

	return result_240489;

}

function nsuFindChar(s_206016, sub_206017, start_206018, last_206019) {
		var Tmp1;

	var result_206021 = 0;

	BeforeRet: do {
		if ((last_206019 == 0)) {
		Tmp1 = (s_206016 != null ? (s_206016.length-1) : -1);
		}
		else {
		Tmp1 = last_206019;
		}
		
		var last_206023 = Tmp1;
		L2: do {
			var i_206406 = 0;
			var colontmp__249282 = 0;
			colontmp__249282 = start_206018;
			var res_249283 = colontmp__249282;
			L3: do {
					L4: while (true) {
					if (!(res_249283 <= last_206023)) break L4;
						i_206406 = res_249283;
						if ((sub_206017 == s_206016[chckIndx(i_206406, 0, (s_206016 != null ? s_206016.length : 0)+0-1)-0])) {
						result_206021 = i_206406;
						break BeforeRet;
						}
						
						res_249283 = addInt(res_249283, 1);
					}
			} while(false);
		} while(false);
		result_206021 = -1;
		break BeforeRet;
	} while (false);

	return result_206021;

}

function nsuInitSkipTable(a_205749, sub_205750) {
		var m_205751 = (sub_205750 != null ? sub_205750.length : 0);
		var i_205753 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_205753 <= 248)) break L2;
					a_205749[chckIndx(chckRange(addInt(i_205753, 0), 0, 255), 0, (a_205749 != null ? a_205749.length : 0)+0-1)-0] = m_205751;
					a_205749[chckIndx(chckRange(addInt(i_205753, 1), 0, 255), 0, (a_205749 != null ? a_205749.length : 0)+0-1)-0] = m_205751;
					a_205749[chckIndx(chckRange(addInt(i_205753, 2), 0, 255), 0, (a_205749 != null ? a_205749.length : 0)+0-1)-0] = m_205751;
					a_205749[chckIndx(chckRange(addInt(i_205753, 3), 0, 255), 0, (a_205749 != null ? a_205749.length : 0)+0-1)-0] = m_205751;
					a_205749[chckIndx(chckRange(addInt(i_205753, 4), 0, 255), 0, (a_205749 != null ? a_205749.length : 0)+0-1)-0] = m_205751;
					a_205749[chckIndx(chckRange(addInt(i_205753, 5), 0, 255), 0, (a_205749 != null ? a_205749.length : 0)+0-1)-0] = m_205751;
					a_205749[chckIndx(chckRange(addInt(i_205753, 6), 0, 255), 0, (a_205749 != null ? a_205749.length : 0)+0-1)-0] = m_205751;
					a_205749[chckIndx(chckRange(addInt(i_205753, 7), 0, 255), 0, (a_205749 != null ? a_205749.length : 0)+0-1)-0] = m_205751;
					i_205753 = addInt(i_205753, 8);
				}
		} while(false);
		L3: do {
			var i_205770 = 0;
			var colontmp__249290 = 0;
			colontmp__249290 = subInt(m_205751, 1);
			var i_249291 = 0;
			L4: do {
					L5: while (true) {
					if (!(i_249291 < colontmp__249290)) break L5;
						i_205770 = i_249291;
						a_205749[chckIndx(sub_205750[chckIndx(i_205770, 0, (sub_205750 != null ? sub_205750.length : 0)+0-1)-0], 0, (a_205749 != null ? a_205749.length : 0)+0-1)-0] = subInt(subInt(m_205751, 1), i_205770);
						i_249291 = addInt(i_249291, 1);
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_205786, s_205787, sub_205788, start_205789, last_205790) {
		var Tmp1;

	var result_205792 = 0;

	BeforeRet: do {
		if ((last_205790 == 0)) {
		Tmp1 = (s_205787 != null ? (s_205787.length-1) : -1);
		}
		else {
		Tmp1 = last_205790;
		}
		
		var last_205794 = Tmp1;
		var sub_last_205795 = subInt((sub_205788 != null ? sub_205788.length : 0), 1);
		if ((sub_last_205795 == -1)) {
		result_205792 = start_205789;
		break BeforeRet;
		}
		
		var skip_205797 = start_205789;
		L2: do {
				L3: while (true) {
				if (!(sub_last_205795 <= subInt(last_205794, skip_205797))) break L3;
					var i_205798 = sub_last_205795;
					L4: do {
							L5: while (true) {
							if (!(s_205787[chckIndx(addInt(skip_205797, i_205798), 0, (s_205787 != null ? s_205787.length : 0)+0-1)-0] == sub_205788[chckIndx(i_205798, 0, (sub_205788 != null ? sub_205788.length : 0)+0-1)-0])) break L5;
								if ((i_205798 == 0)) {
								result_205792 = skip_205797;
								break BeforeRet;
								}
								
								i_205798 = subInt(i_205798, 1);
							}
					} while(false);
					skip_205797 = addInt(skip_205797, a_205786[chckIndx(s_205787[chckIndx(addInt(skip_205797, sub_last_205795), 0, (s_205787 != null ? s_205787.length : 0)+0-1)-0], 0, (a_205786 != null ? a_205786.length : 0)+0-1)-0]);
				}
		} while(false);
		result_205792 = -1;
		break BeforeRet;
	} while (false);

	return result_205792;

}

function nsuFindStr(s_206654, sub_206655, start_206656, last_206657) {
	var result_206659 = 0;

	BeforeRet: do {
		if (((s_206654 != null ? s_206654.length : 0) < (sub_206655 != null ? sub_206655.length : 0))) {
		result_206659 = -1;
		break BeforeRet;
		}
		
		if (((sub_206655 != null ? sub_206655.length : 0) == 1)) {
		result_206659 = nsuFindChar(s_206654, sub_206655[chckIndx(0, 0, (sub_206655 != null ? sub_206655.length : 0)+0-1)-0], start_206656, last_206657);
		break BeforeRet;
		}
		
		var a_206661 = [new Int32Array(256)];
		nsuInitSkipTable(a_206661[0], sub_206655);
		result_206659 = nsuFindStrA(a_206661[0], s_206654, sub_206655, start_206656, last_206657);
	} while (false);

	return result_206659;

}

function contains_207277(s_207279, sub_207280) {
	var result_207281 = false;

	BeforeRet: do {
		result_207281 = (0 <= nsuFindStr(s_207279, sub_207280, 0, 0));
		break BeforeRet;
	} while (false);

	return result_207281;

}

function HEX5BHEX5D_248463(s_248469, x_248471) {
	var result_248473 = null;

		var a_248601 = x_248471.a;
		var l_248805 = addInt(subInt(subInt((s_248469 != null ? s_248469.length : 0), x_248471.b), a_248601), 1);
		result_248473 = new Array(chckRange(l_248805, 0, 2147483647)); for (var i=0;i<chckRange(l_248805, 0, 2147483647);++i) {result_248473[i]=null;}		L1: do {
			var i_248820 = 0;
			var i_249299 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_249299 < l_248805)) break L3;
						i_248820 = i_249299;
						result_248473[chckIndx(i_248820, 0, (result_248473 != null ? result_248473.length : 0)+0-1)-0] = nimCopy(null, s_248469[chckIndx(addInt(i_248820, a_248601), 0, (s_248469 != null ? s_248469.length : 0)+0-1)-0], NTI44040);
						i_249299 = addInt(i_249299, 1);
					}
			} while(false);
		} while(false);

	return result_248473;

}

function HEX2EHEX2E_153239(a_153243, b_153244) {
	var result_153250 = {a: 0, b: 0};

		nimCopy(result_153250, {a: a_153243, b: b_153244}, NTI153247);

	return result_153250;

}

function HEX5BHEX5D_126281(s_126285, x_126287) {
	var result_126288 = null;

		var a_126401 = x_126287.a;
		var l_126601 = addInt(subInt(x_126287.b, a_126401), 1);
		result_126288 = nimCopy(null, mnewString(chckRange(l_126601, 0, 2147483647)), NTI44040);
		L1: do {
			var i_126609 = 0;
			var i_249307 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_249307 < l_126601)) break L3;
						i_126609 = i_249307;
						result_126288[chckIndx(i_126609, 0, (result_126288 != null ? result_126288.length : 0)+0-1)-0] = s_126285[chckIndx(addInt(i_126609, a_126401), 0, (s_126285 != null ? s_126285.length : 0)+0-1)-0];
						i_249307 = addInt(i_249307, 1);
					}
			} while(false);
		} while(false);

	return result_126288;

}

function nsuIsLowerAsciiChar(c_200332) {
	var result_200333 = false;

	BeforeRet: do {
		result_200333 = (ConstSet2[c_200332] != undefined);
		break BeforeRet;
	} while (false);

	return result_200333;

}

function HEX2BHEX3D_208861(x_208865, x_208865_Idx, y_208866) {
		x_208865[x_208865_Idx] = (x_208865[x_208865_Idx] + y_208866);

	
}

function hash_87694(x_87696) {
	var result_87697 = 0;

		result_87697 = x_87696;

	return result_87697;

}

function is_filled_109018(hcode_109020) {
	var result_109021 = false;

		result_109021 = !((hcode_109020 == 0));

	return result_109021;

}

function next_try_109035(h_109037, max_hash_109038) {
	var result_109039 = 0;

		result_109039 = (addInt(h_109037, 1) & max_hash_109038);

	return result_109039;

}

function raw_get_236402(t_236406, key_236407, hc_236408, hc_236408_Idx) {
						var Tmp3;

	var result_236409 = 0;

	BeforeRet: do {
		hc_236408[hc_236408_Idx] = hash_87694(key_236407);
		if ((hc_236408[hc_236408_Idx] == 0)) {
		hc_236408[hc_236408_Idx] = 314159265;
		}
		
		if (((t_236406.data != null ? t_236406.data.length : 0) == 0)) {
		result_236409 = -1;
		break BeforeRet;
		}
		
		var h_236549 = (hc_236408[hc_236408_Idx] & (t_236406.data != null ? (t_236406.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_109018(t_236406.data[chckIndx(h_236549, 0, (t_236406.data != null ? t_236406.data.length : 0)+0-1)-0].Field0)) break L2;
						if (!(t_236406.data[chckIndx(h_236549, 0, (t_236406.data != null ? t_236406.data.length : 0)+0-1)-0].Field0 == hc_236408[hc_236408_Idx])) Tmp3 = false; else {							Tmp3 = (t_236406.data[chckIndx(h_236549, 0, (t_236406.data != null ? t_236406.data.length : 0)+0-1)-0].Field1 == key_236407);						}					if (Tmp3) {
					result_236409 = h_236549;
					break BeforeRet;
					}
					
					h_236549 = next_try_109035(h_236549, (t_236406.data != null ? (t_236406.data.length-1) : -1));
				}
		} while(false);
		result_236409 = subInt(-1, h_236549);
	} while (false);

	return result_236409;

}

function HEX5BHEX5D_241961(t_241966, key_241967) {
	var result_241968 = 0.0;

		var hcHEX60gensym109547_241969 = [0];
		var indexHEX60gensym109548_241978 = raw_get_236402(t_241966, key_241967, hcHEX60gensym109547_241969, 0);
		if ((0 <= indexHEX60gensym109548_241978)) {
		result_241968 = t_241966.data[chckIndx(indexHEX60gensym109548_241978, 0, (t_241966.data != null ? t_241966.data.length : 0)+0-1)-0].Field2;
		}
		else {
			var eHEX60gensym242202_242403 = null;
			eHEX60gensym242202_242403 = {m_type: NTI47454, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym242202_242403.message = nimCopy(null, (makeNimstrLit("key not found: ") || []).concat(nimCharToStr(key_241967) || []), NTI44040);
			eHEX60gensym242202_242403.parent = null;
			raiseException(eHEX60gensym242202_242403, "KeyError");
		}
		

	return result_241968;

}

function nsuToUpperAsciiChar(c_200463) {
	var result_200464 = 0;

		if ((ConstSet3[c_200463] != undefined)) {
		result_200464 = chckRange(subInt(c_200463, 32), 0, 255);
		}
		else {
			result_200464 = c_200463;
		}
		

	return result_200464;

}

function value_241809(s_241811, fr_241812, to_241813) {
	var result_241814 = [0.0];

		var p_241815 = s_241811.board[chckIndx(fr_241812, 0, (s_241811.board != null ? s_241811.board.length : 0)+0-1)-0];
		var q_241816 = s_241811.board[chckIndx(to_241813, 0, (s_241811.board != null ? s_241811.board.length : 0)+0-1)-0];
		if (nsuIsLowerAsciiChar(q_241816)) {
		HEX2BHEX3D_208861(result_241814, 0, HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, nsuToUpperAsciiChar(q_241816)));
		}
		
		if ((p_241815 == 80)) {
		if (((21 <= to_241813) && (to_241813 <= 28))) {
		HEX2BHEX3D_208861(result_241814, 0, (HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, 81) - HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, 80)));
		}
		
		if ((to_241813 == s_241811.ep)) {
		HEX2BHEX3D_208861(result_241814, 0, HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, 80));
		}
		
		}
		

	return result_241814[0];

}

function put_240362(board_240364, at_240365, piece_240366) {
	var result_240367 = null;

	BeforeRet: do {
		result_240367 = nimCopy(null, (HEX5BHEX5D_126281(board_240364, HEX2EHEX2E_126220(0, subInt(at_240365, 1))) || []).concat([piece_240366],HEX5BHEX5D_126281(board_240364, HEX2EHEX2E_126220(addInt(at_240365, 1), 119)) || []), NTI44040);
		break BeforeRet;
	} while (false);

	return result_240367;

}

function to_float_54457(i_54459) {
	var result_54460 = 0.0;

		result_54460 = i_54459;

	return result_54460;

}

function HEX2F_71017(x_71019, y_71020) {
	var result_71021 = 0.0;

		result_71021 = (to_float_54457(x_71019) / to_float_54457(y_71020));

	return result_71021;

}

function move_242911(s_242913, fr_242914, to_242915) {
	var result_242916 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

	BeforeRet: do {
		var p_242917 = s_242913.board[chckIndx(fr_242914, 0, (s_242913.board != null ? s_242913.board.length : 0)+0-1)-0];
		var q_242918 = s_242913.board[chckIndx(to_242915, 0, (s_242913.board != null ? s_242913.board.length : 0)+0-1)-0];
		var board_242919 = nimCopy(null, s_242913.board, NTI44040);
		var score_242920 = (s_242913.score + value_241809(s_242913, fr_242914, to_242915));
		var wc_w_242921 = s_242913.wc_w;
		var wc_e_242922 = s_242913.wc_e;
		var bc_w_242923 = s_242913.bc_w;
		var bc_e_242924 = s_242913.bc_e;
		var ep_242926 = 0;
		var kp_242928 = 0;
		var lastcap_242930 = 0;
		if (!((q_242918 == 46))) {
		lastcap_242930 = to_242915;
		}
		else {
			lastcap_242930 = 0;
		}
		
		board_242919 = nimCopy(null, put_240362(board_242919, to_242915, p_242917), NTI44040);
		board_242919 = nimCopy(null, put_240362(board_242919, fr_242914, 46), NTI44040);
		if ((fr_242914 == 91)) {
		wc_w_242921 = false;
		}
		
		if ((fr_242914 == 98)) {
		wc_e_242922 = false;
		}
		
		if ((to_242915 == 21)) {
		bc_e_242924 = false;
		}
		
		if ((to_242915 == 28)) {
		bc_w_242923 = false;
		}
		
		if ((p_242917 == 75)) {
		wc_w_242921 = false;
		wc_e_242922 = false;
		if ((absInt(subInt(to_242915, fr_242914)) == 2)) {
		kp_242928 = ((HEX2F_71017(addInt(to_242915, fr_242914), 2))|0);
		if ((to_242915 < fr_242914)) {
		board_242919 = nimCopy(null, put_240362(board_242919, 91, 46), NTI44040);
		}
		else {
			board_242919 = nimCopy(null, put_240362(board_242919, 98, 46), NTI44040);
		}
		
		board_242919 = nimCopy(null, put_240362(board_242919, kp_242928, 82), NTI44040);
		}
		
		}
		
		if ((p_242917 == 80)) {
		if (((21 <= to_242915) && (to_242915 <= 28))) {
		board_242919 = nimCopy(null, put_240362(board_242919, to_242915, 81), NTI44040);
		}
		
		if ((subInt(to_242915, fr_242914) == -20)) {
		ep_242926 = addInt(fr_242914, -10);
		}
		
		if ((to_242915 == s_242913.ep)) {
		board_242919 = nimCopy(null, put_240362(board_242919, addInt(to_242915, 10), 46), NTI44040);
		}
		
		}
		
		nimCopy(result_242916, {board: nimCopy(null, board_242919, NTI44040), score: score_242920, wc_w: wc_w_242921, wc_e: wc_e_242922, bc_w: bc_w_242923, bc_e: bc_e_242924, ep: ep_242926, kp: kp_242928, lastcap: lastcap_242930}, NTI239926);
		break BeforeRet;
	} while (false);

	return result_242916;

}

function epoch_time_227201() {
	var result_227203 = 0.0;

		result_227203 = HEX2F_71017(new Date().getTime(), 1000);

	return result_227203;

}

function nsuIsUpperAsciiChar(c_200356) {
	var result_200357 = false;

	BeforeRet: do {
		result_200357 = (ConstSet4[c_200356] != undefined);
		break BeforeRet;
	} while (false);

	return result_200357;

}

function raw_get_232002(t_232006, key_232007, hc_232008, hc_232008_Idx) {
						var Tmp3;

	var result_232009 = 0;

	BeforeRet: do {
		hc_232008[hc_232008_Idx] = hash_87694(key_232007);
		if ((hc_232008[hc_232008_Idx] == 0)) {
		hc_232008[hc_232008_Idx] = 314159265;
		}
		
		if (((t_232006.data != null ? t_232006.data.length : 0) == 0)) {
		result_232009 = -1;
		break BeforeRet;
		}
		
		var h_232149 = (hc_232008[hc_232008_Idx] & (t_232006.data != null ? (t_232006.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_109018(t_232006.data[chckIndx(h_232149, 0, (t_232006.data != null ? t_232006.data.length : 0)+0-1)-0].Field0)) break L2;
						if (!(t_232006.data[chckIndx(h_232149, 0, (t_232006.data != null ? t_232006.data.length : 0)+0-1)-0].Field0 == hc_232008[hc_232008_Idx])) Tmp3 = false; else {							Tmp3 = (t_232006.data[chckIndx(h_232149, 0, (t_232006.data != null ? t_232006.data.length : 0)+0-1)-0].Field1 == key_232007);						}					if (Tmp3) {
					result_232009 = h_232149;
					break BeforeRet;
					}
					
					h_232149 = next_try_109035(h_232149, (t_232006.data != null ? (t_232006.data.length-1) : -1));
				}
		} while(false);
		result_232009 = subInt(-1, h_232149);
	} while (false);

	return result_232009;

}

function HEX5BHEX5D_240731(t_240736, key_240737) {
	var result_240738 = new Int32Array(8);

		var hcHEX60gensym109547_240739 = [0];
		var indexHEX60gensym109548_240748 = raw_get_232002(t_240736, key_240737, hcHEX60gensym109547_240739, 0);
		if ((0 <= indexHEX60gensym109548_240748)) {
		nimCopy(result_240738, t_240736.data[chckIndx(indexHEX60gensym109548_240748, 0, (t_240736.data != null ? t_240736.data.length : 0)+0-1)-0].Field2, NTI231044);
		}
		else {
			var eHEX60gensym241002_241203 = null;
			eHEX60gensym241002_241203 = {m_type: NTI47454, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym241002_241203.message = nimCopy(null, (makeNimstrLit("key not found: ") || []).concat(nimCharToStr(key_240737) || []), NTI44040);
			eHEX60gensym241002_241203.parent = null;
			raiseException(eHEX60gensym241002_241203, "KeyError");
		}
		

	return result_240738;

}

function nsuIsSpaceAsciiChar(c_200309) {
	var result_200310 = false;

	BeforeRet: do {
		result_200310 = (ConstSet5[c_200309] != undefined);
		break BeforeRet;
	} while (false);

	return result_200310;

}

function find_241444(a_241448, item_241449) {
	var result_241450 = 0;

	BeforeRet: do {
		L1: do {
			var i_241481 = 0;
			var i_249343 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_249343 < (a_241448 != null ? a_241448.length : 0))) break L3;
						i_241481 = a_241448[chckIndx(i_249343, 0, (a_241448 != null ? a_241448.length : 0)+0-1)-0];
						if ((i_241481 == item_241449)) {
						break BeforeRet;
						}
						
						result_241450 = addInt(result_241450, 1);
						i_249343 = addInt(i_249343, 1);
					}
			} while(false);
		} while(false);
		result_241450 = -1;
	} while (false);

	return result_241450;

}

function contains_241437(a_241441, item_241442) {
	var result_241443 = false;

	BeforeRet: do {
		result_241443 = (0 <= find_241444(a_241441, item_241442));
		break BeforeRet;
	} while (false);

	return result_241443;

}

function gen_moves_240569(s_240571) {
															var Tmp10;
															var Tmp11;
																var Tmp12;

	var result_240574 = null;

		L1: do {
			var i_240585 = 0;
			var res_249335 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_249335 <= 119)) break L3;
						i_240585 = res_249335;
						L4: do {
							var p_240586 = s_240571.board[chckIndx(i_240585, 0, (s_240571.board != null ? s_240571.board.length : 0)+0-1)-0];
							if (!(nsuIsUpperAsciiChar(p_240586))) {
							break L4;
							}
							
							L5: do {
								var d_241313 = 0;
								var colontmp__249328 = new Int32Array(8);
								nimCopy(colontmp__249328, HEX5BHEX5D_240731({data: [{Field0: 80, Field1: 80, Field2: [-10, -20, -11, -9, 0, 0, 0, 0]}, {Field0: 81, Field1: 81, Field2: [-10, 1, 10, -1, -9, 11, 9, -11]}, {Field0: 66, Field1: 66, Field2: [-9, 11, 9, -11, 0, 0, 0, 0]}, {Field0: 82, Field1: 82, Field2: [-10, 1, 10, -1, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 75, Field1: 75, Field2: [-10, 1, 10, -1, -9, 11, 9, -11]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 78, Field1: 78, Field2: [-19, -8, 12, 21, 19, 8, -12, -21]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}], counter: 6}, p_240586), NTI231044);
								var i_249333 = 0;
								if ((i_249333 <= 7)) {
								L6: do {
										L7: while (true) {
										if (!true) break L7;
											d_241313 = colontmp__249328[chckIndx(i_249333, 0, (colontmp__249328 != null ? colontmp__249328.length : 0)+0-1)-0];
											if ((d_241313 == 0)) {
											break L5;
											}
											
											var j_241314 = addInt(i_240585, d_241313);
											L8: do {
													L9: while (true) {
													if (!true) break L9;
														var q_241315 = s_240571.board[chckIndx(j_241314, 0, (s_240571.board != null ? s_240571.board.length : 0)+0-1)-0];
														if ((nsuIsSpaceAsciiChar(q_241315) || nsuIsUpperAsciiChar(q_241315))) {
														break L8;
														}
														
															if (!((p_240586 == 80) && contains_241437([-10, -20], d_241313))) Tmp10 = false; else {																Tmp10 = !((q_241315 == 46));															}														if (Tmp10) {
														break L8;
														}
														
															if (!((p_240586 == 80) && (d_241313 == -20))) Tmp11 = false; else {																if ((i_240585 < 81)) Tmp12 = true; else {																	Tmp12 = !((s_240571.board[chckIndx(addInt(i_240585, -10), 0, (s_240571.board != null ? s_240571.board.length : 0)+0-1)-0] == 46));																}																Tmp11 = Tmp12;															}														if (Tmp11) {
														break L8;
														}
														
														if (((((p_240586 == 80) && contains_241437([-11, -9], d_241313)) && (q_241315 == 46)) && !(contains_241437([s_240571.ep, s_240571.kp, subInt(s_240571.kp, 1), addInt(s_240571.kp, 1)], j_241314)))) {
														break L8;
														}
														
														if (result_240574 != null) { result_240574.push({Field0: i_240585, Field1: j_241314}); } else { result_240574 = [{Field0: i_240585, Field1: j_241314}]; };
														if (((((p_240586 == 80) || (p_240586 == 78)) || (p_240586 == 75)) || nsuIsLowerAsciiChar(q_241315))) {
														break L8;
														}
														
														if ((((i_240585 == 91) && (s_240571.board[chckIndx(addInt(j_241314, 1), 0, (s_240571.board != null ? s_240571.board.length : 0)+0-1)-0] == 75)) && s_240571.wc_w)) {
														if (result_240574 != null) { result_240574.push({Field0: addInt(j_241314, 1), Field1: addInt(j_241314, -1)}); } else { result_240574 = [{Field0: addInt(j_241314, 1), Field1: addInt(j_241314, -1)}]; };
														}
														
														if ((((i_240585 == 98) && (s_240571.board[chckIndx(addInt(j_241314, -1), 0, (s_240571.board != null ? s_240571.board.length : 0)+0-1)-0] == 75)) && s_240571.wc_e)) {
														if (result_240574 != null) { result_240574.push({Field0: addInt(j_241314, -1), Field1: addInt(j_241314, 1)}); } else { result_240574 = [{Field0: addInt(j_241314, -1), Field1: addInt(j_241314, 1)}]; };
														}
														
														j_241314 = addInt(j_241314, d_241313);
													}
											} while(false);
											if ((7 <= i_249333)) {
											break L6;
											}
											
											i_249333 = addInt(i_249333, 1);
										}
								} while(false);
								}
								
							} while(false);
						} while(false);
						res_249335 = addInt(res_249335, 1);
					}
			} while(false);
		} while(false);

	return result_240574;

}

function parse_saturated_natural_115231(s_115233, b_115235, b_115235_Idx, start_115236) {
			var Tmp1;
					var Tmp4;

	var result_115238 = 0;

		var i_115239 = start_115236;
		if (((i_115239 < (s_115233 != null ? s_115233.length : 0)) && (s_115233[chckIndx(i_115239, 0, (s_115233 != null ? s_115233.length : 0)+0-1)-0] == 43))) {
		i_115239 = addInt(i_115239, 1);
		}
		
			if (!(i_115239 < (s_115233 != null ? s_115233.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet10[s_115233[chckIndx(i_115239, 0, (s_115233 != null ? s_115233.length : 0)+0-1)-0]] != undefined);			}		if (Tmp1) {
		b_115235[b_115235_Idx] = 0;
		L2: do {
				L3: while (true) {
					if (!(i_115239 < (s_115233 != null ? s_115233.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet11[s_115233[chckIndx(i_115239, 0, (s_115233 != null ? s_115233.length : 0)+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					var c_115268 = subInt(s_115233[chckIndx(i_115239, 0, (s_115233 != null ? s_115233.length : 0)+0-1)-0], 48);
					if ((b_115235[b_115235_Idx] <= divInt(subInt(2147483647, c_115268), 10))) {
					b_115235[b_115235_Idx] = addInt(mulInt(b_115235[b_115235_Idx], 10), c_115268);
					}
					else {
						b_115235[b_115235_Idx] = 2147483647;
					}
					
					i_115239 = addInt(i_115239, 1);
					L5: do {
							L6: while (true) {
							if (!((i_115239 < (s_115233 != null ? s_115233.length : 0)) && (s_115233[chckIndx(i_115239, 0, (s_115233 != null ? s_115233.length : 0)+0-1)-0] == 95))) break L6;
								i_115239 = addInt(i_115239, 1);
							}
					} while(false);
				}
		} while(false);
		result_115238 = subInt(i_115239, start_115236);
		}
		

	return result_115238;

}

function HEX5BHEX5D_153304(s_153308, x_153310) {
	var result_153311 = null;

		var a_153401 = x_153310.a;
		var l_153601 = addInt(subInt(subInt((s_153308 != null ? s_153308.length : 0), x_153310.b), a_153401), 1);
		result_153311 = nimCopy(null, mnewString(chckRange(l_153601, 0, 2147483647)), NTI44040);
		L1: do {
			var i_153609 = 0;
			var i_249357 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_249357 < l_153601)) break L3;
						i_153609 = i_249357;
						result_153311[chckIndx(i_153609, 0, (result_153311 != null ? result_153311.length : 0)+0-1)-0] = s_153308[chckIndx(addInt(i_153609, a_153401), 0, (s_153308 != null ? s_153308.length : 0)+0-1)-0];
						i_249357 = addInt(i_249357, 1);
					}
			} while(false);
		} while(false);

	return result_153311;

}

function parse_standard_format_specifier_228324(s_228326, start_228327, ignore_unknown_suffix_228329) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_228330 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

		result_228330.fill = 32;
		result_228330.align = 0;
		result_228330.sign = 45;
		var i_228333 = start_228327;
		if (((addInt(i_228333, 1) < (s_228326 != null ? s_228326.length : 0)) && (ConstSet6[s_228326[chckIndx(addInt(i_228333, 1), 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0]] != undefined))) {
		result_228330.fill = s_228326[chckIndx(i_228333, 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0];
		result_228330.align = s_228326[chckIndx(addInt(i_228333, 1), 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0];
		i_228333 = addInt(i_228333, 2);
		}
		else {
		if (((i_228333 < (s_228326 != null ? s_228326.length : 0)) && (ConstSet7[s_228326[chckIndx(i_228333, 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0]] != undefined))) {
		result_228330.align = s_228326[chckIndx(i_228333, 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0];
		i_228333 = addInt(i_228333, 1);
		}
		}
		if (((i_228333 < (s_228326 != null ? s_228326.length : 0)) && (ConstSet8[s_228326[chckIndx(i_228333, 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0]] != undefined))) {
		result_228330.sign = s_228326[chckIndx(i_228333, 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0];
		i_228333 = addInt(i_228333, 1);
		}
		
		if (((i_228333 < (s_228326 != null ? s_228326.length : 0)) && (s_228326[chckIndx(i_228333, 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0] == 35))) {
		result_228330.alternateForm = true;
		i_228333 = addInt(i_228333, 1);
		}
		
			if (!((addInt(i_228333, 1) < (s_228326 != null ? s_228326.length : 0)) && (s_228326[chckIndx(i_228333, 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet9[s_228326[chckIndx(addInt(i_228333, 1), 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0]] != undefined);			}		if (Tmp1) {
		result_228330.padWithZero = true;
		i_228333 = addInt(i_228333, 1);
		}
		
		var parsed_length_228391 = parse_saturated_natural_115231(s_228326, result_228330, "minimumWidth", i_228333);
		i_228333 = addInt(i_228333, parsed_length_228391);
		if (((i_228333 < (s_228326 != null ? s_228326.length : 0)) && (s_228326[chckIndx(i_228333, 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0] == 46))) {
		i_228333 = addInt(i_228333, 1);
		var parsed_length_b_228405 = parse_saturated_natural_115231(s_228326, result_228330, "precision", i_228333);
		i_228333 = addInt(i_228333, parsed_length_b_228405);
		}
		else {
			result_228330.precision = -1;
		}
		
			if (!(i_228333 < (s_228326 != null ? s_228326.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet12[s_228326[chckIndx(i_228333, 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0]] != undefined);			}		if (Tmp2) {
		result_228330.typ = s_228326[chckIndx(i_228333, 0, (s_228326 != null ? s_228326.length : 0)+0-1)-0];
		i_228333 = addInt(i_228333, 1);
		}
		
		result_228330.endPosition = i_228333;
			if (!!((i_228333 == (s_228326 != null ? s_228326.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_228329);			}		if (Tmp3) {
		var eHEX60gensym228460_228603 = null;
		eHEX60gensym228460_228603 = {m_type: NTI47452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym228460_228603.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_153304(s_228326, HEX2EHEX2E_153239(i_228333, 1)) || []), NTI44040);
		eHEX60gensym228460_228603.parent = null;
		raiseException(eHEX60gensym228460_228603, "ValueError");
		}
		

	return result_228330;

}

function mk_digit_228054(v_228056, typ_228057) {
			var Tmp1;

	var result_228058 = null;

		if (!((v_228056 < 26))) {
		failed_assert_impl_59066(makeNimstrLit("strformat.nim(270, 9) `v < 26` "));
		}
		
		if ((v_228056 < 10)) {
		result_228058 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_228056), 0, 255)), NTI44040);
		}
		else {
			if ((typ_228057 == 120)) {
			Tmp1 = 97;
			}
			else {
			Tmp1 = 65;
			}
			
			result_228058 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Tmp1, v_228056), 10), 0, 255)), NTI44040);
		}
		

	return result_228058;

}

function nsuRepeatChar(c_204656, count_204657) {
	var result_204658 = null;

		result_204658 = nimCopy(null, mnewString(count_204657), NTI44040);
		L1: do {
			var i_204667 = 0;
			var colontmp__249375 = 0;
			colontmp__249375 = subInt(count_204657, 1);
			var res_249376 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_249376 <= colontmp__249375)) break L3;
						i_204667 = res_249376;
						result_204658[chckIndx(i_204667, 0, (result_204658 != null ? result_204658.length : 0)+0-1)-0] = c_204656;
						res_249376 = addInt(res_249376, 1);
					}
			} while(false);
		} while(false);

	return result_204658;

}

function format_int_240010(n_240013, radix_240014, spec_240015) {
		var Tmp7;

	var result_240016 = null;

		var v_240201 = n_240013;
		var negative_240202 = (v_240201 < 0);
		if (negative_240202) {
		v_240201 = mulInt(v_240201, -1);
		}
		
		var xx_240204 = [];
		if (spec_240015.alternateForm) {
		switch (spec_240015.typ) {
		case 88:
			xx_240204 = nimCopy(null, makeNimstrLit("0x"), NTI44040);
			break;
		case 120:
			xx_240204 = nimCopy(null, makeNimstrLit("0x"), NTI44040);
			break;
		case 98:
			xx_240204 = nimCopy(null, makeNimstrLit("0b"), NTI44040);
			break;
		case 111:
			xx_240204 = nimCopy(null, makeNimstrLit("0o"), NTI44040);
			break;
		default: 
			break;
		}
		}
		
		if ((v_240201 == 0)) {
		result_240016 = nimCopy(null, makeNimstrLit("0"), NTI44040);
		}
		else {
			result_240016 = nimCopy(null, [], NTI44040);
			L1: do {
					L2: while (true) {
					if (!(0 < v_240201)) break L2;
						var d_240207 = modInt(v_240201, radix_240014);
						v_240201 = divInt(v_240201, radix_240014);
						if (result_240016 != null) { result_240016 = (result_240016).concat(mk_digit_228054(chckRange(d_240207, -2147483648, 2147483647), spec_240015.typ)); } else { result_240016 = mk_digit_228054(chckRange(d_240207, -2147483648, 2147483647), spec_240015.typ).slice(); };
					}
			} while(false);
			L3: do {
				var idx_240216 = 0;
				var colontmp__249364 = 0;
				colontmp__249364 = divInt((result_240016 != null ? result_240016.length : 0), 2);
				var i_249365 = 0;
				L4: do {
						L5: while (true) {
						if (!(i_249365 < colontmp__249364)) break L5;
							idx_240216 = i_249365;
							var Tmp6 = result_240016[chckIndx(idx_240216, 0, (result_240016 != null ? result_240016.length : 0)+0-1)-0]; result_240016[chckIndx(idx_240216, 0, (result_240016 != null ? result_240016.length : 0)+0-1)-0] = result_240016[chckIndx(subInt(subInt((result_240016 != null ? result_240016.length : 0), idx_240216), 1), 0, (result_240016 != null ? result_240016.length : 0)+0-1)-0]; result_240016[chckIndx(subInt(subInt((result_240016 != null ? result_240016.length : 0), idx_240216), 1), 0, (result_240016 != null ? result_240016.length : 0)+0-1)-0] = Tmp6;							i_249365 = addInt(i_249365, 1);
						}
				} while(false);
			} while(false);
		}
		
		if (spec_240015.padWithZero) {
		if (negative_240202) Tmp7 = true; else {			Tmp7 = !((spec_240015.sign == 45));		}		var sign_240232 = Tmp7;
		var to_fill_240237 = subInt(subInt(subInt(spec_240015.minimumWidth, (result_240016 != null ? result_240016.length : 0)), (xx_240204 != null ? xx_240204.length : 0)), (sign_240232 ? 1:0));
		if ((0 < to_fill_240237)) {
		result_240016 = nimCopy(null, (nsuRepeatChar(48, chckRange(to_fill_240237, 0, 2147483647)) || []).concat(result_240016 || []), NTI44040);
		}
		
		}
		
		if (negative_240202) {
		result_240016 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_240204 || [],result_240016 || []), NTI44040);
		}
		else {
		if (!((spec_240015.sign == 45))) {
		result_240016 = nimCopy(null, [spec_240015.sign].concat(xx_240204 || [],result_240016 || []), NTI44040);
		}
		else {
			result_240016 = nimCopy(null, (xx_240204 || []).concat(result_240016 || []), NTI44040);
		}
		}
		if ((spec_240015.align == 60)) {
		L8: do {
			var i_240245 = 0;
			var colontmp__249369 = 0;
			var colontmp__249370 = 0;
			colontmp__249369 = (result_240016 != null ? result_240016.length : 0);
			colontmp__249370 = spec_240015.minimumWidth;
			var i_249371 = colontmp__249369;
			L9: do {
					L10: while (true) {
					if (!(i_249371 < colontmp__249370)) break L10;
						i_240245 = i_249371;
						if (result_240016 != null) { addChar(result_240016, spec_240015.fill); } else { result_240016 = [spec_240015.fill]; };
						i_249371 = addInt(i_249371, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			var to_fill_240246 = subInt(spec_240015.minimumWidth, (result_240016 != null ? result_240016.length : 0));
			if ((spec_240015.align == 94)) {
			var half_240247 = divInt(to_fill_240246, 2);
			result_240016 = nimCopy(null, (nsuRepeatChar(spec_240015.fill, chckRange(half_240247, 0, 2147483647)) || []).concat(result_240016 || [],nsuRepeatChar(spec_240015.fill, chckRange(subInt(to_fill_240246, half_240247), 0, 2147483647)) || []), NTI44040);
			}
			else {
				if ((0 < to_fill_240246)) {
				result_240016 = nimCopy(null, (nsuRepeatChar(spec_240015.fill, chckRange(to_fill_240246, 0, 2147483647)) || []).concat(result_240016 || []), NTI44040);
				}
				
			}
			
		}
		

	return result_240016;

}

function format_value_239969(result_239972, result_239972_Idx, value_239973, specifier_239974) {
	BeforeRet: do {
		if (((specifier_239974 != null ? specifier_239974.length : 0) == 0)) {
		if (result_239972[result_239972_Idx] != null) { result_239972[result_239972_Idx] = (result_239972[result_239972_Idx]).concat(cstrToNimstr((value_239973)+"")); } else { result_239972[result_239972_Idx] = cstrToNimstr((value_239973)+"").slice(); };
		break BeforeRet;
		}
		
		var spec_239975 = parse_standard_format_specifier_228324(specifier_239974, 0, false);
		var radix_239977 = 10;
		switch (spec_239975.typ) {
		case 120:
		case 88:
			radix_239977 = 16;
			break;
		case 100:
		case 0:
			break;
		case 98:
			radix_239977 = 2;
			break;
		case 111:
			radix_239977 = 8;
			break;
		default: 
			var eHEX60gensym239979_240003 = null;
			eHEX60gensym239979_240003 = {m_type: NTI47452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym239979_240003.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_239975.typ]), NTI44040);
			eHEX60gensym239979_240003.parent = null;
			raiseException(eHEX60gensym239979_240003, "ValueError");
			break;
		}
		if (result_239972[result_239972_Idx] != null) { result_239972[result_239972_Idx] = (result_239972[result_239972_Idx]).concat(format_int_240010(value_239973, radix_239977, spec_239975)); } else { result_239972[result_239972_Idx] = format_int_240010(value_239973, radix_239977, spec_239975).slice(); };
	} while (false);

	
}

function render_239949(x_239951) {
	var result_239952 = null;

		var r_239953 = ((HEX2F_71017(subInt(x_239951, 21), 10))|0);
		var f_239954 = modInt(subInt(x_239951, 21), 10);
		var fmt_res_239958 = [mnewString(0)];
		if (fmt_res_239958[0] != null) { addChar(fmt_res_239958[0], chckRange(addInt(f_239954, 97), 0, 255)); } else { fmt_res_239958[0] = [chckRange(addInt(f_239954, 97), 0, 255)]; };
		format_value_239969(fmt_res_239958, 0, subInt(8, r_239953), []);
		result_239952 = nimCopy(null, fmt_res_239958[0], NTI44040);

	return result_239952;

}

function starts_with_205304(s_205306, prefix_205307) {
		var Tmp1;

	var result_205308 = false;

		if (!(0 < (s_205306 != null ? s_205306.length : 0))) Tmp1 = false; else {			Tmp1 = (s_205306[chckIndx(0, 0, (s_205306 != null ? s_205306.length : 0)+0-1)-0] == prefix_205307);		}		result_205308 = Tmp1;

	return result_205308;

}

function isblack_242961(pos_242963) {
		var Tmp1;

	var result_242964 = false;

		if (starts_with_205304(pos_242963.board, 10)) {
		Tmp1 = true;
		}
		else {
		Tmp1 = false;
		}
		
		result_242964 = Tmp1;

	return result_242964;

}

function HEX2A_106019(x_106021, order_106022) {
	var result_106023 = 0;

		var y_106028 = subInt(order_106022, 1);
		result_106023 = subInt((x_106021 ^ y_106028), y_106028);

	return result_106023;

}

function merge_244342(a_244347, b_244350, lo_244351, m_244352, hi_244353, cmp_244357, order_244358) {
	BeforeRet: do {
		if ((HEX2A_106019(cmp_244357(a_244347[chckIndx(m_244352, 0, (a_244347 != null ? a_244347.length : 0)+0-1)-0], a_244347[chckIndx(addInt(m_244352, 1), 0, (a_244347 != null ? a_244347.length : 0)+0-1)-0]), order_244358) <= 0)) {
		break BeforeRet;
		}
		
		var j_244359 = lo_244351;
		if (!((j_244359 <= m_244352))) {
		failed_assert_impl_59066(makeNimstrLit("algorithm.nim(344, 10) `j <= m` "));
		}
		
		var bb_244602 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_244359 <= m_244352)) break L2;
					nimCopy(b_244350[chckIndx(bb_244602, 0, (b_244350 != null ? b_244350.length : 0)+0-1)-0], a_244347[chckIndx(j_244359, 0, (a_244347 != null ? a_244347.length : 0)+0-1)-0], NTI243642);
					bb_244602 = addInt(bb_244602, 1);
					j_244359 = addInt(j_244359, 1);
				}
		} while(false);
		var i_244814 = 0;
		var k_244815 = lo_244351;
		L3: do {
				L4: while (true) {
				if (!((k_244815 < j_244359) && (j_244359 <= hi_244353))) break L4;
					if ((HEX2A_106019(cmp_244357(b_244350[chckIndx(i_244814, 0, (b_244350 != null ? b_244350.length : 0)+0-1)-0], a_244347[chckIndx(j_244359, 0, (a_244347 != null ? a_244347.length : 0)+0-1)-0]), order_244358) <= 0)) {
					nimCopy(a_244347[chckIndx(k_244815, 0, (a_244347 != null ? a_244347.length : 0)+0-1)-0], b_244350[chckIndx(i_244814, 0, (b_244350 != null ? b_244350.length : 0)+0-1)-0], NTI243642);
					i_244814 = addInt(i_244814, 1);
					}
					else {
						nimCopy(a_244347[chckIndx(k_244815, 0, (a_244347 != null ? a_244347.length : 0)+0-1)-0], a_244347[chckIndx(j_244359, 0, (a_244347 != null ? a_244347.length : 0)+0-1)-0], NTI243642);
						j_244359 = addInt(j_244359, 1);
					}
					
					k_244815 = addInt(k_244815, 1);
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_244815 < j_244359)) break L6;
					nimCopy(a_244347[chckIndx(k_244815, 0, (a_244347 != null ? a_244347.length : 0)+0-1)-0], b_244350[chckIndx(i_244814, 0, (b_244350 != null ? b_244350.length : 0)+0-1)-0], NTI243642);
					k_244815 = addInt(k_244815, 1);
					i_244814 = addInt(i_244814, 1);
				}
		} while(false);
	} while (false);

	
}

function sort_244311(a_244316, cmp_244320, order_244321) {
		var n_244326 = (a_244316 != null ? a_244316.length : 0);
		var b_244328 = null;
		b_244328 = new Array(chckRange(divInt(n_244326, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_244326, 2), 0, 2147483647);++i) {b_244328[i]={Field0: 0.0, Field1: 0, Field2: 0};}		var s_244337 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_244337 < n_244326)) break L2;
					var m_244338 = subInt(subInt(n_244326, 1), s_244337);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_244338)) break L4;
								merge_244342(a_244316, b_244328, nimMax(addInt(subInt(m_244338, s_244337), 1), 0), m_244338, addInt(m_244338, s_244337), cmp_244320, order_244321);
								m_244338 = subInt(m_244338, mulInt(s_244337, 2));
							}
					} while(false);
					s_244337 = mulInt(s_244337, 2);
				}
		} while(false);

	
}

function my_cmp_244287(x_244291, y_244292) {
		var Tmp1;

	var result_244293 = 0;

		if ((y_244292["Field0"] < x_244291["Field0"])) {
		Tmp1 = -1;
		}
		else {
		Tmp1 = 1;
		}
		
		result_244293 = Tmp1;

	return result_244293;

}

function order_243631(b_243633, ply_243634, moves_243637) {
	var result_243640 = null;

		var mlist_243643 = null;
		L1: do {
			var m_243650 = {Field0: 0, Field1: 0};
			var i_249412 = 0;
			var l_249413 = (moves_243637 != null ? moves_243637.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_249412 < l_249413)) break L3;
						nimCopy(m_243650, moves_243637[chckIndx(i_249412, 0, (moves_243637 != null ? moves_243637.length : 0)+0-1)-0], NTI243185);
						var p_243651 = nsuToUpperAsciiChar(b_243633.board[chckIndx(m_243650["Field0"], 0, (b_243633.board != null ? b_243633.board.length : 0)+0-1)-0]);
						var q_243652 = nsuToUpperAsciiChar(b_243633.board[chckIndx(m_243650["Field1"], 0, (b_243633.board != null ? b_243633.board.length : 0)+0-1)-0]);
						if (!((q_243652 == 46))) {
						if (mlist_243643 != null) { mlist_243643.push({Field0: ((1.0000000000000000e+01 * HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, q_243652)) - HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_243651)), Field1: m_243650["Field0"], Field2: m_243650["Field1"]}); } else { mlist_243643 = [{Field0: ((1.0000000000000000e+01 * HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, q_243652)) - HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_243651)), Field1: m_243650["Field0"], Field2: m_243650["Field1"]}]; };
						}
						else {
						if ((m_243650["Field1"] == b_243633.ep)) {
						if (mlist_243643 != null) { mlist_243643.push({Field0: (1.0000000000000000e+01 - HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_243651)), Field1: m_243650["Field0"], Field2: m_243650["Field1"]}); } else { mlist_243643 = [{Field0: (1.0000000000000000e+01 - HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_243651)), Field1: m_243650["Field0"], Field2: m_243650["Field1"]}]; };
						}
						else {
						if (mlist_243643 != null) { mlist_243643.push({Field0: HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_243651), Field1: m_243650["Field0"], Field2: m_243650["Field1"]}); } else { mlist_243643 = [{Field0: HEX5BHEX5D_241961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_243651), Field1: m_243650["Field0"], Field2: m_243650["Field1"]}]; };
						}
						}
						i_249412 = addInt(i_249412, 1);
						if (!(((moves_243637 != null ? moves_243637.length : 0) == l_249413))) {
						failed_assert_impl_59066(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		sort_244311(mlist_243643, my_cmp_244287, 1);
		L4: do {
			var m_245814 = {Field0: 0.0, Field1: 0, Field2: 0};
			var i_249417 = 0;
			var l_249418 = (mlist_243643 != null ? mlist_243643.length : 0);
			L5: do {
					L6: while (true) {
					if (!(i_249417 < l_249418)) break L6;
						nimCopy(m_245814, mlist_243643[chckIndx(i_249417, 0, (mlist_243643 != null ? mlist_243643.length : 0)+0-1)-0], NTI243642);
						if (result_243640 != null) { result_243640.push({Field0: m_245814["Field1"], Field1: m_245814["Field2"]}); } else { result_243640 = [{Field0: m_245814["Field1"], Field1: m_245814["Field2"]}]; };
						i_249417 = addInt(i_249417, 1);
						if (!(((mlist_243643 != null ? mlist_243643.length : 0) == l_249418))) {
						failed_assert_impl_59066(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);

	return result_243640;

}

function attacks_243079(pos_243081, x_243082) {
	var result_243084 = null;

		var moves_243085 = gen_moves_240569(pos_243081);
		L1: do {
			var n_243099 = 0;
			var colontmp__249443 = 0;
			colontmp__249443 = subInt((moves_243085 != null ? moves_243085.length : 0), 1);
			var res_249444 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_249444 <= colontmp__249443)) break L3;
						n_243099 = res_249444;
						var i_243100 = moves_243085[chckIndx(n_243099, 0, (moves_243085 != null ? moves_243085.length : 0)+0-1)-0]["Field0"];
						var j_243101 = moves_243085[chckIndx(n_243099, 0, (moves_243085 != null ? moves_243085.length : 0)+0-1)-0]["Field1"];
						if ((i_243100 == x_243082)) {
						if (result_243084 != null) { result_243084.push(j_243101); } else { result_243084 = [j_243101]; };
						}
						
						res_249444 = addInt(res_249444, 1);
					}
			} while(false);
		} while(false);

	return result_243084;

}

function isdead_243181(s_243183, mm_243186) {
							var Tmp11;
							var Tmp12;

	var result_243187 = false;

	BeforeRet: do {
		var check_243188 = false;
		L1: do {
			var i_243199 = 0;
			var res_249432 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_249432 <= 119)) break L3;
						i_243199 = res_249432;
						L4: do {
							var p_243200 = s_243183.board[chckIndx(i_243199, 0, (s_243183.board != null ? s_243183.board.length : 0)+0-1)-0];
							if (!(nsuIsUpperAsciiChar(p_243200))) {
							break L4;
							}
							
							var a_243201 = attacks_243079(s_243183, i_243199);
							L5: do {
								var j_243414 = 0;
								var i_249429 = 0;
								var l_249430 = (a_243201 != null ? a_243201.length : 0);
								L6: do {
										L7: while (true) {
										if (!(i_249429 < l_249430)) break L7;
											j_243414 = a_243201[chckIndx(i_249429, 0, (a_243201 != null ? a_243201.length : 0)+0-1)-0];
											if ((s_243183.board[chckIndx(j_243414, 0, (s_243183.board != null ? s_243183.board.length : 0)+0-1)-0] == 107)) {
											check_243188 = true;
											}
											
											i_249429 = addInt(i_249429, 1);
											if (!(((a_243201 != null ? a_243201.length : 0) == l_249430))) {
											failed_assert_impl_59066(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
						} while(false);
						res_249432 = addInt(res_249432, 1);
					}
			} while(false);
		} while(false);
		if (check_243188) {
		result_243187 = false;
		break BeforeRet;
		}
		
		L8: do {
			var m_243614 = {Field0: 0, Field1: 0};
			var i_249439 = 0;
			var l_249440 = (mm_243186 != null ? mm_243186.length : 0);
			L9: do {
					L10: while (true) {
					if (!(i_249439 < l_249440)) break L10;
						nimCopy(m_243614, mm_243186[chckIndx(i_249439, 0, (mm_243186 != null ? mm_243186.length : 0)+0-1)-0], NTI243185);
						var q_243615 = s_243183.board[chckIndx(m_243614["Field1"], 0, (s_243183.board != null ? s_243183.board.length : 0)+0-1)-0];
							if (!!((q_243615 == 46))) Tmp12 = false; else {								Tmp12 = (0 < s_243183.lastcap);							}							if (!Tmp12) Tmp11 = false; else {								Tmp11 = (m_243614["Field1"] == s_243183.lastcap);							}						if (Tmp11) {
						result_243187 = false;
						break BeforeRet;
						}
						
						i_249439 = addInt(i_249439, 1);
						if (!(((mm_243186 != null ? mm_243186.length : 0) == l_249440))) {
						failed_assert_impl_59066(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_243187 = true;
		break BeforeRet;
	} while (false);

	return result_243187;

}

function mirror_242978(x_242980) {
	var result_242981 = null;

	BeforeRet: do {
		var f1_242999 = chckRange(subInt(104, subInt(x_242980[chckIndx(0, 0, (x_242980 != null ? x_242980.length : 0)+0-1)-0], 97)), 0, 255);
		var f2_243017 = chckRange(subInt(104, subInt(x_242980[chckIndx(2, 0, (x_242980 != null ? x_242980.length : 0)+0-1)-0], 97)), 0, 255);
		var r1_243032 = chckRange(subInt(56, subInt(x_242980[chckIndx(1, 0, (x_242980 != null ? x_242980.length : 0)+0-1)-0], 49)), 0, 255);
		var r2_243047 = chckRange(subInt(56, subInt(x_242980[chckIndx(3, 0, (x_242980 != null ? x_242980.length : 0)+0-1)-0], 49)), 0, 255);
		if (((x_242980 != null ? x_242980.length : 0) == 4)) {
		result_242981 = nimCopy(null, [f1_242999].concat([r1_243032],[f2_243017],[r2_243047]), NTI44040);
		break BeforeRet;
		}
		else {
			result_242981 = nimCopy(null, [f1_242999].concat([r1_243032],[f2_243017],[r2_243047],[x_242980[chckIndx(4, 0, (x_242980 != null ? x_242980.length : 0)+0-1)-0]]), NTI44040);
			break BeforeRet;
		}
		
	} while (false);

	return result_242981;

}

function mirrmv_243061(pos_243063, x_243064) {
	var result_243065 = null;

	BeforeRet: do {
		if (isblack_242961(pos_243063)) {
		result_243065 = nimCopy(null, mirror_242978(x_243064), NTI44040);
		break BeforeRet;
		}
		else {
			result_243065 = nimCopy(null, x_243064, NTI44040);
			break BeforeRet;
		}
		
	} while (false);

	return result_243065;

}

function searchmax_245836(b_245838, ply_245839, alpha_245840, beta_245841, pv_245842) {
			var Tmp1;

	var result_245844 = {Field0: 0.0, Field1: null};

	BeforeRet: do {
		nodes_239924[0] = addInt(nodes_239924[0], 1);
		if ((qplies_239922[0] <= ply_245839)) {
		var colontmp__249382 = b_245838.score;
		var colontmp__249383 = nimCopy(null, pv_245842, NTI44040);
		nimCopy(result_245844, {Field0: colontmp__249382, Field1: nimCopy(null, colontmp__249383, NTI44040)}, NTI245843);
		break BeforeRet;
		}
		
		if (!(contains_208479(b_245838.board, 75))) {
		var colontmp__249384 = -9.9990000000000000e+03;
		var colontmp__249385 = nimCopy(null, pv_245842, NTI44040);
		nimCopy(result_245844, {Field0: colontmp__249384, Field1: nimCopy(null, colontmp__249385, NTI44040)}, NTI245843);
		break BeforeRet;
		}
		
		if (!(contains_208479(b_245838.board, 107))) {
		var colontmp__249386 = 9.9990000000000000e+03;
		var colontmp__249387 = nimCopy(null, pv_245842, NTI44040);
		nimCopy(result_245844, {Field0: colontmp__249386, Field1: nimCopy(null, colontmp__249387, NTI44040)}, NTI245843);
		break BeforeRet;
		}
		
		var moves_245868 = order_243631(b_245838, ply_245839, gen_moves_240569(b_245838));
			if (!(maxplies_239920[0] < ply_245839)) Tmp1 = false; else {				Tmp1 = isdead_243181(b_245838, moves_245868);			}		if (Tmp1) {
		var colontmp__249388 = b_245838.score;
		var colontmp__249389 = nimCopy(null, pv_245842, NTI44040);
		nimCopy(result_245844, {Field0: colontmp__249388, Field1: nimCopy(null, colontmp__249389, NTI44040)}, NTI245843);
		break BeforeRet;
		}
		
		if ((maxplies_239920[0] < ply_245839)) {
		var mov2_245872 = null;
		L2: do {
			var i_245886 = 0;
			var colontmp__249391 = 0;
			colontmp__249391 = subInt((moves_245868 != null ? moves_245868.length : 0), 1);
			var res_249392 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_249392 <= colontmp__249391)) break L4;
						i_245886 = res_249392;
						if (!((b_245838.board[chckIndx(moves_245868[chckIndx(i_245886, 0, (moves_245868 != null ? moves_245868.length : 0)+0-1)-0]["Field1"], 0, (b_245838.board != null ? b_245838.board.length : 0)+0-1)-0] == 46))) {
						if (mov2_245872 != null) { mov2_245872.push({Field0: moves_245868[chckIndx(i_245886, 0, (moves_245868 != null ? moves_245868.length : 0)+0-1)-0]["Field0"], Field1: moves_245868[chckIndx(i_245886, 0, (moves_245868 != null ? moves_245868.length : 0)+0-1)-0]["Field1"]}); } else { mov2_245872 = [{Field0: moves_245868[chckIndx(i_245886, 0, (moves_245868 != null ? moves_245868.length : 0)+0-1)-0]["Field0"], Field1: moves_245868[chckIndx(i_245886, 0, (moves_245868 != null ? moves_245868.length : 0)+0-1)-0]["Field1"]}]; };
						}
						
						res_249392 = addInt(res_249392, 1);
					}
			} while(false);
		} while(false);
		moves_245868 = nimCopy(null, mov2_245872, NTI245870);
		}
		
		if (((moves_245868 != null ? moves_245868.length : 0) == 0)) {
		var colontmp__249397 = b_245838.score;
		var colontmp__249398 = nimCopy(null, pv_245842, NTI44040);
		nimCopy(result_245844, {Field0: colontmp__249397, Field1: nimCopy(null, colontmp__249398, NTI44040)}, NTI245843);
		break BeforeRet;
		}
		
		var al_245901 = alpha_245840;
		var v_245902 = nimCopy(null, pv_245842, NTI44040);
		L5: do {
			var i_245916 = 0;
			var colontmp__249402 = 0;
			colontmp__249402 = subInt((moves_245868 != null ? moves_245868.length : 0), 1);
			var res_249403 = 0;
			L6: do {
					L7: while (true) {
					if (!(res_249403 <= colontmp__249402)) break L7;
						i_245916 = res_249403;
						var c_245917 = move_242911(b_245838, moves_245868[chckIndx(i_245916, 0, (moves_245868 != null ? moves_245868.length : 0)+0-1)-0]["Field0"], moves_245868[chckIndx(i_245916, 0, (moves_245868 != null ? moves_245868.length : 0)+0-1)-0]["Field1"]);
						var d_245918 = rotate_240449(c_245917);
						var fr_245919 = render_239949(moves_245868[chckIndx(i_245916, 0, (moves_245868 != null ? moves_245868.length : 0)+0-1)-0]["Field0"]);
						var to_245920 = render_239949(moves_245868[chckIndx(i_245916, 0, (moves_245868 != null ? moves_245868.length : 0)+0-1)-0]["Field1"]);
						var colontmp__249449 = {Field0: 0.0, Field1: null};
						var t_245921 = 0.0;
						var vv_245922 = null;
						nimCopy(colontmp__249449, searchmax_245836(d_245918, addInt(ply_245839, 1), -(beta_245841), -(al_245901), (pv_245842 || []).concat(makeNimstrLit(" ") || [],mirrmv_243061(c_245917, (fr_245919 || []).concat(to_245920 || [])) || [])), NTI245843);
						t_245921 = colontmp__249449["Field0"];
						vv_245922 = nimCopy(null, colontmp__249449["Field1"], NTI44040);
						t_245921 = -(t_245921);
						if ((beta_245841 <= t_245921)) {
						var colontmp__249400 = beta_245841;
						var colontmp__249401 = nimCopy(null, vv_245922, NTI44040);
						nimCopy(result_245844, {Field0: colontmp__249400, Field1: nimCopy(null, colontmp__249401, NTI44040)}, NTI245843);
						break BeforeRet;
						}
						
						if ((al_245901 < t_245921)) {
						al_245901 = t_245921;
						v_245902 = nimCopy(null, vv_245922, NTI44040);
						}
						
						res_249403 = addInt(res_249403, 1);
					}
			} while(false);
		} while(false);
		var colontmp__249408 = al_245901;
		var colontmp__249409 = nimCopy(null, v_245902, NTI44040);
		nimCopy(result_245844, {Field0: colontmp__249408, Field1: nimCopy(null, colontmp__249409, NTI44040)}, NTI245843);
		break BeforeRet;
	} while (false);

	return result_245844;

}

function defenders_243137(pos_243139, x_243140) {
	var result_243142 = null;

		var db_243143 = {board: nimCopy(null, pos_243139.board, NTI44040), score: pos_243139.score, wc_w: pos_243139.wc_w, wc_e: pos_243139.wc_e, bc_w: pos_243139.bc_w, bc_e: pos_243139.bc_e, ep: pos_243139.ep, kp: pos_243139.kp, lastcap: 0};
		db_243143.board[chckIndx(x_243140, 0, (db_243143.board != null ? db_243143.board.length : 0)+0-1)-0] = 112;
		var moves_243144 = gen_moves_240569(db_243143);
		L1: do {
			var n_243158 = 0;
			var colontmp__249479 = 0;
			colontmp__249479 = subInt((moves_243144 != null ? moves_243144.length : 0), 1);
			var res_249480 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_249480 <= colontmp__249479)) break L3;
						n_243158 = res_249480;
						var i_243159 = moves_243144[chckIndx(n_243158, 0, (moves_243144 != null ? moves_243144.length : 0)+0-1)-0]["Field0"];
						var j_243160 = moves_243144[chckIndx(n_243158, 0, (moves_243144 != null ? moves_243144.length : 0)+0-1)-0]["Field1"];
						if ((j_243160 == x_243140)) {
						if (result_243142 != null) { result_243142.push(i_243159); } else { result_243142 = [i_243159]; };
						}
						
						res_249480 = addInt(res_249480, 1);
					}
			} while(false);
		} while(false);

	return result_243142;

}

function HEX2DHEX3D_246068(x_246072, x_246072_Idx, y_246073) {
		x_246072[x_246072_Idx] = (x_246072[x_246072_Idx] - y_246073);

	
}

function turing_245953(s_245955) {
							var Tmp11;

	var result_245956 = [0.0];

		var bking_245957 = false;
		L1: do {
			var i_245968 = 0;
			var res_249471 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_249471 <= 119)) break L3;
						i_245968 = res_249471;
						L4: do {
							var p_245969 = s_245955.board[chckIndx(i_245968, 0, (s_245955.board != null ? s_245955.board.length : 0)+0-1)-0];
							var tt_245970 = [0.0];
							if (!(nsuIsUpperAsciiChar(p_245969))) {
							break L4;
							}
							
							var a_245971 = attacks_243079(s_245955, i_245968);
							L5: do {
								var j_245978 = 0;
								var i_249453 = 0;
								var l_249454 = (a_245971 != null ? a_245971.length : 0);
								L6: do {
										L7: while (true) {
										if (!(i_249453 < l_249454)) break L7;
											j_245978 = a_245971[chckIndx(i_249453, 0, (a_245971 != null ? a_245971.length : 0)+0-1)-0];
											if ((s_245955.board[chckIndx(j_245978, 0, (s_245955.board != null ? s_245955.board.length : 0)+0-1)-0] == 107)) {
											bking_245957 = true;
											}
											
											i_249453 = addInt(i_249453, 1);
											if (!(((a_245971 != null ? a_245971.length : 0) == l_249454))) {
											failed_assert_impl_59066(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
							if (!((p_245969 == 80))) {
							if ((0 < (a_245971 != null ? a_245971.length : 0))) {
							L8: do {
								var j_245992 = 0;
								var i_249457 = 0;
								var l_249458 = (a_245971 != null ? a_245971.length : 0);
								L9: do {
										L10: while (true) {
										if (!(i_249457 < l_249458)) break L10;
											j_245992 = a_245971[chckIndx(i_249457, 0, (a_245971 != null ? a_245971.length : 0)+0-1)-0];
											if ((s_245955.board[chckIndx(j_245992, 0, (s_245955.board != null ? s_245955.board.length : 0)+0-1)-0] == 46)) {
											HEX2BHEX3D_208861(tt_245970, 0, 1.0000000000000000e+00);
											}
											else {
											HEX2BHEX3D_208861(tt_245970, 0, 2.0000000000000000e+00);
											}
											
											i_249457 = addInt(i_249457, 1);
											if (!(((a_245971 != null ? a_245971.length : 0) == l_249458))) {
											failed_assert_impl_59066(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
							}
							
							HEX2BHEX3D_208861(result_245956, 0, Math.sqrt(tt_245970[0]));
							}
							
							if ((((p_245969 == 82) || (p_245969 == 66)) || (p_245969 == 78))) {
							var ndef_246019 = ((Tmp11 = defenders_243137(s_245955, i_245968), Tmp11) != null ? Tmp11.length : 0);
							if ((0 < ndef_246019)) {
							HEX2BHEX3D_208861(result_245956, 0, 1.0000000000000000e+00);
							}
							
							if ((1 < ndef_246019)) {
							HEX2BHEX3D_208861(result_245956, 0, 5.0000000000000000e-01);
							}
							
							}
							
							if ((p_245969 == 75)) {
							var ks_246038 = {board: nimCopy(null, s_245955.board, NTI44040), score: s_245955.score, wc_w: s_245955.wc_w, wc_e: s_245955.wc_e, bc_w: s_245955.bc_w, bc_e: s_245955.bc_e, ep: s_245955.ep, kp: s_245955.kp, lastcap: 0};
							tt_245970[0] = 0.0;
							ks_246038.board[chckIndx(i_245968, 0, (ks_246038.board != null ? ks_246038.board.length : 0)+0-1)-0] = 81;
							var ka_246039 = attacks_243079(ks_246038, i_245968);
							if ((0 < (ka_246039 != null ? ka_246039.length : 0))) {
							L12: do {
								var j_246053 = 0;
								var i_249462 = 0;
								var l_249463 = (ka_246039 != null ? ka_246039.length : 0);
								L13: do {
										L14: while (true) {
										if (!(i_249462 < l_249463)) break L14;
											j_246053 = ka_246039[chckIndx(i_249462, 0, (ka_246039 != null ? ka_246039.length : 0)+0-1)-0];
											if ((s_245955.board[chckIndx(j_246053, 0, (s_245955.board != null ? s_245955.board.length : 0)+0-1)-0] == 46)) {
											HEX2BHEX3D_208861(tt_245970, 0, 1.0000000000000000e+00);
											}
											else {
											HEX2BHEX3D_208861(tt_245970, 0, 2.0000000000000000e+00);
											}
											
											i_249462 = addInt(i_249462, 1);
											if (!(((ka_246039 != null ? ka_246039.length : 0) == l_249463))) {
											failed_assert_impl_59066(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
							}
							
							HEX2DHEX3D_246068(result_245956, 0, Math.sqrt(tt_245970[0]));
							}
							
							if ((p_245969 == 80)) {
							var rad_246089 = (((6.0000000000000000e+00 - HEX2F_71017(subInt(i_245968, 21), 10)))|0);
							HEX2BHEX3D_208861(result_245956, 0, (2.0000000000000001e-01 * rad_246089));
							var pdef_246097 = defenders_243137(s_245955, i_245968);
							var pawndef_246098 = false;
							L15: do {
								var k_246105 = 0;
								var i_249468 = 0;
								var l_249469 = (pdef_246097 != null ? pdef_246097.length : 0);
								L16: do {
										L17: while (true) {
										if (!(i_249468 < l_249469)) break L17;
											k_246105 = pdef_246097[chckIndx(i_249468, 0, (pdef_246097 != null ? pdef_246097.length : 0)+0-1)-0];
											if (!((s_245955.board[chckIndx(k_246105, 0, (s_245955.board != null ? s_245955.board.length : 0)+0-1)-0] == 80))) {
											pawndef_246098 = true;
											}
											
											i_249468 = addInt(i_249468, 1);
											if (!(((pdef_246097 != null ? pdef_246097.length : 0) == l_249469))) {
											failed_assert_impl_59066(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
							if (pawndef_246098) {
							HEX2BHEX3D_208861(result_245956, 0, 2.9999999999999999e-01);
							}
							
							}
							
						} while(false);
						res_249471 = addInt(res_249471, 1);
					}
			} while(false);
		} while(false);
		if (bking_245957) {
		HEX2BHEX3D_208861(result_245956, 0, 5.0000000000000000e-01);
		}
		

	return result_245956[0];

}

function merge_246260(a_246265, b_246268, lo_246269, m_246270, hi_246271, cmp_246275, order_246276) {
	BeforeRet: do {
		if ((HEX2A_106019(cmp_246275(a_246265[chckIndx(m_246270, 0, (a_246265 != null ? a_246265.length : 0)+0-1)-0], a_246265[chckIndx(addInt(m_246270, 1), 0, (a_246265 != null ? a_246265.length : 0)+0-1)-0]), order_246276) <= 0)) {
		break BeforeRet;
		}
		
		var j_246277 = lo_246269;
		if (!((j_246277 <= m_246270))) {
		failed_assert_impl_59066(makeNimstrLit("algorithm.nim(344, 10) `j <= m` "));
		}
		
		var bb_246602 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_246277 <= m_246270)) break L2;
					nimCopy(b_246268[chckIndx(bb_246602, 0, (b_246268 != null ? b_246268.length : 0)+0-1)-0], a_246265[chckIndx(j_246277, 0, (a_246265 != null ? a_246265.length : 0)+0-1)-0], NTI246141);
					bb_246602 = addInt(bb_246602, 1);
					j_246277 = addInt(j_246277, 1);
				}
		} while(false);
		var i_246814 = 0;
		var k_246815 = lo_246269;
		L3: do {
				L4: while (true) {
				if (!((k_246815 < j_246277) && (j_246277 <= hi_246271))) break L4;
					if ((HEX2A_106019(cmp_246275(b_246268[chckIndx(i_246814, 0, (b_246268 != null ? b_246268.length : 0)+0-1)-0], a_246265[chckIndx(j_246277, 0, (a_246265 != null ? a_246265.length : 0)+0-1)-0]), order_246276) <= 0)) {
					nimCopy(a_246265[chckIndx(k_246815, 0, (a_246265 != null ? a_246265.length : 0)+0-1)-0], b_246268[chckIndx(i_246814, 0, (b_246268 != null ? b_246268.length : 0)+0-1)-0], NTI246141);
					i_246814 = addInt(i_246814, 1);
					}
					else {
						nimCopy(a_246265[chckIndx(k_246815, 0, (a_246265 != null ? a_246265.length : 0)+0-1)-0], a_246265[chckIndx(j_246277, 0, (a_246265 != null ? a_246265.length : 0)+0-1)-0], NTI246141);
						j_246277 = addInt(j_246277, 1);
					}
					
					k_246815 = addInt(k_246815, 1);
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_246815 < j_246277)) break L6;
					nimCopy(a_246265[chckIndx(k_246815, 0, (a_246265 != null ? a_246265.length : 0)+0-1)-0], b_246268[chckIndx(i_246814, 0, (b_246268 != null ? b_246268.length : 0)+0-1)-0], NTI246141);
					k_246815 = addInt(k_246815, 1);
					i_246814 = addInt(i_246814, 1);
				}
		} while(false);
	} while (false);

	
}

function sort_246229(a_246234, cmp_246238, order_246239) {
		var n_246244 = (a_246234 != null ? a_246234.length : 0);
		var b_246246 = null;
		b_246246 = new Array(chckRange(divInt(n_246244, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_246244, 2), 0, 2147483647);++i) {b_246246[i]={Field0: 0.0, Field1: null, Field2: null, Field3: 0, Field4: 0, Field5: null};}		var s_246255 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_246255 < n_246244)) break L2;
					var m_246256 = subInt(subInt(n_246244, 1), s_246255);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_246256)) break L4;
								merge_246260(a_246234, b_246246, nimMax(addInt(subInt(m_246256, s_246255), 1), 0), m_246256, addInt(m_246256, s_246255), cmp_246238, order_246239);
								m_246256 = subInt(m_246256, mulInt(s_246255, 2));
							}
					} while(false);
					s_246255 = mulInt(s_246255, 2);
				}
		} while(false);

	
}

function my_cmp_246205(x_246209, y_246210) {
		var Tmp1;

	var result_246211 = 0;

		if ((y_246210["Field0"] < x_246209["Field0"])) {
		Tmp1 = -1;
		}
		else {
		Tmp1 = 1;
		}
		
		result_246211 = Tmp1;

	return result_246211;

}

function nucruneLen(s_117829) {
	var result_117830 = 0;

		var i_117832 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_117832 < (s_117829 != null ? s_117829.length : 0))) break L2;
					if ((s_117829[chckIndx(i_117832, 0, (s_117829 != null ? s_117829.length : 0)+0-1)-0] <= 127)) {
					i_117832 = addInt(i_117832, 1);
					}
					else {
					if ((((s_117829[chckIndx(i_117832, 0, (s_117829 != null ? s_117829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
					i_117832 = addInt(i_117832, 2);
					}
					else {
					if ((((s_117829[chckIndx(i_117832, 0, (s_117829 != null ? s_117829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
					i_117832 = addInt(i_117832, 3);
					}
					else {
					if ((((s_117829[chckIndx(i_117832, 0, (s_117829 != null ? s_117829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
					i_117832 = addInt(i_117832, 4);
					}
					else {
					if ((((s_117829[chckIndx(i_117832, 0, (s_117829 != null ? s_117829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
					i_117832 = addInt(i_117832, 5);
					}
					else {
					if ((((s_117829[chckIndx(i_117832, 0, (s_117829 != null ? s_117829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
					i_117832 = addInt(i_117832, 6);
					}
					else {
					i_117832 = addInt(i_117832, 1);
					}
					}}}}}
					result_117830 = addInt(result_117830, 1);
				}
		} while(false);

	return result_117830;

}

function rune_len_at_117961(s_117963, i_117964) {
	var result_117965 = 0;

		if ((s_117963[chckIndx(i_117964, 0, (s_117963 != null ? s_117963.length : 0)+0-1)-0] <= 127)) {
		result_117965 = 1;
		}
		else {
		if ((((s_117963[chckIndx(i_117964, 0, (s_117963 != null ? s_117963.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
		result_117965 = 2;
		}
		else {
		if ((((s_117963[chckIndx(i_117964, 0, (s_117963 != null ? s_117963.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
		result_117965 = 3;
		}
		else {
		if ((((s_117963[chckIndx(i_117964, 0, (s_117963 != null ? s_117963.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
		result_117965 = 4;
		}
		else {
		if ((((s_117963[chckIndx(i_117964, 0, (s_117963 != null ? s_117963.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
		result_117965 = 5;
		}
		else {
		if ((((s_117963[chckIndx(i_117964, 0, (s_117963 != null ? s_117963.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
		result_117965 = 6;
		}
		else {
			result_117965 = 1;
		}
		}}}}}

	return result_117965;

}

function rune_offset_123644(s_123646, pos_123647, start_123648) {
	var result_123649 = 0;

	BeforeRet: do {
		var i_123651 = 0;
		var o_123652 = start_123648;
		L1: do {
				L2: while (true) {
				if (!(i_123651 < pos_123647)) break L2;
					o_123652 = addInt(o_123652, chckRange(rune_len_at_117961(s_123646, o_123652), 0, 2147483647));
					if (((s_123646 != null ? s_123646.length : 0) <= o_123652)) {
					result_123649 = -1;
					break BeforeRet;
					}
					
					i_123651 = addInt(i_123651, 1);
				}
		} while(false);
		result_123649 = o_123652;
		break BeforeRet;
	} while (false);

	return result_123649;

}

function validate_utf8_120829(s_120831) {
						var Tmp3;
						var Tmp4;
						var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;

	var result_120832 = 0;

	BeforeRet: do {
		var i_120834 = 0;
		var l_120835 = (s_120831 != null ? s_120831.length : 0);
		L1: do {
				L2: while (true) {
				if (!(i_120834 < l_120835)) break L2;
					if ((s_120831[chckIndx(i_120834, 0, (s_120831 != null ? s_120831.length : 0)+0-1)-0] <= 127)) {
					i_120834 = addInt(i_120834, 1);
					}
					else {
					if ((((s_120831[chckIndx(i_120834, 0, (s_120831 != null ? s_120831.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((s_120831[chckIndx(i_120834, 0, (s_120831 != null ? s_120831.length : 0)+0-1)-0] < 194)) {
					result_120832 = i_120834;
					break BeforeRet;
					}
					
						if (!(addInt(i_120834, 1) < l_120835)) Tmp3 = false; else {							Tmp3 = (((s_120831[chckIndx(addInt(i_120834, 1), 0, (s_120831 != null ? s_120831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp3) {
					i_120834 = addInt(i_120834, 2);
					}
					else {
						result_120832 = i_120834;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_120831[chckIndx(i_120834, 0, (s_120831 != null ? s_120831.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
						if (!(addInt(i_120834, 2) < l_120835)) Tmp5 = false; else {							Tmp5 = (((s_120831[chckIndx(addInt(i_120834, 1), 0, (s_120831 != null ? s_120831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp5) Tmp4 = false; else {							Tmp4 = (((s_120831[chckIndx(addInt(i_120834, 2), 0, (s_120831 != null ? s_120831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp4) {
					i_120834 = addInt(i_120834, 3);
					}
					else {
						result_120832 = i_120834;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_120831[chckIndx(i_120834, 0, (s_120831 != null ? s_120831.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
						if (!(addInt(i_120834, 3) < l_120835)) Tmp8 = false; else {							Tmp8 = (((s_120831[chckIndx(addInt(i_120834, 1), 0, (s_120831 != null ? s_120831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (((s_120831[chckIndx(addInt(i_120834, 2), 0, (s_120831 != null ? s_120831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (((s_120831[chckIndx(addInt(i_120834, 3), 0, (s_120831 != null ? s_120831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp6) {
					i_120834 = addInt(i_120834, 4);
					}
					else {
						result_120832 = i_120834;
						break BeforeRet;
					}
					
					}
					else {
						result_120832 = i_120834;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		result_120832 = -1;
		break BeforeRet;
	} while (false);

	return result_120832;

}

function align_string_228223(s_228225, minimum_width_228226, align_228227, fill_228228) {
			var Tmp1;

	var result_228229 = null;

		if ((minimum_width_228226 == 0)) {
		result_228229 = nimCopy(null, s_228225, NTI44040);
		}
		else {
			if ((validate_utf8_120829(s_228225) == -1)) {
			Tmp1 = nucruneLen(s_228225);
			}
			else {
			Tmp1 = (s_228225 != null ? s_228225.length : 0);
			}
			
			var s_rune_len_228231 = Tmp1;
			var to_fill_228232 = subInt(minimum_width_228226, s_rune_len_228231);
			if ((to_fill_228232 <= 0)) {
			result_228229 = nimCopy(null, s_228225, NTI44040);
			}
			else {
			if (((align_228227 == 60) || (align_228227 == 0))) {
			result_228229 = nimCopy(null, (s_228225 || []).concat(nsuRepeatChar(fill_228228, chckRange(to_fill_228232, 0, 2147483647)) || []), NTI44040);
			}
			else {
			if ((align_228227 == 94)) {
			var half_228233 = divInt(to_fill_228232, 2);
			result_228229 = nimCopy(null, (nsuRepeatChar(fill_228228, chckRange(half_228233, 0, 2147483647)) || []).concat(s_228225 || [],nsuRepeatChar(fill_228228, chckRange(subInt(to_fill_228232, half_228233), 0, 2147483647)) || []), NTI44040);
			}
			else {
				result_228229 = nimCopy(null, (nsuRepeatChar(fill_228228, chckRange(to_fill_228232, 0, 2147483647)) || []).concat(s_228225 || []), NTI44040);
			}
			}}
		}
		

	return result_228229;

}

function format_value_228688(result_228691, result_228691_Idx, value_228692, specifier_228693) {
		var spec_228694 = parse_standard_format_specifier_228324(specifier_228693, 0, false);
		var value_228695 = nimCopy(null, value_228692, NTI44040);
		switch (spec_228694.typ) {
		case 115:
		case 0:
			break;
		default: 
			var eHEX60gensym228698_228803 = null;
			eHEX60gensym228698_228803 = {m_type: NTI47452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym228698_228803.message = nimCopy(null, (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_228694.typ]), NTI44040);
			eHEX60gensym228698_228803.parent = null;
			raiseException(eHEX60gensym228698_228803, "ValueError");
			break;
		}
		if (!((spec_228694.precision == -1))) {
		if ((spec_228694.precision < nucruneLen(value_228695))) {
		(value_228695 == null ? value_228695 = mnewString(chckRange(rune_offset_123644(value_228695, chckRange(spec_228694.precision, 0, 2147483647), 0), 0, 2147483647)) : value_228695.length = chckRange(rune_offset_123644(value_228695, chckRange(spec_228694.precision, 0, 2147483647), 0), 0, 2147483647));
		}
		
		}
		
		if (result_228691[result_228691_Idx] != null) { result_228691[result_228691_Idx] = (result_228691[result_228691_Idx]).concat(align_string_228223(value_228695, spec_228694.minimumWidth, spec_228694.align, spec_228694.fill)); } else { result_228691[result_228691_Idx] = align_string_228223(value_228695, spec_228694.minimumWidth, spec_228694.align, spec_228694.fill).slice(); };

	
}

function getmove_246133(b_246135, output_246136) {
	var result_246137 = null;

		nodes_239924[0] = 0;
		var start_246138 = epoch_time_227201();
		var moves_246139 = gen_moves_240569(b_246135);
		var ll_246142 = null;
		L1: do {
			var i_246156 = 0;
			var colontmp__249314 = 0;
			colontmp__249314 = subInt((moves_246139 != null ? moves_246139.length : 0), 1);
			var res_249315 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_249315 <= colontmp__249314)) break L3;
						i_246156 = res_249315;
						var fr_246157 = render_239949(moves_246139[chckIndx(i_246156, 0, (moves_246139 != null ? moves_246139.length : 0)+0-1)-0]["Field0"]);
						var to_246158 = render_239949(moves_246139[chckIndx(i_246156, 0, (moves_246139 != null ? moves_246139.length : 0)+0-1)-0]["Field1"]);
						var castle_246159 = [0.0];
						if (((b_246135.board[chckIndx(moves_246139[chckIndx(i_246156, 0, (moves_246139 != null ? moves_246139.length : 0)+0-1)-0]["Field0"], 0, (b_246135.board != null ? b_246135.board.length : 0)+0-1)-0] == 75) && (absInt(subInt(moves_246139[chckIndx(i_246156, 0, (moves_246139 != null ? moves_246139.length : 0)+0-1)-0]["Field0"], moves_246139[chckIndx(i_246156, 0, (moves_246139 != null ? moves_246139.length : 0)+0-1)-0]["Field1"])) == 2))) {
						HEX2BHEX3D_208861(castle_246159, 0, 1.0000000000000000e+00);
						}
						
						var c_246167 = move_242911(b_246135, moves_246139[chckIndx(i_246156, 0, (moves_246139 != null ? moves_246139.length : 0)+0-1)-0]["Field0"], moves_246139[chckIndx(i_246156, 0, (moves_246139 != null ? moves_246139.length : 0)+0-1)-0]["Field1"]);
						if (isblack_242961(c_246167)) {
						if ((c_246167.bc_w || c_246167.bc_e)) {
						HEX2BHEX3D_208861(castle_246159, 0, 1.0000000000000000e+00);
						}
						
						}
						else {
							if ((c_246167.wc_w || c_246167.wc_e)) {
							HEX2BHEX3D_208861(castle_246159, 0, 1.0000000000000000e+00);
							}
							
						}
						
						var d_246182 = rotate_240449(c_246167);
						var colontmp__249381 = {Field0: 0.0, Field1: null};
						var t_246183 = 0.0;
						var pv_246184 = null;
						nimCopy(colontmp__249381, searchmax_245836(d_246182, 2, -1.0000000000000000e+06, 1.0000000000000000e+06, mirrmv_243061(c_246167, (fr_246157 || []).concat(to_246158 || []))), NTI245843);
						t_246183 = colontmp__249381["Field0"];
						pv_246184 = nimCopy(null, colontmp__249381["Field1"], NTI44040);
						t_246183 = -(t_246183);
						if (output_246136) {
						rawEcho(fr_246157, to_246158, makeNimstrLit(" "), cstrToNimstr((t_246183)+""), makeNimstrLit(" "), cstrToNimstr((turing_245953(c_246167))+""), makeNimstrLit(" "), pv_246184);
						}
						
						if (ll_246142 != null) { ll_246142.push({Field0: (t_246183 + ((turing_245953(c_246167) + castle_246159[0]) / 1.0000000000000000e+03)), Field1: nimCopy(null, fr_246157, NTI44040), Field2: nimCopy(null, to_246158, NTI44040), Field3: moves_246139[chckIndx(i_246156, 0, (moves_246139 != null ? moves_246139.length : 0)+0-1)-0]["Field0"], Field4: moves_246139[chckIndx(i_246156, 0, (moves_246139 != null ? moves_246139.length : 0)+0-1)-0]["Field1"], Field5: nimCopy(null, pv_246184, NTI44040)}); } else { ll_246142 = [{Field0: (t_246183 + ((turing_245953(c_246167) + castle_246159[0]) / 1.0000000000000000e+03)), Field1: nimCopy(null, fr_246157, NTI44040), Field2: nimCopy(null, to_246158, NTI44040), Field3: moves_246139[chckIndx(i_246156, 0, (moves_246139 != null ? moves_246139.length : 0)+0-1)-0]["Field0"], Field4: moves_246139[chckIndx(i_246156, 0, (moves_246139 != null ? moves_246139.length : 0)+0-1)-0]["Field1"], Field5: nimCopy(null, pv_246184, NTI44040)}]; };
						res_249315 = addInt(res_249315, 1);
					}
			} while(false);
		} while(false);
		sort_246229(ll_246142, my_cmp_246205, 1);
		var diff_247675 = (epoch_time_227201() - start_246138);
		var nps_247676 = (((nodes_239924[0] / diff_247675))|0);
		var fmt_res_247677 = [mnewString(0)];
		if (fmt_res_247677[0] != null) { fmt_res_247677[0] = (fmt_res_247677[0]).concat(makeNimstrLit("info depth ")); } else { fmt_res_247677[0] = makeNimstrLit("info depth "); };
		format_value_239969(fmt_res_247677, 0, maxplies_239920[0], []);
		if (fmt_res_247677[0] != null) { fmt_res_247677[0] = (fmt_res_247677[0]).concat(makeNimstrLit(" seldepth ")); } else { fmt_res_247677[0] = makeNimstrLit(" seldepth "); };
		format_value_239969(fmt_res_247677, 0, qplies_239922[0], []);
		if (fmt_res_247677[0] != null) { fmt_res_247677[0] = (fmt_res_247677[0]).concat(makeNimstrLit(" score cp ")); } else { fmt_res_247677[0] = makeNimstrLit(" score cp "); };
		format_value_239969(fmt_res_247677, 0, (((1.0000000000000000e+02 * ll_246142[chckIndx(0, 0, (ll_246142 != null ? ll_246142.length : 0)+0-1)-0]["Field0"]))|0), []);
		if (fmt_res_247677[0] != null) { fmt_res_247677[0] = (fmt_res_247677[0]).concat(makeNimstrLit(" time ")); } else { fmt_res_247677[0] = makeNimstrLit(" time "); };
		format_value_239969(fmt_res_247677, 0, (((1.0000000000000000e+03 * diff_247675))|0), []);
		if (fmt_res_247677[0] != null) { fmt_res_247677[0] = (fmt_res_247677[0]).concat(makeNimstrLit(" nodes ")); } else { fmt_res_247677[0] = makeNimstrLit(" nodes "); };
		format_value_239969(fmt_res_247677, 0, nodes_239924[0], []);
		if (fmt_res_247677[0] != null) { fmt_res_247677[0] = (fmt_res_247677[0]).concat(makeNimstrLit(" nps ")); } else { fmt_res_247677[0] = makeNimstrLit(" nps "); };
		format_value_239969(fmt_res_247677, 0, nps_247676, []);
		if (fmt_res_247677[0] != null) { fmt_res_247677[0] = (fmt_res_247677[0]).concat(makeNimstrLit(" pv ")); } else { fmt_res_247677[0] = makeNimstrLit(" pv "); };
		format_value_228688(fmt_res_247677, 0, ll_246142[chckIndx(0, 0, (ll_246142 != null ? ll_246142.length : 0)+0-1)-0]["Field5"], []);
		rawEcho(fmt_res_247677[0]);
		result_246137 = nimCopy(null, (ll_246142[chckIndx(0, 0, (ll_246142 != null ? ll_246142.length : 0)+0-1)-0]["Field1"] || []).concat(ll_246142[chckIndx(0, 0, (ll_246142 != null ? ll_246142.length : 0)+0-1)-0]["Field2"] || []), NTI44040);
		if ((((b_246135.board[chckIndx(ll_246142[chckIndx(0, 0, (ll_246142 != null ? ll_246142.length : 0)+0-1)-0]["Field3"], 0, (b_246135.board != null ? b_246135.board.length : 0)+0-1)-0] == 80) && (21 <= ll_246142[chckIndx(0, 0, (ll_246142 != null ? ll_246142.length : 0)+0-1)-0]["Field4"])) && (ll_246142[chckIndx(0, 0, (ll_246142 != null ? ll_246142.length : 0)+0-1)-0]["Field4"] <= 28))) {
		result_246137 = nimCopy(null, (result_246137 || []).concat(makeNimstrLit("q") || []), NTI44040);
		}
		

	return result_246137;

}

function fen_to_move_248014(fen_248016) {

		function getgame_fen_248020(x_248022) {
					var Tmp1;

			var result_248023 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

			BeforeRet: do {
				var inv_248024 = false;
				var l_248025 = nimCopy(null, x_248022, NTI44040);
				var ff_248432 = HEX5BHEX5D_248047(nsuSplitString(l_248025, makeNimstrLit(" "), -1), HEX2EHEX2E_126220(2, 7));
				var ff2_248433 = nsuJoinSep(ff_248432, makeNimstrLit(" "));
				var b_248434 = fromfen_240486(ff2_248433);
				if (contains_207277(ff2_248433, makeNimstrLit(" w "))) {
				side_248019 = true;
				inv_248024 = false;
				}
				else {
					side_248019 = false;
					inv_248024 = true;
				}
				
				if ((8 < ((Tmp1 = nsuSplitString(l_248025, makeNimstrLit(" "), -1), Tmp1) != null ? Tmp1.length : 0))) {
				var mm_248836 = HEX5BHEX5D_248463(nsuSplitString(l_248025, makeNimstrLit(" "), -1), HEX2EHEX2E_153239(9, 1));
				L2: do {
					var i_249014 = null;
					var i_249136 = 0;
					var l_249137 = (mm_248836 != null ? mm_248836.length : 0);
					L3: do {
							L4: while (true) {
							if (!(i_249136 < l_249137)) break L4;
								i_249014 = mm_248836[chckIndx(i_249136, 0, (mm_248836 != null ? mm_248836.length : 0)+0-1)-0];
								var fr_249050 = parse_240290(HEX5BHEX5D_126281(i_249014, HEX2EHEX2E_126220(0, 1)), inv_248024);
								var to_249086 = parse_240290(HEX5BHEX5D_126281(i_249014, HEX2EHEX2E_126220(2, 3)), inv_248024);
								var c_249087 = move_242911(b_248434, fr_249050, to_249086);
								side_248019 = !(side_248019);
								var d_249088 = rotate_240449(c_249087);
								nimCopy(b_248434, d_249088, NTI239926);
								inv_248024 = !(inv_248024);
								i_249136 = addInt(i_249136, 1);
								if (!(((mm_248836 != null ? mm_248836.length : 0) == l_249137))) {
								failed_assert_impl_59066(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
								}
								
							}
					} while(false);
				} while(false);
				}
				
				nimCopy(result_248023, b_248434, NTI239926);
				break BeforeRet;
			} while (false);

			return result_248023;

		}

	var result_248017 = null;

	BeforeRet: do {
		var b_248018 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};
		var side_248019 = true;
		nimCopy(b_248018, getgame_fen_248020((makeNimstrLit("position fen ") || []).concat(fen_248016 || [])), NTI239926);
		var m_249102 = getmove_246133(b_248018, false);
		if (!(side_248019)) {
		m_249102 = nimCopy(null, mirror_242978(m_249102), NTI44040);
		}
		
		result_248017 = nimCopy(null, m_249102, NTI44040);
		break BeforeRet;
	} while (false);

	return result_248017;

}

/* web worker code */

self.addEventListener('message', function(e) {
	self.postMessage(toJSStr(fen_to_move_248014(makeNimstrLit(e.data))));
}, false);


