/* Generated by the Nim Compiler v1.6.4 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI587205178 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI587205083 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI587205082 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI587205069 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI587204448 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI587202578 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI587202573 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI587204848 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555126 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI905969736 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI905969743 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI33554435 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI587204073 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI771751997 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI603980150 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555124.base = NTI33555113;
NTI603980150.base = NTI33554439;
var NNI771751997 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI771751997.node = NNI771751997;
var NNI587204073 = {kind: 2, len: 9, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "board", len: 0, typ: NTI33554439, name: "board", sons: null}, 
{kind: 1, offset: "score", len: 0, typ: NTI33554435, name: "score", sons: null}, 
{kind: 1, offset: "wc_w", len: 0, typ: NTI33554466, name: "wc_w", sons: null}, 
{kind: 1, offset: "wc_e", len: 0, typ: NTI33554466, name: "wc_e", sons: null}, 
{kind: 1, offset: "bc_w", len: 0, typ: NTI33554466, name: "bc_w", sons: null}, 
{kind: 1, offset: "bc_e", len: 0, typ: NTI33554466, name: "bc_e", sons: null}, 
{kind: 1, offset: "ep", len: 0, typ: NTI33554456, name: "ep", sons: null}, 
{kind: 1, offset: "kp", len: 0, typ: NTI33554456, name: "kp", sons: null}, 
{kind: 1, offset: "lastcap", len: 0, typ: NTI33554456, name: "lastcap", sons: null}]};
NTI587204073.node = NNI587204073;
var NNI905969743 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI905969736, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI905969743.node = NNI905969743;
var NNI33555126 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555126.node = NNI33555126;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
NTI33555126.base = NTI33555125;
var NNI587204848 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554435, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554456, name: "Field2", sons: null}]};
NTI587204848.node = NNI587204848;
NTI587202573.base = NTI587202578;
var NNI587204448 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554466, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554466, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554466, name: "Field2", sons: null}]};
NTI587204448.node = NNI587204448;
var NNI587205069 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554435, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}]};
NTI587205069.node = NNI587205069;
var NNI587205083 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554456, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}]};
NTI587205083.node = NNI587205083;
NTI587205082.base = NTI587205083;
var NNI587205178 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554435, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554439, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI33554456, name: "Field3", sons: null}, 
{kind: 1, offset: "Field4", len: 0, typ: NTI33554456, name: "Field4", sons: null}, 
{kind: 1, offset: "Field5", len: 0, typ: NTI33554439, name: "Field5", sons: null}]};
NTI587205178.node = NNI587205178;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557141, src_33557142, ti_33557143) {
  var result_33557152 = null;

    switch (ti_33557143.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557132(ti_33557143))) {
      result_33557152 = src_33557142;
      }
      else {
        result_33557152 = [src_33557142[0], src_33557142[1]];
      }
      
      break;
    case 19:
            if (dest_33557141 === null || dest_33557141 === undefined) {
        dest_33557141 = {};
      }
      else {
        for (var key in dest_33557141) { delete dest_33557141[key]; }
      }
      for (var key in src_33557142) { dest_33557141[key] = src_33557142[key]; }
      result_33557152 = dest_33557141;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557143.base == null))) {
      result_33557152 = nimCopy(dest_33557141, src_33557142, ti_33557143.base);
      }
      else {
      if ((ti_33557143.kind == 17)) {
      result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {m_type: ti_33557143} : dest_33557141;
      }
      else {
        result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {} : dest_33557141;
      }
      }
      nimCopyAux(result_33557152, src_33557142, ti_33557143.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557142 === null) {
        result_33557152 = null;
      }
      else {
        if (dest_33557141 === null || dest_33557141 === undefined || dest_33557141.length != src_33557142.length) {
          dest_33557141 = new Array(src_33557142.length);
        }
        result_33557152 = dest_33557141;
        for (var i = 0; i < src_33557142.length; ++i) {
          result_33557152[i] = nimCopy(result_33557152[i], src_33557142[i], ti_33557143.base);
        }
      }
    
      break;
    case 28:
            if (src_33557142 !== null) {
        result_33557152 = src_33557142.slice(0);
      }
    
      break;
    default: 
      result_33557152 = src_33557142;
      break;
    }

  return result_33557152;

}

function makeNimstrLit(c_33556802) {
      var result = [];
  for (var i = 0; i < c_33556802.length; ++i) {
    result[i] = c_33556802.charCodeAt(i);
  }
  return result;
  

  
}

function toJSStr(s_33556808) {
                    var Temporary5;
            var Temporary7;

  var result_33556809 = null;

    var res_33556843 = newSeq_33556826((s_33556808).length);
    var i_33556844 = 0;
    var j_33556845 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556844 < (s_33556808).length)) break Label2;
          var c_33556846 = s_33556808[i_33556844];
          if ((c_33556846 < 128)) {
          res_33556843[j_33556845] = String.fromCharCode(c_33556846);
          i_33556844 += 1;
          }
          else {
            var helper_33556858 = newSeq_33556826(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556859 = c_33556846.toString(16);
                  if ((((code_33556859) == null ? 0 : (code_33556859).length) == 1)) {
                  helper_33556858.push("%0");;
                  }
                  else {
                  helper_33556858.push("%");;
                  }
                  
                  helper_33556858.push(code_33556859);;
                  i_33556844 += 1;
                    if (((s_33556808).length <= i_33556844)) Temporary5 = true; else {                      Temporary5 = (s_33556808[i_33556844] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556846 = s_33556808[i_33556844];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556843[j_33556845] = decodeURIComponent(helper_33556858.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556843[j_33556845] = helper_33556858.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556845 += 1;
        }
    } while (false);
    if (res_33556843.length < j_33556845) { for (var i = res_33556843.length ; i < j_33556845 ; ++i) res_33556843.push(null); }
               else { res_33556843.length = j_33556845; };
    result_33556809 = res_33556843.join("");

  return result_33556809;

}

function raiseException(e_33556668, ename_33556669) {
    e_33556668.name = ename_33556669;
    if ((excHandler == 0)) {
    unhandledException(e_33556668);
    }
    
    throw e_33556668;

  
}

function nimMax(a_33556999, b_33557000) {
    var Temporary1;

  var result_33557001 = 0;

  BeforeRet: do {
    if ((b_33557000 <= a_33556999)) {
    Temporary1 = a_33556999;
    }
    else {
    Temporary1 = b_33557000;
    }
    
    result_33557001 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557001;

}

function nimMin(a_33556995, b_33556996) {
    var Temporary1;

  var result_33556997 = 0;

  BeforeRet: do {
    if ((a_33556995 <= b_33556996)) {
    Temporary1 = a_33556995;
    }
    else {
    Temporary1 = b_33556996;
    }
    
    result_33556997 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556997;

}

function mnewString(len_33556894) {
        return new Array(len_33556894);
  

  
}

function eqStrings(a_33556932, b_33556933) {
        if (a_33556932 == b_33556933) return true;
    if (a_33556932 === null && b_33556933.length == 0) return true;
    if (b_33556933 === null && a_33556932.length == 0) return true;
    if ((!a_33556932) || (!b_33556933)) return false;
    var alen = a_33556932.length;
    if (alen != b_33556933.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556932[i] != b_33556933[i]) return false;
    return true;
  

  
}
    var toLowerRanges_956302233 = new Int32Array([65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534]);
    var toLowerSinglets_956302234 = new Int32Array([256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884]);
    var toUpperRanges_956302235 = new Int32Array([97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466]);
    var toUpperSinglets_956302236 = new Int32Array([181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428]);
var ConstSet2 = setConstr([97, 122]);

function nimCharToStr(x_33556518) {
  var result_33556519 = [];

    result_33556519 = nimCopy(null, mnewString(1), NTI33554439);
    result_33556519[0] = x_33556518;

  return result_33556519;

}
    var piece_587205357 = {data: [{Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 1873452705, Field1: 78, Field2: 3.0}, {Field0: -1675931886, Field1: 82, Field2: 5.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: -1396828360, Field1: 80, Field2: 1.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 1552342250, Field1: 66, Field2: 3.5}, {Field0: 150585179, Field1: 81, Field2: 10.0}, {Field0: 431045338, Field1: 75, Field2: 1000.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6};
var ConstSet3 = setConstr([97, 122]);
            var piece_type_587205362 = {data: [{Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 1873452705, Field1: 78, Field2: 2.0}, {Field0: -1675931886, Field1: 82, Field2: 4.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: -1396828360, Field1: 80, Field2: 1.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 1552342250, Field1: 66, Field2: 3.0}, {Field0: 150585179, Field1: 81, Field2: 5.0}, {Field0: 431045338, Field1: 75, Field2: 6.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6};
var ConstSet4 = setConstr([65, 90]);
                var dirs_587203975 = {data: [{Field0: 0, Field1: 0, Field2: new Int32Array([0, 0, 0, 0, 0, 0, 0, 0])}, {Field0: 1873452705, Field1: 78, Field2: new Int32Array([-19, -8, 12, 21, 19, 8, -12, -21])}, {Field0: -1675931886, Field1: 82, Field2: new Int32Array([-10, 1, 10, -1, 0, 0, 0, 0])}, {Field0: 0, Field1: 0, Field2: new Int32Array([0, 0, 0, 0, 0, 0, 0, 0])}, {Field0: 0, Field1: 0, Field2: new Int32Array([0, 0, 0, 0, 0, 0, 0, 0])}, {Field0: 0, Field1: 0, Field2: new Int32Array([0, 0, 0, 0, 0, 0, 0, 0])}, {Field0: 0, Field1: 0, Field2: new Int32Array([0, 0, 0, 0, 0, 0, 0, 0])}, {Field0: 0, Field1: 0, Field2: new Int32Array([0, 0, 0, 0, 0, 0, 0, 0])}, {Field0: -1396828360, Field1: 80, Field2: new Int32Array([-10, -20, -11, -9, 0, 0, 0, 0])}, {Field0: 0, Field1: 0, Field2: new Int32Array([0, 0, 0, 0, 0, 0, 0, 0])}, {Field0: 1552342250, Field1: 66, Field2: new Int32Array([-9, 11, 9, -11, 0, 0, 0, 0])}, {Field0: 150585179, Field1: 81, Field2: new Int32Array([-10, 1, 10, -1, -9, 11, 9, -11])}, {Field0: 431045338, Field1: 75, Field2: new Int32Array([-10, 1, 10, -1, -9, 11, 9, -11])}, {Field0: 0, Field1: 0, Field2: new Int32Array([0, 0, 0, 0, 0, 0, 0, 0])}, {Field0: 0, Field1: 0, Field2: new Int32Array([0, 0, 0, 0, 0, 0, 0, 0])}, {Field0: 0, Field1: 0, Field2: new Int32Array([0, 0, 0, 0, 0, 0, 0, 0])}], counter: 6};
var ConstSet5 = setConstr(32, 9, 11, 13, 10, 12);

function addChar(x_33557256, c_33557257) {
    x_33557256.push(c_33557257);

  
}
var ConstSet6 = setConstr(60, 62, 94);
var ConstSet7 = setConstr(60, 62, 94);
var ConstSet8 = setConstr(45, 43, 32);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([48, 57]);
var ConstSet11 = setConstr([48, 57]);
var ConstSet12 = setConstr([65, 90], [97, 122]);

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_687866018 = [0];
if (globalThis.utcInstance_637535594 === undefined) {
  globalThis.utcInstance_637535594 = [null];
}
if (globalThis.localInstance_637535595 === undefined) {
  globalThis.localInstance_637535595 = [null];
}
var MAXPLIES_587205363 = [2];
var QPLIES_587205364 = [8];
var NODES_587205365 = [0];

function isFatPointer_33557132(ti_33557133) {
  var result_33557134 = false;

  BeforeRet: do {
    result_33557134 = !((ConstSet1[ti_33557133.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557134;

}

function nimCopyAux(dest_33557145, src_33557146, n_33557147) {
    switch (n_33557147.kind) {
    case 0:
      break;
    case 1:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557147.sons.length; i++) {
      nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i]);
    }
    
      break;
    case 3:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
      for (var i = 0; i < n_33557147.sons.length; ++i) {
        nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i][1]);
      }
    
      break;
    }

  
}

function HEX5BHEX5D_452984854(s_452984858, x_452984859) {
  var result_452984860 = [];

    var a_452984862 = x_452984859.a;
    var L_452984864 = ((x_452984859.b - a_452984862) + 1);
    result_452984860 = new Array(L_452984864); for (var i = 0 ; i < L_452984864 ; ++i) { result_452984860[i] = []; }    Label1: do {
      var i_452984873 = 0;
      var i_452984980 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452984980 < L_452984864)) break Label3;
            i_452984873 = i_452984980;
            result_452984860[i_452984873] = nimCopy(null, s_452984858[(i_452984873 + a_452984862)], NTI33554439);
            i_452984980 += 1;
          }
      } while (false);
    } while (false);

  return result_452984860;

}

function add_33556420(x_33556421, x_33556421_Idx, y_33556422) {
          if (x_33556421[x_33556421_Idx] === null) { x_33556421[x_33556421_Idx] = []; }
      var off = x_33556421[x_33556421_Idx].length;
      x_33556421[x_33556421_Idx].length += y_33556422.length;
      for (var i = 0; i < y_33556422.length; ++i) {
        x_33556421[x_33556421_Idx][off+i] = y_33556422.charCodeAt(i);
      }
    

  
}

function newSeq_33556826(len_33556828) {
  var result_33556829 = [];

    result_33556829 = new Array(len_33556828); for (var i = 0 ; i < len_33556828 ; ++i) { result_33556829[i] = null; }
  return result_33556829;

}

function unhandledException(e_33556664) {
    var buf_33556665 = [[]];
    if (!(((e_33556664.message).length == 0))) {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556665[0].push.apply(buf_33556665[0], e_33556664.message);;
    }
    else {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit(" ["));;
    add_33556420(buf_33556665, 0, e_33556664.name);
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556666 = toJSStr(buf_33556665[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556666);
  }
  else {
    throw cbuf_33556666;
  }
  

  
}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function substrEq_603980005(s_603980006, pos_603980007, substr_603980008) {
  var result_603980009 = false;

  BeforeRet: do {
    var i_603980010 = 0;
    var length_603980011 = (substr_603980008).length;
    Label1: do {
        Label2: while (true) {
        if (!(((i_603980010 < length_603980011) && ((pos_603980007 + i_603980010) < (s_603980006).length)) && (s_603980006[(pos_603980007 + i_603980010)] == substr_603980008[i_603980010]))) break Label2;
          i_603980010 += 1;
        }
    } while (false);
    result_603980009 = (i_603980010 == length_603980011);
    break BeforeRet;
  } while (false);

  return result_603980009;

}

function substr_33557907(s_33557908, first_33557909, last_33557910) {
  var result_33557911 = [];

    var first_33557912 = nimMax(first_33557909, 0);
    var L_33557913 = nimMax(((nimMin(last_33557910, (s_33557908).length - 1) - first_33557912) + 1), 0);
    result_33557911 = nimCopy(null, mnewString(L_33557913), NTI33554439);
    Label1: do {
      var i_33557918 = 0;
      var colontmp__452984994 = 0;
      colontmp__452984994 = (L_33557913 - 1);
      var res_452984995 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452984995 <= colontmp__452984994)) break Label3;
            i_33557918 = res_452984995;
            result_33557911[i_33557918] = s_33557908[(i_33557918 + first_33557912)];
            res_452984995 += 1;
          }
      } while (false);
    } while (false);

  return result_33557911;

}

function nsuSplitString(s_603980295, sep_603980296, maxsplit_603980297) {
  var result_603980298 = [];

    if (!((0 < (sep_603980296).length))) {
    failedAssertImpl_218103864(makeNimstrLit("strutils.nim(739, 11) `sep.len > 0` "));
    }
    
    result_603980298 = nimCopy(null, [], NTI603980150);
    Label1: do {
      var xHEX60gensym72_603980309 = [];
      var lastHEX60gensym41_452984985 = 0;
      var splitsHEX60gensym41_452984986 = maxsplit_603980297;
      Label2: do {
          Label3: while (true) {
          if (!(lastHEX60gensym41_452984985 <= (s_603980295).length)) break Label3;
            var firstHEX60gensym41_452984988 = lastHEX60gensym41_452984985;
            Label4: do {
                Label5: while (true) {
                if (!((lastHEX60gensym41_452984985 < (s_603980295).length) && !(substrEq_603980005(s_603980295, lastHEX60gensym41_452984985, sep_603980296)))) break Label5;
                  lastHEX60gensym41_452984985 += 1;
                }
            } while (false);
            if ((splitsHEX60gensym41_452984986 == 0)) {
            lastHEX60gensym41_452984985 = (s_603980295).length;
            }
            
            xHEX60gensym72_603980309 = substr_33557907(s_603980295, firstHEX60gensym41_452984988, (lastHEX60gensym41_452984985 - 1));
            var Temporary6 = nimCopy(null, xHEX60gensym72_603980309, NTI33554439);
            result_603980298.push(Temporary6);;
            if ((splitsHEX60gensym41_452984986 == 0)) {
            break Label2;
            }
            
            splitsHEX60gensym41_452984986 -= 1;
            lastHEX60gensym41_452984985 += (sep_603980296).length;
          }
      } while (false);
    } while (false);

  return result_603980298;

}

function HEX2EHEX2E_956302161(a_956302164, b_956302165) {
  var result_956302166 = ({a: 0, b: 0});

    result_956302166 = nimCopy(result_956302166, {a: a_956302164, b: b_956302165}, NTI771751997);

  return result_956302166;

}

function nsuJoinSep(a_603981140, sep_603981141) {
  var result_603981142 = [];

    if ((0 < (a_603981140).length)) {
    var L_603981149 = ((sep_603981141).length * ((a_603981140).length - 1));
    Label1: do {
      var i_603981157 = 0;
      var colontmp__452984998 = 0;
      colontmp__452984998 = (a_603981140).length - 1;
      var res_452984999 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452984999 <= colontmp__452984998)) break Label3;
            i_603981157 = res_452984999;
            L_603981149 += (a_603981140[i_603981157]).length;
            res_452984999 += 1;
          }
      } while (false);
    } while (false);
    result_603981142 = nimCopy(null, mnewString(0), NTI33554439);
    result_603981142.push.apply(result_603981142, a_603981140[0]);;
    Label4: do {
      var i_603981169 = 0;
      var colontmp__452985002 = 0;
      colontmp__452985002 = (a_603981140).length - 1;
      var res_452985003 = 1;
      Label5: do {
          Label6: while (true) {
          if (!(res_452985003 <= colontmp__452985002)) break Label6;
            i_603981169 = res_452985003;
            result_603981142.push.apply(result_603981142, sep_603981141);;
            result_603981142.push.apply(result_603981142, a_603981140[i_603981169]);;
            res_452985003 += 1;
          }
      } while (false);
    } while (false);
    }
    else {
      result_603981142 = nimCopy(null, [], NTI33554439);
    }
    

  return result_603981142;

}

function parse_587205439(c_587205440, inv_587205441) {
  var result_587205442 = 0;

  BeforeRet: do {
    var f_587205449 = (c_587205440[0] - 97);
    var r_587205456 = (c_587205440[1] - 49);
    if (inv_587205441) {
    f_587205449 = (7 - f_587205449);
    r_587205456 = (7 - r_587205456);
    }
    
    result_587205442 = ((91 + f_587205449) - (10 * r_587205456));
    break BeforeRet;
  } while (false);

  return result_587205442;

}

function find_587205543(a_587205546, item_587205547) {
  var result_587205548 = 0;

  BeforeRet: do {
    result_587205548 = 0;
    Label1: do {
      var i_587205560 = 0;
      var i_452985011 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985011 < (a_587205546).length)) break Label3;
            i_587205560 = a_587205546[i_452985011];
            if ((i_587205560 == item_587205547)) {
            break BeforeRet;
            }
            
            result_587205548 += 1;
            i_452985011 += 1;
          }
      } while (false);
    } while (false);
    result_587205548 = -1;
  } while (false);

  return result_587205548;

}

function contains_587205538(a_587205540, item_587205541) {
  var result_587205542 = false;

  BeforeRet: do {
    result_587205542 = (0 <= find_587205543(a_587205540, item_587205541));
    break BeforeRet;
  } while (false);

  return result_587205542;

}

function binarySearch_956302323(c_956302324, tab_956302325, len_956302326, stride_956302327) {
      var Temporary3;

  var result_956302328 = 0;

  BeforeRet: do {
    var n_956302329 = len_956302326;
    var t_956302330 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(1 < n_956302329)) break Label2;
          var m_956302331 = Math.trunc(n_956302329 / 2);
          var p_956302332 = (t_956302330 + (m_956302331 * stride_956302327));
          if ((tab_956302325[p_956302332] <= ((c_956302324) | 0))) {
          t_956302330 = p_956302332;
          n_956302329 = (n_956302329 - m_956302331);
          }
          else {
            n_956302329 = m_956302331;
          }
          
        }
    } while (false);
      if (!!((n_956302329 == 0))) Temporary3 = false; else {        Temporary3 = (tab_956302325[t_956302330] <= ((c_956302324) | 0));      }    if (Temporary3) {
    result_956302328 = t_956302330;
    break BeforeRet;
    }
    
    result_956302328 = -1;
    break BeforeRet;
  } while (false);

  return result_956302328;

}

function nucisUpper(c_956302453) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_956302454 = false;

  BeforeRet: do {
    var c_956302455 = c_956302453;
    var p_956302463 = binarySearch_956302323(c_956302455, toLowerRanges_956302233, 45, 3);
      if (!(0 <= p_956302463)) Temporary2 = false; else {        Temporary2 = (toLowerRanges_956302233[p_956302463] <= ((c_956302455) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_956302455) | 0) <= toLowerRanges_956302233[(p_956302463 + 1)]);      }    if (Temporary1) {
    result_956302454 = true;
    break BeforeRet;
    }
    
    p_956302463 = binarySearch_956302323(c_956302455, toLowerSinglets_956302234, 610, 2);
      if (!(0 <= p_956302463)) Temporary3 = false; else {        Temporary3 = (((c_956302455) | 0) == toLowerSinglets_956302234[p_956302463]);      }    if (Temporary3) {
    result_956302454 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_956302454;

}

function nuctoLower(c_956302334) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_956302335 = 0;

  BeforeRet: do {
    var c_956302336 = c_956302334;
    var p_956302345 = binarySearch_956302323(c_956302336, toLowerRanges_956302233, 45, 3);
      if (!(0 <= p_956302345)) Temporary2 = false; else {        Temporary2 = (toLowerRanges_956302233[p_956302345] <= ((c_956302336) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_956302336) | 0) <= toLowerRanges_956302233[(p_956302345 + 1)]);      }    if (Temporary1) {
    result_956302335 = ((((((c_956302336) | 0) + toLowerRanges_956302233[(p_956302345 + 2)]) - 500)) | 0);
    break BeforeRet;
    }
    
    p_956302345 = binarySearch_956302323(c_956302336, toLowerSinglets_956302234, 610, 2);
      if (!(0 <= p_956302345)) Temporary3 = false; else {        Temporary3 = (((c_956302336) | 0) == toLowerSinglets_956302234[p_956302345]);      }    if (Temporary3) {
    result_956302335 = ((((((c_956302336) | 0) + toLowerSinglets_956302234[(p_956302345 + 1)]) - 500)) | 0);
    break BeforeRet;
    }
    
    result_956302335 = c_956302336;
    break BeforeRet;
  } while (false);

  return result_956302335;

}

function nucisLower(c_956302434) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_956302435 = false;

  BeforeRet: do {
    var c_956302436 = c_956302434;
    var p_956302444 = binarySearch_956302323(c_956302436, toUpperRanges_956302235, 46, 3);
      if (!(0 <= p_956302444)) Temporary2 = false; else {        Temporary2 = (toUpperRanges_956302235[p_956302444] <= ((c_956302436) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_956302436) | 0) <= toUpperRanges_956302235[(p_956302444 + 1)]);      }    if (Temporary1) {
    result_956302435 = true;
    break BeforeRet;
    }
    
    p_956302444 = binarySearch_956302323(c_956302436, toUpperSinglets_956302236, 624, 2);
      if (!(0 <= p_956302444)) Temporary3 = false; else {        Temporary3 = (((c_956302436) | 0) == toUpperSinglets_956302236[p_956302444]);      }    if (Temporary3) {
    result_956302435 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_956302435;

}

function nuctoUpper(c_956302382) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_956302383 = 0;

  BeforeRet: do {
    var c_956302384 = c_956302382;
    var p_956302393 = binarySearch_956302323(c_956302384, toUpperRanges_956302235, 46, 3);
      if (!(0 <= p_956302393)) Temporary2 = false; else {        Temporary2 = (toUpperRanges_956302235[p_956302393] <= ((c_956302384) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_956302384) | 0) <= toUpperRanges_956302235[(p_956302393 + 1)]);      }    if (Temporary1) {
    result_956302383 = ((((((c_956302384) | 0) + toUpperRanges_956302235[(p_956302393 + 2)]) - 500)) | 0);
    break BeforeRet;
    }
    
    p_956302393 = binarySearch_956302323(c_956302384, toUpperSinglets_956302236, 624, 2);
      if (!(0 <= p_956302393)) Temporary3 = false; else {        Temporary3 = (((c_956302384) | 0) == toUpperSinglets_956302236[p_956302393]);      }    if (Temporary3) {
    result_956302383 = ((((((c_956302384) | 0) + toUpperSinglets_956302236[(p_956302393 + 1)]) - 500)) | 0);
    break BeforeRet;
    }
    
    result_956302383 = c_956302384;
    break BeforeRet;
  } while (false);

  return result_956302383;

}

function HEX3CHEX3DHEX25_33555429(x_33555430, y_33555431) {
  var result_33555432 = false;

    result_33555432 = ((x_33555430 >>> 0) <= (y_33555431 >>> 0));

  return result_33555432;

}

function nucswapCase(s_956303707) {
  var result_956303708 = [];

    var i_956303709 = 0;
    var resultIndex_956303710 = 0;
    var rune_956303711 = 0;
    result_956303708 = nimCopy(null, mnewString((s_956303707).length), NTI33554439);
    Label1: do {
        Label2: while (true) {
        if (!(i_956303709 < (s_956303707).length)) break Label2;
          if ((s_956303707[i_956303709] <= 127)) {
          rune_956303711 = s_956303707[i_956303709];
          i_956303709 += 1;
          }
          else {
          if (((s_956303707[i_956303709] >>> 5) == 6)) {
          if ((i_956303709 <= ((s_956303707).length - 2))) {
          rune_956303711 = (((s_956303707[i_956303709] & 31) << 6) | (s_956303707[(i_956303709 + 1)] & 63));
          i_956303709 += 2;
          }
          else {
            rune_956303711 = 65533;
            i_956303709 += 1;
          }
          
          }
          else {
          if (((s_956303707[i_956303709] >>> 4) == 14)) {
          if ((i_956303709 <= ((s_956303707).length - 3))) {
          rune_956303711 = ((((s_956303707[i_956303709] & 15) << 12) | ((s_956303707[(i_956303709 + 1)] & 63) << 6)) | (s_956303707[(i_956303709 + 2)] & 63));
          i_956303709 += 3;
          }
          else {
            rune_956303711 = 65533;
            i_956303709 += 1;
          }
          
          }
          else {
          if (((s_956303707[i_956303709] >>> 3) == 30)) {
          if ((i_956303709 <= ((s_956303707).length - 4))) {
          rune_956303711 = (((((s_956303707[i_956303709] & 7) << 18) | ((s_956303707[(i_956303709 + 1)] & 63) << 12)) | ((s_956303707[(i_956303709 + 2)] & 63) << 6)) | (s_956303707[(i_956303709 + 3)] & 63));
          i_956303709 += 4;
          }
          else {
            rune_956303711 = 65533;
            i_956303709 += 1;
          }
          
          }
          else {
          if (((s_956303707[i_956303709] >>> 2) == 62)) {
          if ((i_956303709 <= ((s_956303707).length - 5))) {
          rune_956303711 = ((((((s_956303707[i_956303709] & 3) << 24) | ((s_956303707[(i_956303709 + 1)] & 63) << 18)) | ((s_956303707[(i_956303709 + 2)] & 63) << 12)) | ((s_956303707[(i_956303709 + 3)] & 63) << 6)) | (s_956303707[(i_956303709 + 4)] & 63));
          i_956303709 += 5;
          }
          else {
            rune_956303711 = 65533;
            i_956303709 += 1;
          }
          
          }
          else {
          if (((s_956303707[i_956303709] >>> 1) == 126)) {
          if ((i_956303709 <= ((s_956303707).length - 6))) {
          rune_956303711 = (((((((s_956303707[i_956303709] & 1) << 30) | ((s_956303707[(i_956303709 + 1)] & 63) << 24)) | ((s_956303707[(i_956303709 + 2)] & 63) << 18)) | ((s_956303707[(i_956303709 + 3)] & 63) << 12)) | ((s_956303707[(i_956303709 + 4)] & 63) << 6)) | (s_956303707[(i_956303709 + 5)] & 63));
          i_956303709 += 6;
          }
          else {
            rune_956303711 = 65533;
            i_956303709 += 1;
          }
          
          }
          else {
            rune_956303711 = s_956303707[i_956303709];
            i_956303709 += 1;
          }
          }}}}}
          if (nucisUpper(rune_956303711)) {
          rune_956303711 = nuctoLower(rune_956303711);
          }
          else {
          if (nucisLower(rune_956303711)) {
          rune_956303711 = nuctoUpper(rune_956303711);
          }
          }
          var iHEX60gensym530_956303921 = rune_956303711;
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym530_956303921, 127)) {
          (result_956303708.length = (resultIndex_956303710 + 1));
          result_956303708[(resultIndex_956303710 + 0)] = iHEX60gensym530_956303921;
          resultIndex_956303710 += 1;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym530_956303921, 2047)) {
          (result_956303708.length = (resultIndex_956303710 + 2));
          result_956303708[(resultIndex_956303710 + 0)] = ((iHEX60gensym530_956303921 >> 6) | 192);
          result_956303708[(resultIndex_956303710 + 1)] = ((iHEX60gensym530_956303921 & 63) | 128);
          resultIndex_956303710 += 2;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym530_956303921, 65535)) {
          (result_956303708.length = (resultIndex_956303710 + 3));
          result_956303708[(resultIndex_956303710 + 0)] = ((iHEX60gensym530_956303921 >> 12) | 224);
          result_956303708[(resultIndex_956303710 + 1)] = (((iHEX60gensym530_956303921 >> 6) & 63) | 128);
          result_956303708[(resultIndex_956303710 + 2)] = ((iHEX60gensym530_956303921 & 63) | 128);
          resultIndex_956303710 += 3;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym530_956303921, 2097151)) {
          (result_956303708.length = (resultIndex_956303710 + 4));
          result_956303708[(resultIndex_956303710 + 0)] = ((iHEX60gensym530_956303921 >> 18) | 240);
          result_956303708[(resultIndex_956303710 + 1)] = (((iHEX60gensym530_956303921 >> 12) & 63) | 128);
          result_956303708[(resultIndex_956303710 + 2)] = (((iHEX60gensym530_956303921 >> 6) & 63) | 128);
          result_956303708[(resultIndex_956303710 + 3)] = ((iHEX60gensym530_956303921 & 63) | 128);
          resultIndex_956303710 += 4;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym530_956303921, 67108863)) {
          (result_956303708.length = (resultIndex_956303710 + 5));
          result_956303708[(resultIndex_956303710 + 0)] = ((iHEX60gensym530_956303921 >> 24) | 248);
          result_956303708[(resultIndex_956303710 + 1)] = (((iHEX60gensym530_956303921 >> 18) & 63) | 128);
          result_956303708[(resultIndex_956303710 + 2)] = (((iHEX60gensym530_956303921 >> 12) & 63) | 128);
          result_956303708[(resultIndex_956303710 + 3)] = (((iHEX60gensym530_956303921 >> 6) & 63) | 128);
          result_956303708[(resultIndex_956303710 + 4)] = ((iHEX60gensym530_956303921 & 63) | 128);
          resultIndex_956303710 += 5;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym530_956303921, 2147483647)) {
          (result_956303708.length = (resultIndex_956303710 + 6));
          result_956303708[(resultIndex_956303710 + 0)] = ((iHEX60gensym530_956303921 >> 30) | 252);
          result_956303708[(resultIndex_956303710 + 1)] = (((iHEX60gensym530_956303921 >> 24) & 63) | 128);
          result_956303708[(resultIndex_956303710 + 2)] = (((iHEX60gensym530_956303921 >> 18) & 63) | 128);
          result_956303708[(resultIndex_956303710 + 3)] = (((iHEX60gensym530_956303921 >> 12) & 63) | 128);
          result_956303708[(resultIndex_956303710 + 4)] = (((iHEX60gensym530_956303921 >> 6) & 63) | 128);
          result_956303708[(resultIndex_956303710 + 5)] = ((iHEX60gensym530_956303921 & 63) | 128);
          resultIndex_956303710 += 6;
          }
          else {
          }
          }}}}}
        }
    } while (false);

  return result_956303708;

}

function nucisCombining(c_956302536) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
        var Temporary6;
        var Temporary7;
        var Temporary8;
        var Temporary9;

  var result_956302537 = false;

  BeforeRet: do {
    var c_956302538 = c_956302536;
    if (!(768 <= c_956302538)) Temporary1 = false; else {      if ((c_956302538 <= 879)) Temporary5 = true; else {        if (!(6832 <= c_956302538)) Temporary6 = false; else {          Temporary6 = (c_956302538 <= 6911);        }        Temporary5 = Temporary6;      }      if (Temporary5) Temporary4 = true; else {        if (!(7616 <= c_956302538)) Temporary7 = false; else {          Temporary7 = (c_956302538 <= 7679);        }        Temporary4 = Temporary7;      }      if (Temporary4) Temporary3 = true; else {        if (!(8400 <= c_956302538)) Temporary8 = false; else {          Temporary8 = (c_956302538 <= 8447);        }        Temporary3 = Temporary8;      }      if (Temporary3) Temporary2 = true; else {        if (!(65056 <= c_956302538)) Temporary9 = false; else {          Temporary9 = (c_956302538 <= 65071);        }        Temporary2 = Temporary9;      }      Temporary1 = Temporary2;    }    result_956302537 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_956302537;

}

function reversed_956305595(s_956305596) {
  var result_956305597 = [];

    var i_956305598 = 0;
    var lastI_956305599 = 0;
    var newPos_956305600 = ((s_956305596).length - 1);
    var blockPos_956305601 = 0;
    var r_956305602 = 0;
    result_956305597 = nimCopy(null, mnewString((s_956305596).length), NTI33554439);
    Label1: do {
        Label2: while (true) {
        if (!(i_956305598 < (s_956305596).length)) break Label2;
          lastI_956305599 = i_956305598;
          if ((s_956305596[i_956305598] <= 127)) {
          r_956305602 = s_956305596[i_956305598];
          i_956305598 += 1;
          }
          else {
          if (((s_956305596[i_956305598] >>> 5) == 6)) {
          if ((i_956305598 <= ((s_956305596).length - 2))) {
          r_956305602 = (((s_956305596[i_956305598] & 31) << 6) | (s_956305596[(i_956305598 + 1)] & 63));
          i_956305598 += 2;
          }
          else {
            r_956305602 = 65533;
            i_956305598 += 1;
          }
          
          }
          else {
          if (((s_956305596[i_956305598] >>> 4) == 14)) {
          if ((i_956305598 <= ((s_956305596).length - 3))) {
          r_956305602 = ((((s_956305596[i_956305598] & 15) << 12) | ((s_956305596[(i_956305598 + 1)] & 63) << 6)) | (s_956305596[(i_956305598 + 2)] & 63));
          i_956305598 += 3;
          }
          else {
            r_956305602 = 65533;
            i_956305598 += 1;
          }
          
          }
          else {
          if (((s_956305596[i_956305598] >>> 3) == 30)) {
          if ((i_956305598 <= ((s_956305596).length - 4))) {
          r_956305602 = (((((s_956305596[i_956305598] & 7) << 18) | ((s_956305596[(i_956305598 + 1)] & 63) << 12)) | ((s_956305596[(i_956305598 + 2)] & 63) << 6)) | (s_956305596[(i_956305598 + 3)] & 63));
          i_956305598 += 4;
          }
          else {
            r_956305602 = 65533;
            i_956305598 += 1;
          }
          
          }
          else {
          if (((s_956305596[i_956305598] >>> 2) == 62)) {
          if ((i_956305598 <= ((s_956305596).length - 5))) {
          r_956305602 = ((((((s_956305596[i_956305598] & 3) << 24) | ((s_956305596[(i_956305598 + 1)] & 63) << 18)) | ((s_956305596[(i_956305598 + 2)] & 63) << 12)) | ((s_956305596[(i_956305598 + 3)] & 63) << 6)) | (s_956305596[(i_956305598 + 4)] & 63));
          i_956305598 += 5;
          }
          else {
            r_956305602 = 65533;
            i_956305598 += 1;
          }
          
          }
          else {
          if (((s_956305596[i_956305598] >>> 1) == 126)) {
          if ((i_956305598 <= ((s_956305596).length - 6))) {
          r_956305602 = (((((((s_956305596[i_956305598] & 1) << 30) | ((s_956305596[(i_956305598 + 1)] & 63) << 24)) | ((s_956305596[(i_956305598 + 2)] & 63) << 18)) | ((s_956305596[(i_956305598 + 3)] & 63) << 12)) | ((s_956305596[(i_956305598 + 4)] & 63) << 6)) | (s_956305596[(i_956305598 + 5)] & 63));
          i_956305598 += 6;
          }
          else {
            r_956305602 = 65533;
            i_956305598 += 1;
          }
          
          }
          else {
            r_956305602 = s_956305596[i_956305598];
            i_956305598 += 1;
          }
          }}}}}
          if (!(nucisCombining(r_956305602))) {
          var jHEX60gensym952_956305815 = (lastI_956305599 - 1);
          Label3: do {
              Label4: while (true) {
              if (!(blockPos_956305601 < jHEX60gensym952_956305815)) break Label4;
                result_956305597[newPos_956305600] = s_956305596[jHEX60gensym952_956305815];
                jHEX60gensym952_956305815 -= 1;
                newPos_956305600 -= 1;
              }
          } while (false);
          blockPos_956305601 = (lastI_956305599 - 1);
          }
          
        }
    } while (false);
    var jHEX60gensym956_956305825 = ((s_956305596).length - 1);
    Label5: do {
        Label6: while (true) {
        if (!(blockPos_956305601 < jHEX60gensym956_956305825)) break Label6;
          result_956305597[newPos_956305600] = s_956305596[jHEX60gensym956_956305825];
          jHEX60gensym956_956305825 -= 1;
          newPos_956305600 -= 1;
        }
    } while (false);
    blockPos_956305601 = ((s_956305596).length - 1);

  return result_956305597;

}

function rotate_587205509(s_587205510) {
  var result_587205511 = ({board: [], score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0});

  BeforeRet: do {
    var ep_587205512 = 0;
    var kp_587205513 = 0;
    var lastcap_587205514 = 0;
    if ((0 < s_587205510.ep)) {
    ep_587205512 = (119 - s_587205510.ep);
    }
    
    if ((0 < s_587205510.kp)) {
    kp_587205513 = (119 - s_587205510.kp);
    }
    
    if ((0 < s_587205510.lastcap)) {
    lastcap_587205514 = (119 - s_587205510.lastcap);
    }
    
    result_587205511 = nimCopy(result_587205511, {board: nucswapCase(reversed_956305595(s_587205510.board)), score: -(s_587205510.score), wc_w: s_587205510.bc_w, wc_e: s_587205510.bc_e, bc_w: s_587205510.wc_w, bc_e: s_587205510.wc_e, ep: ep_587205512, kp: kp_587205513, lastcap: lastcap_587205514}, NTI587204073);
    break BeforeRet;
  } while (false);

  return result_587205511;

}

function fromfen_587205515(fen_587205516) {
    var Temporary1;
    var Temporary2;
    var Temporary3;
              var Temporary7;
      var Temporary8;

  var result_587205517 = ({board: [], score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0});

  BeforeRet: do {
    var b_587205518 = makeNimstrLit("         \x0A         \x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A         \x0A         \x0A");
    var f_587205519 = nimCopy(null, (Temporary1 = nsuSplitString(fen_587205516, makeNimstrLit(" "), -1), Temporary1)[0], NTI33554439);
    var cas_587205520 = nimCopy(null, (Temporary2 = nsuSplitString(fen_587205516, makeNimstrLit(" "), -1), Temporary2)[2], NTI33554439);
    var enpas_587205521 = nimCopy(null, (Temporary3 = nsuSplitString(fen_587205516, makeNimstrLit(" "), -1), Temporary3)[3], NTI33554439);
    var i_587205522 = 0;
    var j_587205523 = 0;
    Label4: do {
      var x_587205524 = 0;
      var i_452985006 = 0;
      var L_452985007 = (f_587205519).length;
      Label5: do {
          Label6: while (true) {
          if (!(i_452985006 < L_452985007)) break Label6;
            x_587205524 = f_587205519[i_452985006];
            var a_587205528 = x_587205524;
              if (!(48 < a_587205528)) Temporary7 = false; else {                Temporary7 = (a_587205528 < 57);              }            if (Temporary7) {
            i_587205522 = (i_587205522 + (a_587205528 - 48));
            }
            else {
            if ((a_587205528 == 47)) {
            i_587205522 = 0;
            j_587205523 += 1;
            }
            else {
              b_587205518[((21 + (10 * j_587205523)) + i_587205522)] = x_587205524;
              i_587205522 += 1;
            }
            }
            i_452985006 += 1;
          }
      } while (false);
    } while (false);
    var ep_587205537 = 0;
    if (!(eqStrings(enpas_587205521, makeNimstrLit("-")))) {
    ep_587205537 = parse_587205439(enpas_587205521, false);
    }
    
    var pos_587205577 = {board: nimCopy(null, b_587205518, NTI33554439), score: 0.0, wc_w: contains_587205538(cas_587205520, 81), wc_e: contains_587205538(cas_587205520, 75), bc_w: contains_587205538(cas_587205520, 107), bc_e: contains_587205538(cas_587205520, 113), ep: ep_587205537, kp: 0, lastcap: 0};
    if (eqStrings((Temporary8 = nsuSplitString(fen_587205516, makeNimstrLit(" "), -1), Temporary8)[1], makeNimstrLit("b"))) {
    pos_587205577 = nimCopy(pos_587205577, rotate_587205509(pos_587205577), NTI587204073);
    }
    
    result_587205517 = nimCopy(result_587205517, pos_587205577, NTI587204073);
    break BeforeRet;
  } while (false);

  return result_587205517;

}

function nsuFindChar(s_603981240, sub_603981241, start_603981242, last_603981243) {
    var Temporary1;

  var result_603981244 = 0;

  BeforeRet: do {
    if ((last_603981243 == 0)) {
    Temporary1 = (s_603981240).length - 1;
    }
    else {
    Temporary1 = last_603981243;
    }
    
    var last_603981245 = Temporary1;
    Label2: do {
      var i_603981255 = 0;
      var colontmp__452985023 = 0;
      colontmp__452985023 = start_603981242;
      var res_452985024 = colontmp__452985023;
      Label3: do {
          Label4: while (true) {
          if (!(res_452985024 <= last_603981245)) break Label4;
            i_603981255 = res_452985024;
            if ((sub_603981241 == s_603981240[i_603981255])) {
            result_603981244 = i_603981255;
            break BeforeRet;
            }
            
            res_452985024 += 1;
          }
      } while (false);
    } while (false);
    result_603981244 = -1;
    break BeforeRet;
  } while (false);

  return result_603981244;

}

function fill_603981182(a_603981184, value_603981185) {
    var xHEX60gensym164_603981191 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(xHEX60gensym164_603981191 <= (a_603981184).length - 1)) break Label2;
          a_603981184[xHEX60gensym164_603981191] = value_603981185;
          xHEX60gensym164_603981191 += 1;
        }
    } while (false);

  
}

function nsuInitSkipTable(a_603981179, sub_603981180) {
    var m_603981181 = (sub_603981180).length;
    fill_603981182(a_603981179, m_603981181);
    Label1: do {
      var i_603981200 = 0;
      var colontmp__452985027 = 0;
      colontmp__452985027 = (m_603981181 - 1);
      var i_452985028 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985028 < colontmp__452985027)) break Label3;
            i_603981200 = i_452985028;
            a_603981179[sub_603981180[i_603981200]] = ((m_603981181 - 1) - i_603981200);
            i_452985028 += 1;
          }
      } while (false);
    } while (false);

  
}

function nsuFindStrA(a_603981220, s_603981221, sub_603981222, start_603981223, last_603981224) {
    var Temporary1;

  var result_603981225 = 0;

  BeforeRet: do {
    if ((last_603981224 == 0)) {
    Temporary1 = (s_603981221).length - 1;
    }
    else {
    Temporary1 = last_603981224;
    }
    
    var last_603981226 = Temporary1;
    var subLast_603981227 = ((sub_603981222).length - 1);
    if ((subLast_603981227 == -1)) {
    result_603981225 = start_603981223;
    break BeforeRet;
    }
    
    var skip_603981228 = start_603981223;
    Label2: do {
        Label3: while (true) {
        if (!(subLast_603981227 <= (last_603981226 - skip_603981228))) break Label3;
          var i_603981229 = subLast_603981227;
          Label4: do {
              Label5: while (true) {
              if (!(s_603981221[(skip_603981228 + i_603981229)] == sub_603981222[i_603981229])) break Label5;
                if ((i_603981229 == 0)) {
                result_603981225 = skip_603981228;
                break BeforeRet;
                }
                
                i_603981229 -= 1;
              }
          } while (false);
          skip_603981228 += a_603981220[s_603981221[(skip_603981228 + subLast_603981227)]];
        }
    } while (false);
    result_603981225 = -1;
    break BeforeRet;
  } while (false);

  return result_603981225;

}

function nsuFindStr(s_603981273, sub_603981274, start_603981275, last_603981276) {
  var result_603981277 = 0;

  BeforeRet: do {
    if ((((s_603981273).length - start_603981275) < (sub_603981274).length)) {
    result_603981277 = -1;
    break BeforeRet;
    }
    
    if (((sub_603981274).length == 1)) {
    result_603981277 = nsuFindChar(s_603981273, sub_603981274[0], start_603981275, last_603981276);
    break BeforeRet;
    }
    
    var a_603981279 = [new Int32Array(256)];
    nsuInitSkipTable(a_603981279[0], sub_603981274);
    result_603981277 = nsuFindStrA(a_603981279[0], s_603981273, sub_603981274, start_603981275, last_603981276);
  } while (false);

  return result_603981277;

}

function contains_603981402(s_603981403, sub_603981404) {
  var result_603981405 = false;

  BeforeRet: do {
    result_603981405 = (0 <= nsuFindStr(s_603981403, sub_603981404, 0, 0));
    break BeforeRet;
  } while (false);

  return result_603981405;

}

function HEX5BHEX5D_452984889(s_452984893, x_452984894) {
  var result_452984895 = [];

    var a_452984897 = x_452984894.a;
    var L_452984902 = ((((s_452984893).length - x_452984894.b) - a_452984897) + 1);
    result_452984895 = new Array(L_452984902); for (var i = 0 ; i < L_452984902 ; ++i) { result_452984895[i] = []; }    Label1: do {
      var i_452984911 = 0;
      var i_452985034 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985034 < L_452984902)) break Label3;
            i_452984911 = i_452985034;
            result_452984895[i_452984911] = nimCopy(null, s_452984893[(i_452984911 + a_452984897)], NTI33554439);
            i_452985034 += 1;
          }
      } while (false);
    } while (false);

  return result_452984895;

}

function HEX2EHEX2E_905969744(a_905969747, b_905969748) {
  var result_905969751 = ({a: 0, b: 0});

    result_905969751 = nimCopy(result_905969751, {a: a_905969747, b: b_905969748}, NTI905969743);

  return result_905969751;

}

function HEX5BHEX5D_956302186(s_956302189, x_956302190) {
  var result_956302191 = [];

    var a_956302193 = x_956302190.a;
    var L_956302195 = ((x_956302190.b - a_956302193) + 1);
    result_956302191 = nimCopy(null, mnewString(L_956302195), NTI33554439);
    Label1: do {
      var i_956302200 = 0;
      var i_452985037 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985037 < L_956302195)) break Label3;
            i_956302200 = i_452985037;
            result_956302191[i_956302200] = s_956302189[(i_956302200 + a_956302193)];
            i_452985037 += 1;
          }
      } while (false);
    } while (false);

  return result_956302191;

}

function nsuIsLowerAsciiChar(c_603979830) {
  var result_603979831 = false;

  BeforeRet: do {
    result_603979831 = (ConstSet2[c_603979830] != undefined);
    break BeforeRet;
  } while (false);

  return result_603979831;

}

function HEX2BHEX3D_603981810(x_603981812, x_603981812_Idx, y_603981813) {
    x_603981812[x_603981812_Idx] = (x_603981812[x_603981812_Idx] + y_603981813);

  
}

function hasJsBigInt_738197547() {
  var result_738197548 = false;

    result_738197548 = typeof BigInt != 'undefined'

  return result_738197548;

}

function hiXorLoJs_687865941(a_687865942, b_687865943) {
  var result_687865944 = 0n;

    var prod_687865945 = (a_687865942 * b_687865943);
    var mask_687865946 = BigInt("0xffffffffffffffff");
    result_687865944 = ((prod_687865945 >> BigInt("64")) ^ (prod_687865945 & mask_687865946));

  return result_687865944;

}

function hashWangYi1_687866034(x_687866036) {
  var result_687866037 = 0;

    if (hasJsBigInt_738197547()) {
    var P0HEX60gensym6_687866056 = BigInt("0xa0761d6478bd642f");
    var P1HEX60gensym6_687866057 = BigInt("0xe7037ed1a0b428db");
    var P58HEX60gensym6_687866058 = BigInt("0xeb44accab455d16d");
    var resHEX60gensym6_687866059 = hiXorLoJs_687865941(hiXorLoJs_687865941(P0HEX60gensym6_687866056, (BigInt(x_687866036) ^ P1HEX60gensym6_687866057)), P58HEX60gensym6_687866058);
    result_687866037 = Number((() => { const i = resHEX60gensym6_687866059, b = 32; return BigInt.asIntN(b, i) })());
    }
    else {
      result_687866037 = (x_687866036 & 4294967295);
    }
    

  return result_687866037;

}

function hash_587202733(x_587202735) {
  var result_587202736 = 0;

    result_587202736 = hashWangYi1_687866034(x_587202735);

  return result_587202736;

}

function isFilled_620757023(hcode_620757024) {
  var result_620757025 = false;

    result_620757025 = !((hcode_620757024 == 0));

  return result_620757025;

}

function nextTry_620757026(h_620757027, maxHash_620757028) {
  var result_620757029 = 0;

    result_620757029 = ((h_620757027 + 1) & maxHash_620757028);

  return result_620757029;

}

function rawGet_587204124(t_587204127, key_587204128, hc_587204129, hc_587204129_Idx) {
            var Temporary3;

  var result_587204130 = 0;

  BeforeRet: do {
    hc_587204129[hc_587204129_Idx] = hash_587202733(key_587204128);
    if ((hc_587204129[hc_587204129_Idx] == 0)) {
    hc_587204129[hc_587204129_Idx] = 314159265;
    }
    
    if (((t_587204127.data).length == 0)) {
    result_587204130 = -1;
    break BeforeRet;
    }
    
    var h_587204184 = (hc_587204129[hc_587204129_Idx] & (t_587204127.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_620757023(t_587204127.data[h_587204184].Field0)) break Label2;
            if (!(t_587204127.data[h_587204184].Field0 == hc_587204129[hc_587204129_Idx])) Temporary3 = false; else {              Temporary3 = (t_587204127.data[h_587204184].Field1 == key_587204128);            }          if (Temporary3) {
          result_587204130 = h_587204184;
          break BeforeRet;
          }
          
          h_587204184 = nextTry_620757026(h_587204184, (t_587204127.data).length - 1);
        }
    } while (false);
    result_587204130 = (-1 - h_587204184);
  } while (false);

  return result_587204130;

}

function raiseKeyError_587205716(key_587205718) {
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(nimCharToStr(key_587205718) || []), parent: null, m_type: NTI33555126, name: null, trace: [], up: null}, "KeyError");

  
}

function HEX5BHEX5D_587206374(t_587206377, key_587206378) {
  var result_587206379 = 0.0;

    var hcHEX60gensym20_587206380 = [0];
    var indexHEX60gensym20_587206387 = rawGet_587204124(t_587206377, key_587206378, hcHEX60gensym20_587206380, 0);
    if ((0 <= indexHEX60gensym20_587206387)) {
    result_587206379 = t_587206377.data[indexHEX60gensym20_587206387].Field2;
    }
    else {
    raiseKeyError_587205716(key_587206378);
    }
    

  return result_587206379;

}

function nsuToUpperAsciiChar(c_603979863) {
  var result_603979864 = 0;

    if ((ConstSet3[c_603979863] != undefined)) {
    result_603979864 = (c_603979863 ^ 32);
    }
    else {
      result_603979864 = c_603979863;
    }
    

  return result_603979864;

}

function value_587206314(s_587206315, fr_587206316, to_587206317) {
  var result_587206318 = [0.0];

    var p_587206319 = s_587206315.board[fr_587206316];
    var q_587206320 = s_587206315.board[to_587206317];
    if (nsuIsLowerAsciiChar(q_587206320)) {
    HEX2BHEX3D_603981810(result_587206318, 0, HEX5BHEX5D_587206374(piece_587205357, nsuToUpperAsciiChar(q_587206320)));
    }
    
    if ((p_587206319 == 80)) {
    if (((21 <= to_587206317) && (to_587206317 <= 28))) {
    HEX2BHEX3D_603981810(result_587206318, 0, (HEX5BHEX5D_587206374(piece_587205357, 81) - HEX5BHEX5D_587206374(piece_587205357, 80)));
    }
    
    if ((to_587206317 == s_587206315.ep)) {
    HEX2BHEX3D_603981810(result_587206318, 0, HEX5BHEX5D_587206374(piece_587205357, 80));
    }
    
    }
    

  return result_587206318[0];

}

function put_587205468(board_587205469, at_587205470, piece_587205471) {
  var result_587205472 = [];

  BeforeRet: do {
    result_587205472 = nimCopy(null, (HEX5BHEX5D_956302186(board_587205469, HEX2EHEX2E_956302161(0, (at_587205470 - 1))) || []).concat([piece_587205471],HEX5BHEX5D_956302186(board_587205469, HEX2EHEX2E_956302161((at_587205470 + 1), 119)) || []), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_587205472;

}

function toFloat_33556001(i_33556002) {
  var result_33556003 = 0.0;

    result_33556003 = i_33556002;

  return result_33556003;

}

function HEX2F_33557576(x_33557577, y_33557578) {
  var result_33557579 = 0.0;

    result_33557579 = (toFloat_33556001(x_33557577) / toFloat_33556001(y_33557578));

  return result_33557579;

}

function move_587206630(s_587206631, fr_587206632, to_587206633) {
  var result_587206634 = ({board: [], score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0});

  BeforeRet: do {
    var p_587206635 = s_587206631.board[fr_587206632];
    var q_587206636 = s_587206631.board[to_587206633];
    var board_587206637 = nimCopy(null, s_587206631.board, NTI33554439);
    var score_587206638 = (s_587206631.score + value_587206314(s_587206631, fr_587206632, to_587206633));
    var wc_w_587206639 = s_587206631.wc_w;
    var wc_e_587206640 = s_587206631.wc_e;
    var bc_w_587206641 = s_587206631.bc_w;
    var bc_e_587206642 = s_587206631.bc_e;
    var ep_587206643 = 0;
    var kp_587206644 = 0;
    var lastcap_587206645 = 0;
    if (!((q_587206636 == 46))) {
    lastcap_587206645 = to_587206633;
    }
    else {
      lastcap_587206645 = 0;
    }
    
    board_587206637 = nimCopy(null, put_587205468(board_587206637, to_587206633, p_587206635), NTI33554439);
    board_587206637 = nimCopy(null, put_587205468(board_587206637, fr_587206632, 46), NTI33554439);
    if ((fr_587206632 == 91)) {
    wc_w_587206639 = false;
    }
    
    if ((fr_587206632 == 98)) {
    wc_e_587206640 = false;
    }
    
    if ((to_587206633 == 21)) {
    bc_e_587206642 = false;
    }
    
    if ((to_587206633 == 28)) {
    bc_w_587206641 = false;
    }
    
    if ((p_587206635 == 75)) {
    wc_w_587206639 = false;
    wc_e_587206640 = false;
    if ((Math.abs((to_587206633 - fr_587206632)) == 2)) {
    kp_587206644 = ((HEX2F_33557576((to_587206633 + fr_587206632), 2)) | 0);
    if ((to_587206633 < fr_587206632)) {
    board_587206637 = nimCopy(null, put_587205468(board_587206637, 91, 46), NTI33554439);
    }
    else {
      board_587206637 = nimCopy(null, put_587205468(board_587206637, 98, 46), NTI33554439);
    }
    
    board_587206637 = nimCopy(null, put_587205468(board_587206637, kp_587206644, 82), NTI33554439);
    }
    
    }
    
    if ((p_587206635 == 80)) {
    if (((21 <= to_587206633) && (to_587206633 <= 28))) {
    board_587206637 = nimCopy(null, put_587205468(board_587206637, to_587206633, 81), NTI33554439);
    }
    
    if (((to_587206633 - fr_587206632) == -20)) {
    ep_587206643 = (fr_587206632 + -10);
    }
    
    if ((to_587206633 == s_587206631.ep)) {
    board_587206637 = nimCopy(null, put_587205468(board_587206637, (to_587206633 + 10), 46), NTI33554439);
    }
    
    }
    
    result_587206634 = nimCopy(result_587206634, {board: nimCopy(null, board_587206637, NTI33554439), score: score_587206638, wc_w: wc_w_587206639, wc_e: wc_e_587206640, bc_w: bc_w_587206641, bc_e: bc_e_587206642, ep: ep_587206643, kp: kp_587206644, lastcap: lastcap_587206645}, NTI587204073);
    break BeforeRet;
  } while (false);

  return result_587206634;

}

function epochTime_637537562() {
  var result_637537563 = 0.0;

    result_637537563 = HEX2F_33557576(new Date().getTime(), 1000);

  return result_637537563;

}

function newSeq_587207043(len_587207045) {
  var result_587207046 = [];

    result_587207046 = new Array(len_587207045); for (var i = 0 ; i < len_587207045 ; ++i) { result_587207046[i] = {Field0: 0.0, Field1: 0, Field2: 0}; }
  return result_587207046;

}

function HEX2A_654311432(x_654311433, order_654311434) {
  var result_654311435 = 0;

    var y_654311440 = (order_654311434 - 1);
    result_654311435 = ((x_654311433 ^ y_654311440) - y_654311440);

  return result_654311435;

}

function mergeAlt_587207072(a_587207074, b_587207075, lo_587207076, m_587207077, hi_587207078, cmp_587207081, order_587207082) {
  BeforeRet: do {
    if ((HEX2A_654311432(cmp_587207081(a_587207074[m_587207077], a_587207074[(m_587207077 + 1)]), order_587207082) <= 0)) {
    break BeforeRet;
    }
    
    var j_587207083 = lo_587207076;
    var bb_587207087 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(j_587207083 <= m_587207077)) break Label2;
          b_587207075[bb_587207087] = nimCopy(b_587207075[bb_587207087], a_587207074[j_587207083], NTI587204848);
          bb_587207087 += 1;
          j_587207083 += 1;
        }
    } while (false);
    var i_587207096 = 0;
    var k_587207097 = lo_587207076;
    Label3: do {
        Label4: while (true) {
        if (!((k_587207097 < j_587207083) && (j_587207083 <= hi_587207078))) break Label4;
          if ((HEX2A_654311432(cmp_587207081(b_587207075[i_587207096], a_587207074[j_587207083]), order_587207082) <= 0)) {
          a_587207074[k_587207097] = nimCopy(a_587207074[k_587207097], b_587207075[i_587207096], NTI587204848);
          i_587207096 += 1;
          }
          else {
            a_587207074[k_587207097] = nimCopy(a_587207074[k_587207097], a_587207074[j_587207083], NTI587204848);
            j_587207083 += 1;
          }
          
          k_587207097 += 1;
        }
    } while (false);
    Label5: do {
        Label6: while (true) {
        if (!(k_587207097 < j_587207083)) break Label6;
          a_587207074[k_587207097] = nimCopy(a_587207074[k_587207097], b_587207075[i_587207096], NTI587204848);
          k_587207097 += 1;
          i_587207096 += 1;
        }
    } while (false);
  } while (false);

  
}

function sort_587207031(a_587207033, cmp_587207036, order_587207037) {
    var n_587207042 = (a_587207033).length;
    var b_587207069 = newSeq_587207043(Math.trunc(n_587207042 / 2));
    var s_587207070 = 1;
    Label1: do {
        Label2: while (true) {
        if (!(s_587207070 < n_587207042)) break Label2;
          var m_587207071 = ((n_587207042 - 1) - s_587207070);
          Label3: do {
              Label4: while (true) {
              if (!(0 <= m_587207071)) break Label4;
                mergeAlt_587207072(a_587207033, b_587207069, nimMax(((m_587207071 - s_587207070) + 1), 0), m_587207071, (m_587207071 + s_587207070), cmp_587207036, order_587207037);
                m_587207071 -= (s_587207070 * 2);
              }
          } while (false);
          s_587207070 = (s_587207070 * 2);
        }
    } while (false);

  
}

function myCmp_587207023(x_587207026, y_587207027) {
    var Temporary1;

  var result_587207028 = 0;

    if ((y_587207027["Field0"] < x_587207026["Field0"])) {
    Temporary1 = -1;
    }
    else {
    Temporary1 = 1;
    }
    
    result_587207028 = Temporary1;

  return result_587207028;

}

function order_587206767(b_587206768, ply_587206769, moves_587206770) {
  var result_587206771 = [];

    var mlist_587206772 = [];
    Label1: do {
      var m_587206776 = {Field0: 0, Field1: 0};
      var i_452985045 = 0;
      var L_452985046 = (moves_587206770).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985045 < L_452985046)) break Label3;
            m_587206776 = moves_587206770[i_452985045];
            var p_587206777 = nsuToUpperAsciiChar(b_587206768.board[m_587206776["Field0"]]);
            var q_587206778 = nsuToUpperAsciiChar(b_587206768.board[m_587206776["Field1"]]);
            if (!((q_587206778 == 46))) {
            mlist_587206772.push({Field0: ((10.0 * HEX5BHEX5D_587206374(piece_type_587205362, q_587206778)) - HEX5BHEX5D_587206374(piece_type_587205362, p_587206777)), Field1: m_587206776["Field0"], Field2: m_587206776["Field1"]});;
            }
            else {
            if ((m_587206776["Field1"] == b_587206768.ep)) {
            mlist_587206772.push({Field0: (10.0 - HEX5BHEX5D_587206374(piece_type_587205362, p_587206777)), Field1: m_587206776["Field0"], Field2: m_587206776["Field1"]});;
            }
            else {
            mlist_587206772.push({Field0: HEX5BHEX5D_587206374(piece_type_587205362, p_587206777), Field1: m_587206776["Field0"], Field2: m_587206776["Field1"]});;
            }
            }
            i_452985045 += 1;
          }
      } while (false);
    } while (false);
    sort_587207031(mlist_587206772, myCmp_587207023, 1);
    Label4: do {
      var m_587207150 = {Field0: 0.0, Field1: 0, Field2: 0};
      var i_452985050 = 0;
      var L_452985051 = (mlist_587206772).length;
      Label5: do {
          Label6: while (true) {
          if (!(i_452985050 < L_452985051)) break Label6;
            m_587207150 = mlist_587206772[i_452985050];
            result_587206771.push({Field0: m_587207150["Field1"], Field1: m_587207150["Field2"]});;
            i_452985050 += 1;
          }
      } while (false);
    } while (false);

  return result_587206771;

}

function nsuIsUpperAsciiChar(c_603979837) {
  var result_603979838 = false;

  BeforeRet: do {
    result_603979838 = (ConstSet4[c_603979837] != undefined);
    break BeforeRet;
  } while (false);

  return result_603979838;

}

function rawGet_587202726(t_587202729, key_587202730, hc_587202731, hc_587202731_Idx) {
            var Temporary3;

  var result_587202732 = 0;

  BeforeRet: do {
    hc_587202731[hc_587202731_Idx] = hash_587202733(key_587202730);
    if ((hc_587202731[hc_587202731_Idx] == 0)) {
    hc_587202731[hc_587202731_Idx] = 314159265;
    }
    
    if (((t_587202729.data).length == 0)) {
    result_587202732 = -1;
    break BeforeRet;
    }
    
    var h_587202793 = (hc_587202731[hc_587202731_Idx] & (t_587202729.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_620757023(t_587202729.data[h_587202793].Field0)) break Label2;
            if (!(t_587202729.data[h_587202793].Field0 == hc_587202731[hc_587202731_Idx])) Temporary3 = false; else {              Temporary3 = (t_587202729.data[h_587202793].Field1 == key_587202730);            }          if (Temporary3) {
          result_587202732 = h_587202793;
          break BeforeRet;
          }
          
          h_587202793 = nextTry_620757026(h_587202793, (t_587202729.data).length - 1);
        }
    } while (false);
    result_587202732 = (-1 - h_587202793);
  } while (false);

  return result_587202732;

}

function HEX5BHEX5D_587205649(t_587205652, key_587205653) {
  var result_587205654 = new Int32Array(8);

    var hcHEX60gensym20_587205655 = [0];
    var indexHEX60gensym20_587205662 = rawGet_587202726(t_587205652, key_587205653, hcHEX60gensym20_587205655, 0);
    if ((0 <= indexHEX60gensym20_587205662)) {
    result_587205654 = nimCopy(result_587205654, t_587205652.data[indexHEX60gensym20_587205662].Field2, NTI587202573);
    }
    else {
    raiseKeyError_587205716(key_587205653);
    }
    

  return result_587205654;

}

function nsuIsSpaceAsciiChar(c_603979823) {
  var result_603979824 = false;

  BeforeRet: do {
    result_603979824 = (ConstSet5[c_603979823] != undefined);
    break BeforeRet;
  } while (false);

  return result_603979824;

}

function find_587205862(a_587205865, item_587205866) {
  var result_587205867 = 0;

  BeforeRet: do {
    result_587205867 = 0;
    Label1: do {
      var i_587205880 = 0;
      var i_452985098 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985098 < (a_587205865).length)) break Label3;
            i_587205880 = a_587205865[i_452985098];
            if ((i_587205880 == item_587205866)) {
            break BeforeRet;
            }
            
            result_587205867 += 1;
            i_452985098 += 1;
          }
      } while (false);
    } while (false);
    result_587205867 = -1;
  } while (false);

  return result_587205867;

}

function contains_587205857(a_587205859, item_587205860) {
  var result_587205861 = false;

  BeforeRet: do {
    result_587205861 = (0 <= find_587205862(a_587205859, item_587205860));
    break BeforeRet;
  } while (false);

  return result_587205861;

}

function gen_moves_no_castle_587205587(s_587205588) {
                              var Temporary10;
                              var Temporary11;
                                var Temporary12;

  var result_587205589 = [];

    Label1: do {
      var i_587205594 = 0;
      var res_452985094 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452985094 <= 119)) break Label3;
            i_587205594 = res_452985094;
            Label4: do {
              var p_587205595 = s_587205588.board[i_587205594];
              if (!(nsuIsUpperAsciiChar(p_587205595))) {
              break Label4;
              }
              
              Label5: do {
                var d_587205812 = 0;
                var colontmp__452985091 = new Int32Array(8);
                colontmp__452985091 = nimCopy(colontmp__452985091, HEX5BHEX5D_587205649(dirs_587203975, p_587205595), NTI587202573);
                var i_452985092 = 0;
                Label6: do {
                    Label7: while (true) {
                    if (!true) break Label7;
                      d_587205812 = colontmp__452985091[i_452985092];
                      if ((d_587205812 == 0)) {
                      break Label5;
                      }
                      
                      var j_587205813 = (i_587205594 + d_587205812);
                      Label8: do {
                          Label9: while (true) {
                          if (!true) break Label9;
                            var q_587205814 = s_587205588.board[j_587205813];
                            if ((nsuIsSpaceAsciiChar(q_587205814) || nsuIsUpperAsciiChar(q_587205814))) {
                            break Label8;
                            }
                            
                              if (!((p_587205595 == 80) && contains_587205857(new Int32Array([-10, -20]), d_587205812))) Temporary10 = false; else {                                Temporary10 = !((q_587205814 == 46));                              }                            if (Temporary10) {
                            break Label8;
                            }
                            
                              if (!((p_587205595 == 80) && (d_587205812 == -20))) Temporary11 = false; else {                                if ((i_587205594 < 81)) Temporary12 = true; else {                                  Temporary12 = !((s_587205588.board[(i_587205594 + -10)] == 46));                                }                                Temporary11 = Temporary12;                              }                            if (Temporary11) {
                            break Label8;
                            }
                            
                            if (((((p_587205595 == 80) && contains_587205857(new Int32Array([-11, -9]), d_587205812)) && (q_587205814 == 46)) && !(contains_587205857(new Int32Array([s_587205588.ep, s_587205588.kp, (s_587205588.kp - 1), (s_587205588.kp + 1)]), j_587205813)))) {
                            break Label8;
                            }
                            
                            result_587205589.push({Field0: i_587205594, Field1: j_587205813});;
                            if (((((p_587205595 == 80) || (p_587205595 == 78)) || (p_587205595 == 75)) || nsuIsLowerAsciiChar(q_587205814))) {
                            break Label8;
                            }
                            
                            j_587205813 = (j_587205813 + d_587205812);
                          }
                      } while (false);
                      if ((7 <= i_452985092)) {
                      break Label6;
                      }
                      
                      i_452985092 += 1;
                    }
                } while (false);
              } while (false);
            } while (false);
            res_452985094 += 1;
          }
      } while (false);
    } while (false);

  return result_587205589;

}

function attacks_587205999(pos_587206000, x_587206001) {
  var result_587206002 = [];

    var moves_587206003 = gen_moves_no_castle_587205587(pos_587206000);
    Label1: do {
      var n_587206012 = 0;
      var colontmp__452985084 = 0;
      colontmp__452985084 = ((moves_587206003).length - 1);
      var res_452985085 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452985085 <= colontmp__452985084)) break Label3;
            n_587206012 = res_452985085;
            var i_587206013 = moves_587206003[n_587206012]["Field0"];
            var j_587206014 = moves_587206003[n_587206012]["Field1"];
            if ((i_587206013 == x_587206001)) {
            result_587206002.push(j_587206014);;
            }
            
            res_452985085 += 1;
          }
      } while (false);
    } while (false);

  return result_587206002;

}

function ischeck_587206028(s_587206029) {
                        var Temporary11;
                        var Temporary12;

  var result_587206030 = {Field0: false, Field1: false, Field2: false};

  BeforeRet: do {
    var check_587206031 = false;
    var wcastle_587206032 = true;
    var ecastle_587206033 = true;
    var kpos_587206034 = -1;
    Label1: do {
      var i_587206039 = 0;
      var res_452985069 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452985069 <= 119)) break Label3;
            i_587206039 = res_452985069;
            if ((s_587206029.board[i_587206039] == 107)) {
            kpos_587206034 = i_587206039;
            }
            
            res_452985069 += 1;
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_587206044 = 0;
      var res_452985078 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_452985078 <= 119)) break Label6;
            i_587206044 = res_452985078;
            Label7: do {
              var p_587206045 = s_587206029.board[i_587206044];
              if (!(nsuIsUpperAsciiChar(p_587206045))) {
              break Label7;
              }
              
              var a_587206046 = attacks_587205999(s_587206029, i_587206044);
              Label8: do {
                var j_587206066 = 0;
                var i_452985075 = 0;
                var L_452985076 = (a_587206046).length;
                Label9: do {
                    Label10: while (true) {
                    if (!(i_452985075 < L_452985076)) break Label10;
                      j_587206066 = a_587206046[i_452985075];
                      if ((s_587206029.board[j_587206066] == 107)) {
                      check_587206031 = true;
                      }
                      
                        if ((j_587206066 == (kpos_587206034 - 2))) Temporary11 = true; else {                          Temporary11 = (j_587206066 == (kpos_587206034 - 1));                        }                      if (Temporary11) {
                      ecastle_587206033 = false;
                      }
                      
                        if ((j_587206066 == (kpos_587206034 + 1))) Temporary12 = true; else {                          Temporary12 = (j_587206066 == (kpos_587206034 + 2));                        }                      if (Temporary12) {
                      wcastle_587206032 = false;
                      }
                      
                      i_452985075 += 1;
                    }
                } while (false);
              } while (false);
            } while (false);
            res_452985078 += 1;
          }
      } while (false);
    } while (false);
    var colontmp__452985080 = check_587206031;
    var colontmp__452985081 = wcastle_587206032;
    var colontmp__452985082 = ecastle_587206033;
    result_587206030 = nimCopy(result_587206030, {Field0: colontmp__452985080, Field1: colontmp__452985081, Field2: colontmp__452985082}, NTI587204448);
    break BeforeRet;
  } while (false);

  return result_587206030;

}

function gen_moves_587206085(s_587206086, test_check_587206087) {
                              var Temporary10;
                              var Temporary11;
                                var Temporary12;

  var result_587206088 = [];

    var check_587206089 = false;
    var wcastle_587206090 = true;
    var ecastle_587206091 = true;
    if (test_check_587206087) {
    var __587206092 = ischeck_587206028(rotate_587205509(s_587206086));
    check_587206089 = __587206092["Field0"];
    wcastle_587206090 = __587206092["Field1"];
    ecastle_587206091 = __587206092["Field2"];
    }
    
    Label1: do {
      var i_587206097 = 0;
      var res_452985066 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452985066 <= 119)) break Label3;
            i_587206097 = res_452985066;
            Label4: do {
              var p_587206098 = s_587206086.board[i_587206097];
              if (!(nsuIsUpperAsciiChar(p_587206098))) {
              break Label4;
              }
              
              Label5: do {
                var d_587206161 = 0;
                var colontmp__452985062 = new Int32Array(8);
                colontmp__452985062 = nimCopy(colontmp__452985062, HEX5BHEX5D_587205649(dirs_587203975, p_587206098), NTI587202573);
                var i_452985064 = 0;
                Label6: do {
                    Label7: while (true) {
                    if (!true) break Label7;
                      d_587206161 = colontmp__452985062[i_452985064];
                      if ((d_587206161 == 0)) {
                      break Label5;
                      }
                      
                      var j_587206162 = (i_587206097 + d_587206161);
                      Label8: do {
                          Label9: while (true) {
                          if (!true) break Label9;
                            var q_587206163 = s_587206086.board[j_587206162];
                            if ((nsuIsSpaceAsciiChar(q_587206163) || nsuIsUpperAsciiChar(q_587206163))) {
                            break Label8;
                            }
                            
                              if (!((p_587206098 == 80) && contains_587205857(new Int32Array([-10, -20]), d_587206161))) Temporary10 = false; else {                                Temporary10 = !((q_587206163 == 46));                              }                            if (Temporary10) {
                            break Label8;
                            }
                            
                              if (!((p_587206098 == 80) && (d_587206161 == -20))) Temporary11 = false; else {                                if ((i_587206097 < 81)) Temporary12 = true; else {                                  Temporary12 = !((s_587206086.board[(i_587206097 + -10)] == 46));                                }                                Temporary11 = Temporary12;                              }                            if (Temporary11) {
                            break Label8;
                            }
                            
                            if (((((p_587206098 == 80) && contains_587205857(new Int32Array([-11, -9]), d_587206161)) && (q_587206163 == 46)) && !(contains_587205857(new Int32Array([s_587206086.ep, s_587206086.kp, (s_587206086.kp - 1), (s_587206086.kp + 1)]), j_587206162)))) {
                            break Label8;
                            }
                            
                            result_587206088.push({Field0: i_587206097, Field1: j_587206162});;
                            if (((((p_587206098 == 80) || (p_587206098 == 78)) || (p_587206098 == 75)) || nsuIsLowerAsciiChar(q_587206163))) {
                            break Label8;
                            }
                            
                            if ((((((i_587206097 == 91) && (s_587206086.board[(j_587206162 + 1)] == 75)) && s_587206086.wc_w) && wcastle_587206090) && !(check_587206089))) {
                            result_587206088.push({Field0: (j_587206162 + 1), Field1: (j_587206162 + -1)});;
                            }
                            
                            if ((((((i_587206097 == 98) && (s_587206086.board[(j_587206162 + -1)] == 75)) && s_587206086.wc_e) && ecastle_587206091) && !(check_587206089))) {
                            result_587206088.push({Field0: (j_587206162 + -1), Field1: (j_587206162 + 1)});;
                            }
                            
                            j_587206162 = (j_587206162 + d_587206161);
                          }
                      } while (false);
                      if ((7 <= i_452985064)) {
                      break Label6;
                      }
                      
                      i_452985064 += 1;
                    }
                } while (false);
              } while (false);
            } while (false);
            res_452985066 += 1;
          }
      } while (false);
    } while (false);

  return result_587206088;

}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = (old_251658421 + n_251658420));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_452985104 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985104 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_452985104;
            result_251658417[result_251658417_Idx][(old_251658421 + iHEX60gensym4_251658435)] = x_251658418.charCodeAt((start_251658419 + iHEX60gensym4_251658435));
            i_452985104 += 1;
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_318767107(x_318767108) {
  var result_318767109 = [[]];

    addInt_251658457(result_318767109, 0, x_318767108);

  return result_318767109[0];

}

function parseSaturatedNatural_889192764(s_889192765, b_889192766, b_889192766_Idx, start_889192767) {
      var Temporary1;
          var Temporary4;

  var result_889192768 = 0;

    var i_889192769 = start_889192767;
    if (((i_889192769 < (s_889192765).length) && (s_889192765[i_889192769] == 43))) {
    i_889192769 += 1;
    }
    
      if (!(i_889192769 < (s_889192765).length)) Temporary1 = false; else {        Temporary1 = (ConstSet10[s_889192765[i_889192769]] != undefined);      }    if (Temporary1) {
    b_889192766[b_889192766_Idx] = 0;
    Label2: do {
        Label3: while (true) {
          if (!(i_889192769 < (s_889192765).length)) Temporary4 = false; else {            Temporary4 = (ConstSet11[s_889192765[i_889192769]] != undefined);          }        if (!Temporary4) break Label3;
          var c_889192788 = (s_889192765[i_889192769] - 48);
          if ((b_889192766[b_889192766_Idx] <= Math.trunc((2147483647 - c_889192788) / 10))) {
          b_889192766[b_889192766_Idx] = ((b_889192766[b_889192766_Idx] * 10) + c_889192788);
          }
          else {
            b_889192766[b_889192766_Idx] = 2147483647;
          }
          
          i_889192769 += 1;
          Label5: do {
              Label6: while (true) {
              if (!((i_889192769 < (s_889192765).length) && (s_889192765[i_889192769] == 95))) break Label6;
                i_889192769 += 1;
              }
          } while (false);
        }
    } while (false);
    result_889192768 = (i_889192769 - start_889192767);
    }
    

  return result_889192768;

}

function HEX5BHEX5D_956304536(s_956304539, x_956304540) {
  var result_956304541 = [];

    var a_956304543 = x_956304540.a;
    var L_956304545 = ((((s_956304539).length - x_956304540.b) - a_956304543) + 1);
    result_956304541 = nimCopy(null, mnewString(L_956304545), NTI33554439);
    Label1: do {
      var i_956304550 = 0;
      var i_452985109 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985109 < L_956304545)) break Label3;
            i_956304550 = i_452985109;
            result_956304541[i_956304550] = s_956304539[(i_956304550 + a_956304543)];
            i_452985109 += 1;
          }
      } while (false);
    } while (false);

  return result_956304541;

}

function parseStandardFormatSpecifier_1073741880(s_1073741881, start_1073741882, ignoreUnknownSuffix_1073741883) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_1073741884 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_1073741884.fill = 32;
    result_1073741884.align = 0;
    result_1073741884.sign = 45;
    var i_1073741886 = start_1073741882;
    if ((((i_1073741886 + 1) < (s_1073741881).length) && (ConstSet6[s_1073741881[(i_1073741886 + 1)]] != undefined))) {
    result_1073741884.fill = s_1073741881[i_1073741886];
    result_1073741884.align = s_1073741881[(i_1073741886 + 1)];
    i_1073741886 += 2;
    }
    else {
    if (((i_1073741886 < (s_1073741881).length) && (ConstSet7[s_1073741881[i_1073741886]] != undefined))) {
    result_1073741884.align = s_1073741881[i_1073741886];
    i_1073741886 += 1;
    }
    }
    if (((i_1073741886 < (s_1073741881).length) && (ConstSet8[s_1073741881[i_1073741886]] != undefined))) {
    result_1073741884.sign = s_1073741881[i_1073741886];
    i_1073741886 += 1;
    }
    
    if (((i_1073741886 < (s_1073741881).length) && (s_1073741881[i_1073741886] == 35))) {
    result_1073741884.alternateForm = true;
    i_1073741886 += 1;
    }
    
      if (!(((i_1073741886 + 1) < (s_1073741881).length) && (s_1073741881[i_1073741886] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet9[s_1073741881[(i_1073741886 + 1)]] != undefined);      }    if (Temporary1) {
    result_1073741884.padWithZero = true;
    i_1073741886 += 1;
    }
    
    var parsedLength_1073741923 = parseSaturatedNatural_889192764(s_1073741881, result_1073741884, "minimumWidth", i_1073741886);
    i_1073741886 += parsedLength_1073741923;
    if (((i_1073741886 < (s_1073741881).length) && (s_1073741881[i_1073741886] == 46))) {
    i_1073741886 += 1;
    var parsedLengthB_1073741932 = parseSaturatedNatural_889192764(s_1073741881, result_1073741884, "precision", i_1073741886);
    i_1073741886 += parsedLengthB_1073741932;
    }
    else {
      result_1073741884.precision = -1;
    }
    
      if (!(i_1073741886 < (s_1073741881).length)) Temporary2 = false; else {        Temporary2 = (ConstSet12[s_1073741881[i_1073741886]] != undefined);      }    if (Temporary2) {
    result_1073741884.typ = s_1073741881[i_1073741886];
    i_1073741886 += 1;
    }
    
    result_1073741884.endPosition = i_1073741886;
      if (!!((i_1073741886 == (s_1073741881).length))) Temporary3 = false; else {        Temporary3 = !(ignoreUnknownSuffix_1073741883);      }    if (Temporary3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_956304536(s_1073741881, HEX2EHEX2E_905969744(i_1073741886, 1)) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_1073741884;

}

function mkDigit_1073741829(v_1073741830, typ_1073741831) {
      var Temporary1;

  var result_1073741832 = [];

    if ((v_1073741830 < 10)) {
    result_1073741832 = nimCopy(null, nimCharToStr((48 + v_1073741830)), NTI33554439);
    }
    else {
      if ((typ_1073741831 == 120)) {
      Temporary1 = 97;
      }
      else {
      Temporary1 = 65;
      }
      
      result_1073741832 = nimCopy(null, nimCharToStr(((Temporary1 + v_1073741830) - 10)), NTI33554439);
    }
    

  return result_1073741832;

}

function nsuRepeatChar(c_603980789, count_603980790) {
  var result_603980791 = [];

    result_603980791 = nimCopy(null, mnewString(count_603980790), NTI33554439);
    Label1: do {
      var i_603980796 = 0;
      var colontmp__452985121 = 0;
      colontmp__452985121 = (count_603980790 - 1);
      var res_452985122 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452985122 <= colontmp__452985121)) break Label3;
            i_603980796 = res_452985122;
            result_603980791[i_603980796] = c_603980789;
            res_452985122 += 1;
          }
      } while (false);
    } while (false);

  return result_603980791;

}

function formatInt_587205405(n_587205407, radix_587205408, spec_587205409) {
    var Temporary1;
    var Temporary8;

  var result_587205410 = [];

    var n_587205413 = n_587205407;
    var negative_587205414 = (n_587205413 < 0);
    if (negative_587205414) {
    Temporary1 = ((~(n_587205413) + 1) );
    }
    else {
    Temporary1 = n_587205413;
    }
    
    var v_587205415 = Temporary1;
    var xx_587205416 = [];
    if (spec_587205409.alternateForm) {
    switch (spec_587205409.typ) {
    case 88:
      xx_587205416 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 120:
      xx_587205416 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 98:
      xx_587205416 = nimCopy(null, makeNimstrLit("0b"), NTI33554439);
      break;
    case 111:
      xx_587205416 = nimCopy(null, makeNimstrLit("0o"), NTI33554439);
      break;
    default: 
      break;
    }
    }
    
    if ((v_587205415 == 0)) {
    result_587205410 = nimCopy(null, makeNimstrLit("0"), NTI33554439);
    }
    else {
      result_587205410 = nimCopy(null, [], NTI33554439);
      Label2: do {
          Label3: while (true) {
          if (!(0 < v_587205415)) break Label3;
            var d_587205417 = (v_587205415 % radix_587205408);
            v_587205415 = Math.trunc(((v_587205415 / radix_587205408) ));
            result_587205410.push.apply(result_587205410, mkDigit_1073741829(d_587205417, spec_587205409.typ));;
          }
      } while (false);
      Label4: do {
        var idx_587205422 = 0;
        var colontmp__452985113 = 0;
        colontmp__452985113 = Math.trunc((result_587205410).length / 2);
        var i_452985114 = 0;
        Label5: do {
            Label6: while (true) {
            if (!(i_452985114 < colontmp__452985113)) break Label6;
              idx_587205422 = i_452985114;
              var Temporary7 = result_587205410[idx_587205422]; result_587205410[idx_587205422] = result_587205410[(((result_587205410).length - idx_587205422) - 1)]; result_587205410[(((result_587205410).length - idx_587205422) - 1)] = Temporary7;              i_452985114 += 1;
            }
        } while (false);
      } while (false);
    }
    
    if (spec_587205409.padWithZero) {
    if (negative_587205414) Temporary8 = true; else {      Temporary8 = !((spec_587205409.sign == 45));    }    var sign_587205427 = Temporary8;
    var toFill_587205431 = (((spec_587205409.minimumWidth - (result_587205410).length) - (xx_587205416).length) - (sign_587205427 ? 1 : 0));
    if ((0 < toFill_587205431)) {
    result_587205410 = nimCopy(null, (nsuRepeatChar(48, toFill_587205431) || []).concat(result_587205410 || []), NTI33554439);
    }
    
    }
    
    if (negative_587205414) {
    result_587205410 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_587205416 || [],result_587205410 || []), NTI33554439);
    }
    else {
    if (!((spec_587205409.sign == 45))) {
    result_587205410 = nimCopy(null, [spec_587205409.sign].concat(xx_587205416 || [],result_587205410 || []), NTI33554439);
    }
    else {
      result_587205410 = nimCopy(null, (xx_587205416 || []).concat(result_587205410 || []), NTI33554439);
    }
    }
    if ((spec_587205409.align == 60)) {
    Label9: do {
      var i_587205436 = 0;
      var colontmp__452985117 = 0;
      colontmp__452985117 = (result_587205410).length;
      var i_452985118 = colontmp__452985117;
      Label10: do {
          Label11: while (true) {
          if (!(i_452985118 < spec_587205409.minimumWidth)) break Label11;
            i_587205436 = i_452985118;
            addChar(result_587205410, spec_587205409.fill);;
            i_452985118 += 1;
          }
      } while (false);
    } while (false);
    }
    else {
      var toFill_587205437 = (spec_587205409.minimumWidth - (result_587205410).length);
      if ((spec_587205409.align == 94)) {
      var half_587205438 = Math.trunc(toFill_587205437 / 2);
      result_587205410 = nimCopy(null, (nsuRepeatChar(spec_587205409.fill, half_587205438) || []).concat(result_587205410 || [],nsuRepeatChar(spec_587205409.fill, (toFill_587205437 - half_587205438)) || []), NTI33554439);
      }
      else {
        if ((0 < toFill_587205437)) {
        result_587205410 = nimCopy(null, (nsuRepeatChar(spec_587205409.fill, toFill_587205437) || []).concat(result_587205410 || []), NTI33554439);
        }
        
      }
      
    }
    

  return result_587205410;

}

function formatValue_587205397(result_587205399, result_587205399_Idx, value_587205400, specifier_587205401) {
  BeforeRet: do {
    if (((specifier_587205401).length == 0)) {
    result_587205399[result_587205399_Idx].push.apply(result_587205399[result_587205399_Idx], HEX24_318767107(value_587205400));;
    break BeforeRet;
    }
    
    var spec_587205402 = parseStandardFormatSpecifier_1073741880(specifier_587205401, 0, false);
    var radix_587205403 = 10;
    switch (spec_587205402.typ) {
    case 120:
    case 88:
      radix_587205403 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_587205403 = 2;
      break;
    case 111:
      radix_587205403 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_587205402.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_587205399[result_587205399_Idx].push.apply(result_587205399[result_587205399_Idx], formatInt_587205405(value_587205400, radix_587205403, spec_587205402));;
  } while (false);

  
}

function render_587205376(x_587205377) {
  var result_587205378 = [];

    var r_587205379 = ((HEX2F_33557576((x_587205377 - 21), 10)) | 0);
    var f_587205380 = Math.trunc((x_587205377 - 21) % 10);
    var fmtRes_587205389 = [mnewString(0)];
    addChar(fmtRes_587205389[0], (f_587205380 + 97));;
    formatValue_587205397(fmtRes_587205389, 0, (8 - r_587205379), []);
    result_587205378 = nimCopy(null, fmtRes_587205389[0], NTI33554439);

  return result_587205378;

}

function startsWith_603981023(s_603981024, prefix_603981025) {
    var Temporary1;

  var result_603981026 = false;

    if (!(0 < (s_603981024).length)) Temporary1 = false; else {      Temporary1 = (s_603981024[0] == prefix_603981025);    }    result_603981026 = Temporary1;

  return result_603981026;

}

function isblack_587206652(pos_587206653) {
    var Temporary1;

  var result_587206654 = false;

    if (startsWith_603981023(pos_587206653.board, 10)) {
    Temporary1 = true;
    }
    else {
    Temporary1 = false;
    }
    
    result_587206654 = Temporary1;

  return result_587206654;

}

function isdead_587206722(s_587206723, mm_587206724) {
              var Temporary11;
              var Temporary12;

  var result_587206725 = false;

  BeforeRet: do {
    var check_587206726 = false;
    Label1: do {
      var i_587206731 = 0;
      var res_452985153 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452985153 <= 119)) break Label3;
            i_587206731 = res_452985153;
            Label4: do {
              var p_587206732 = s_587206723.board[i_587206731];
              if (!(nsuIsUpperAsciiChar(p_587206732))) {
              break Label4;
              }
              
              var a_587206733 = attacks_587205999(s_587206723, i_587206731);
              Label5: do {
                var j_587206737 = 0;
                var i_452985150 = 0;
                var L_452985151 = (a_587206733).length;
                Label6: do {
                    Label7: while (true) {
                    if (!(i_452985150 < L_452985151)) break Label7;
                      j_587206737 = a_587206733[i_452985150];
                      if ((s_587206723.board[j_587206737] == 107)) {
                      check_587206726 = true;
                      }
                      
                      i_452985150 += 1;
                    }
                } while (false);
              } while (false);
            } while (false);
            res_452985153 += 1;
          }
      } while (false);
    } while (false);
    if (check_587206726) {
    result_587206725 = false;
    break BeforeRet;
    }
    
    Label8: do {
      var m_587206756 = {Field0: 0, Field1: 0};
      var i_452985156 = 0;
      var L_452985157 = (mm_587206724).length;
      Label9: do {
          Label10: while (true) {
          if (!(i_452985156 < L_452985157)) break Label10;
            m_587206756 = mm_587206724[i_452985156];
            var q_587206757 = s_587206723.board[m_587206756["Field1"]];
              if (!!((q_587206757 == 46))) Temporary12 = false; else {                Temporary12 = (0 < s_587206723.lastcap);              }              if (!Temporary12) Temporary11 = false; else {                Temporary11 = (m_587206756["Field1"] == s_587206723.lastcap);              }            if (Temporary11) {
            result_587206725 = false;
            break BeforeRet;
            }
            
            i_452985156 += 1;
          }
      } while (false);
    } while (false);
    result_587206725 = true;
    break BeforeRet;
  } while (false);

  return result_587206725;

}

function mirror_587206655(x_587206656) {
  var result_587206657 = [];

  BeforeRet: do {
    var f1_587206667 = (104 - (x_587206656[0] - 97));
    var f2_587206677 = (104 - (x_587206656[2] - 97));
    var r1_587206687 = (56 - (x_587206656[1] - 49));
    var r2_587206697 = (56 - (x_587206656[3] - 49));
    if (((x_587206656).length == 4)) {
    result_587206657 = nimCopy(null, [f1_587206667].concat([r1_587206687],[f2_587206677],[r2_587206697]), NTI33554439);
    break BeforeRet;
    }
    else {
      result_587206657 = nimCopy(null, [f1_587206667].concat([r1_587206687],[f2_587206677],[r2_587206697],[x_587206656[4]]), NTI33554439);
      break BeforeRet;
    }
    
  } while (false);

  return result_587206657;

}

function mirrmv_587206698(pos_587206699, x_587206700) {
  var result_587206701 = [];

  BeforeRet: do {
    if (isblack_587206652(pos_587206699)) {
    result_587206701 = nimCopy(null, mirror_587206655(x_587206700), NTI33554439);
    break BeforeRet;
    }
    else {
      result_587206701 = nimCopy(null, x_587206700, NTI33554439);
      break BeforeRet;
    }
    
  } while (false);

  return result_587206701;

}

function searchmax_587207182(b_587207183, ply_587207184, alpha_587207185, beta_587207186, pv_587207187) {
      var Temporary1;

  var result_587207188 = {Field0: 0.0, Field1: []};

  BeforeRet: do {
    NODES_587205365[0] += 1;
    if ((QPLIES_587205364[0] <= ply_587207184)) {
    var colontmp__452985125 = b_587207183.score;
    var colontmp__452985126 = nimCopy(null, pv_587207187, NTI33554439);
    result_587207188 = nimCopy(result_587207188, {Field0: colontmp__452985125, Field1: nimCopy(null, colontmp__452985126, NTI33554439)}, NTI587205069);
    break BeforeRet;
    }
    
    if (!(contains_587205538(b_587207183.board, 75))) {
    var colontmp__452985127 = -9999.0;
    var colontmp__452985128 = nimCopy(null, pv_587207187, NTI33554439);
    result_587207188 = nimCopy(result_587207188, {Field0: colontmp__452985127, Field1: nimCopy(null, colontmp__452985128, NTI33554439)}, NTI587205069);
    break BeforeRet;
    }
    
    if (!(contains_587205538(b_587207183.board, 107))) {
    var colontmp__452985129 = 9999.0;
    var colontmp__452985130 = nimCopy(null, pv_587207187, NTI33554439);
    result_587207188 = nimCopy(result_587207188, {Field0: colontmp__452985129, Field1: nimCopy(null, colontmp__452985130, NTI33554439)}, NTI587205069);
    break BeforeRet;
    }
    
    var moves_587207201 = order_587206767(b_587207183, ply_587207184, gen_moves_587206085(b_587207183, false));
      if (!(MAXPLIES_587205363[0] < ply_587207184)) Temporary1 = false; else {        Temporary1 = isdead_587206722(b_587207183, moves_587207201);      }    if (Temporary1) {
    var colontmp__452985131 = b_587207183.score;
    var colontmp__452985132 = nimCopy(null, pv_587207187, NTI33554439);
    result_587207188 = nimCopy(result_587207188, {Field0: colontmp__452985131, Field1: nimCopy(null, colontmp__452985132, NTI33554439)}, NTI587205069);
    break BeforeRet;
    }
    
    if ((MAXPLIES_587205363[0] < ply_587207184)) {
    var mov2_587207202 = [];
    Label2: do {
      var i_587207210 = 0;
      var colontmp__452985134 = 0;
      colontmp__452985134 = ((moves_587207201).length - 1);
      var res_452985135 = 0;
      Label3: do {
          Label4: while (true) {
          if (!(res_452985135 <= colontmp__452985134)) break Label4;
            i_587207210 = res_452985135;
            if (!((b_587207183.board[moves_587207201[i_587207210]["Field1"]] == 46))) {
            mov2_587207202.push({Field0: moves_587207201[i_587207210]["Field0"], Field1: moves_587207201[i_587207210]["Field1"]});;
            }
            
            res_452985135 += 1;
          }
      } while (false);
    } while (false);
    moves_587207201 = nimCopy(null, mov2_587207202, NTI587205082);
    }
    
    if (((moves_587207201).length == 0)) {
    var colontmp__452985137 = b_587207183.score;
    var colontmp__452985138 = nimCopy(null, pv_587207187, NTI33554439);
    result_587207188 = nimCopy(result_587207188, {Field0: colontmp__452985137, Field1: nimCopy(null, colontmp__452985138, NTI33554439)}, NTI587205069);
    break BeforeRet;
    }
    
    var al_587207218 = alpha_587207185;
    var v_587207219 = nimCopy(null, pv_587207187, NTI33554439);
    Label5: do {
      var i_587207227 = 0;
      var colontmp__452985142 = 0;
      colontmp__452985142 = ((moves_587207201).length - 1);
      var res_452985143 = 0;
      Label6: do {
          Label7: while (true) {
          if (!(res_452985143 <= colontmp__452985142)) break Label7;
            i_587207227 = res_452985143;
            var c_587207228 = move_587206630(b_587207183, moves_587207201[i_587207227]["Field0"], moves_587207201[i_587207227]["Field1"]);
            var d_587207229 = rotate_587205509(c_587207228);
            var fr_587207230 = render_587205376(moves_587207201[i_587207227]["Field0"]);
            var to_587207231 = render_587205376(moves_587207201[i_587207227]["Field1"]);
            var colontmp__452985159 = searchmax_587207182(d_587207229, (ply_587207184 + 1), -(beta_587207186), -(al_587207218), (pv_587207187 || []).concat(makeNimstrLit(" ") || [],mirrmv_587206698(c_587207228, (fr_587207230 || []).concat(to_587207231 || [])) || []));
            var t_587207232 = colontmp__452985159["Field0"];
            var vv_587207233 = nimCopy(null, colontmp__452985159["Field1"], NTI33554439);
            t_587207232 = -(t_587207232);
            if ((beta_587207186 <= t_587207232)) {
            var colontmp__452985140 = beta_587207186;
            var colontmp__452985141 = nimCopy(null, vv_587207233, NTI33554439);
            result_587207188 = nimCopy(result_587207188, {Field0: colontmp__452985140, Field1: nimCopy(null, colontmp__452985141, NTI33554439)}, NTI587205069);
            break BeforeRet;
            }
            
            if ((al_587207218 < t_587207232)) {
            al_587207218 = t_587207232;
            v_587207219 = nimCopy(null, vv_587207233, NTI33554439);
            }
            
            res_452985143 += 1;
          }
      } while (false);
    } while (false);
    var colontmp__452985145 = al_587207218;
    var colontmp__452985146 = nimCopy(null, v_587207219, NTI33554439);
    result_587207188 = nimCopy(result_587207188, {Field0: colontmp__452985145, Field1: nimCopy(null, colontmp__452985146, NTI33554439)}, NTI587205069);
    break BeforeRet;
  } while (false);

  return result_587207188;

}

function nimFloatToString_335544446(a_335544447) {
  var result_335544448 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_335544447))
      result_335544448 = a_335544447 === 0 && 1 / a_335544447 < 0 ? "-0.0" : a_335544447+".0"
    else {
      result_335544448 = a_335544447+""
      if(nimOnlyDigitsOrMinus(result_335544448)){
        result_335544448 = a_335544447+".0"
      }
    }
  

  return result_335544448;

}

function addFloat_33557373(result_33557375, result_33557375_Idx, x_33557376) {
    add_33556420(result_33557375, result_33557375_Idx, nimFloatToString_335544446(x_33557376));

  
}

function HEX24_33557369(x_33557371) {
  var result_33557372 = [[]];

    addFloat_33557373(result_33557372, 0, x_33557371);

  return result_33557372[0];

}

function defenders_587206702(pos_587206703, x_587206704) {
  var result_587206705 = [];

    var db_587206706 = {board: nimCopy(null, pos_587206703.board, NTI33554439), score: pos_587206703.score, wc_w: pos_587206703.wc_w, wc_e: pos_587206703.wc_e, bc_w: pos_587206703.bc_w, bc_e: pos_587206703.bc_e, ep: pos_587206703.ep, kp: pos_587206703.kp, lastcap: 0};
    db_587206706.board[x_587206704] = 112;
    var moves_587206707 = gen_moves_587206085(db_587206706, false);
    Label1: do {
      var n_587206715 = 0;
      var colontmp__452985181 = 0;
      colontmp__452985181 = ((moves_587206707).length - 1);
      var res_452985182 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452985182 <= colontmp__452985181)) break Label3;
            n_587206715 = res_452985182;
            var i_587206716 = moves_587206707[n_587206715]["Field0"];
            var j_587206717 = moves_587206707[n_587206715]["Field1"];
            if ((j_587206717 == x_587206704)) {
            result_587206705.push(i_587206716);;
            }
            
            res_452985182 += 1;
          }
      } while (false);
    } while (false);

  return result_587206705;

}

function HEX2DHEX3D_587207307(x_587207309, x_587207309_Idx, y_587207310) {
    x_587207309[x_587207309_Idx] = (x_587207309[x_587207309_Idx] - y_587207310);

  
}

function turing_587207243(s_587207244) {
  var result_587207245 = [0.0];

    var bking_587207246 = false;
    Label1: do {
      var i_587207251 = 0;
      var res_452985178 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452985178 <= 119)) break Label3;
            i_587207251 = res_452985178;
            Label4: do {
              var p_587207252 = s_587207244.board[i_587207251];
              var tt_587207253 = [0.0];
              if (!(nsuIsUpperAsciiChar(p_587207252))) {
              break Label4;
              }
              
              var a_587207254 = attacks_587205999(s_587207244, i_587207251);
              Label5: do {
                var j_587207258 = 0;
                var i_452985163 = 0;
                var L_452985164 = (a_587207254).length;
                Label6: do {
                    Label7: while (true) {
                    if (!(i_452985163 < L_452985164)) break Label7;
                      j_587207258 = a_587207254[i_452985163];
                      if ((s_587207244.board[j_587207258] == 107)) {
                      bking_587207246 = true;
                      }
                      
                      i_452985163 += 1;
                    }
                } while (false);
              } while (false);
              if (!((p_587207252 == 80))) {
              if ((0 < (a_587207254).length)) {
              Label8: do {
                var j_587207265 = 0;
                var i_452985167 = 0;
                var L_452985168 = (a_587207254).length;
                Label9: do {
                    Label10: while (true) {
                    if (!(i_452985167 < L_452985168)) break Label10;
                      j_587207265 = a_587207254[i_452985167];
                      if ((s_587207244.board[j_587207265] == 46)) {
                      HEX2BHEX3D_603981810(tt_587207253, 0, 1.0);
                      }
                      else {
                      HEX2BHEX3D_603981810(tt_587207253, 0, 2.0);
                      }
                      
                      i_452985167 += 1;
                    }
                } while (false);
              } while (false);
              }
              
              HEX2BHEX3D_603981810(result_587207245, 0, Math.sqrt(tt_587207253[0]));
              }
              
              if ((((p_587207252 == 82) || (p_587207252 == 66)) || (p_587207252 == 78))) {
              var ndef_587207281 = (defenders_587206702(s_587207244, i_587207251)).length;
              if ((0 < ndef_587207281)) {
              HEX2BHEX3D_603981810(result_587207245, 0, 1.0);
              }
              
              if ((1 < ndef_587207281)) {
              HEX2BHEX3D_603981810(result_587207245, 0, 0.5);
              }
              
              }
              
              if ((p_587207252 == 75)) {
              var ks_587207290 = {board: nimCopy(null, s_587207244.board, NTI33554439), score: s_587207244.score, wc_w: s_587207244.wc_w, wc_e: s_587207244.wc_e, bc_w: s_587207244.bc_w, bc_e: s_587207244.bc_e, ep: s_587207244.ep, kp: s_587207244.kp, lastcap: 0};
              tt_587207253[0] = 0.0;
              ks_587207290.board[i_587207251] = 81;
              var ka_587207291 = attacks_587205999(ks_587207290, i_587207251);
              if ((0 < (ka_587207291).length)) {
              Label11: do {
                var j_587207298 = 0;
                var i_452985171 = 0;
                var L_452985172 = (ka_587207291).length;
                Label12: do {
                    Label13: while (true) {
                    if (!(i_452985171 < L_452985172)) break Label13;
                      j_587207298 = ka_587207291[i_452985171];
                      if ((s_587207244.board[j_587207298] == 46)) {
                      HEX2BHEX3D_603981810(tt_587207253, 0, 1.0);
                      }
                      else {
                      HEX2BHEX3D_603981810(tt_587207253, 0, 2.0);
                      }
                      
                      i_452985171 += 1;
                    }
                } while (false);
              } while (false);
              }
              
              HEX2DHEX3D_587207307(result_587207245, 0, Math.sqrt(tt_587207253[0]));
              }
              
              if ((p_587207252 == 80)) {
              var rad_587207311 = (((6.0 - HEX2F_33557576((i_587207251 - 21), 10))) | 0);
              HEX2BHEX3D_603981810(result_587207245, 0, (0.2 * rad_587207311));
              var pdef_587207316 = defenders_587206702(s_587207244, i_587207251);
              var pawndef_587207317 = false;
              Label14: do {
                var k_587207321 = 0;
                var i_452985175 = 0;
                var L_452985176 = (pdef_587207316).length;
                Label15: do {
                    Label16: while (true) {
                    if (!(i_452985175 < L_452985176)) break Label16;
                      k_587207321 = pdef_587207316[i_452985175];
                      if (!((s_587207244.board[k_587207321] == 80))) {
                      pawndef_587207317 = true;
                      }
                      
                      i_452985175 += 1;
                    }
                } while (false);
              } while (false);
              if (pawndef_587207317) {
              HEX2BHEX3D_603981810(result_587207245, 0, 0.3);
              }
              
              }
              
            } while (false);
            res_452985178 += 1;
          }
      } while (false);
    } while (false);
    if (bking_587207246) {
    HEX2BHEX3D_603981810(result_587207245, 0, 0.5);
    }
    

  return result_587207245[0];

}

function newSeq_587207401(len_587207403) {
  var result_587207404 = [];

    result_587207404 = new Array(len_587207403); for (var i = 0 ; i < len_587207403 ; ++i) { result_587207404[i] = {Field0: 0.0, Field1: [], Field2: [], Field3: 0, Field4: 0, Field5: []}; }
  return result_587207404;

}

function mergeAlt_587207430(a_587207432, b_587207433, lo_587207434, m_587207435, hi_587207436, cmp_587207439, order_587207440) {
  BeforeRet: do {
    if ((HEX2A_654311432(cmp_587207439(a_587207432[m_587207435], a_587207432[(m_587207435 + 1)]), order_587207440) <= 0)) {
    break BeforeRet;
    }
    
    var j_587207441 = lo_587207434;
    var bb_587207445 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(j_587207441 <= m_587207435)) break Label2;
          b_587207433[bb_587207445] = nimCopy(b_587207433[bb_587207445], a_587207432[j_587207441], NTI587205178);
          bb_587207445 += 1;
          j_587207441 += 1;
        }
    } while (false);
    var i_587207454 = 0;
    var k_587207455 = lo_587207434;
    Label3: do {
        Label4: while (true) {
        if (!((k_587207455 < j_587207441) && (j_587207441 <= hi_587207436))) break Label4;
          if ((HEX2A_654311432(cmp_587207439(b_587207433[i_587207454], a_587207432[j_587207441]), order_587207440) <= 0)) {
          a_587207432[k_587207455] = nimCopy(a_587207432[k_587207455], b_587207433[i_587207454], NTI587205178);
          i_587207454 += 1;
          }
          else {
            a_587207432[k_587207455] = nimCopy(a_587207432[k_587207455], a_587207432[j_587207441], NTI587205178);
            j_587207441 += 1;
          }
          
          k_587207455 += 1;
        }
    } while (false);
    Label5: do {
        Label6: while (true) {
        if (!(k_587207455 < j_587207441)) break Label6;
          a_587207432[k_587207455] = nimCopy(a_587207432[k_587207455], b_587207433[i_587207454], NTI587205178);
          k_587207455 += 1;
          i_587207454 += 1;
        }
    } while (false);
  } while (false);

  
}

function sort_587207389(a_587207391, cmp_587207394, order_587207395) {
    var n_587207400 = (a_587207391).length;
    var b_587207427 = newSeq_587207401(Math.trunc(n_587207400 / 2));
    var s_587207428 = 1;
    Label1: do {
        Label2: while (true) {
        if (!(s_587207428 < n_587207400)) break Label2;
          var m_587207429 = ((n_587207400 - 1) - s_587207428);
          Label3: do {
              Label4: while (true) {
              if (!(0 <= m_587207429)) break Label4;
                mergeAlt_587207430(a_587207391, b_587207427, nimMax(((m_587207429 - s_587207428) + 1), 0), m_587207429, (m_587207429 + s_587207428), cmp_587207394, order_587207395);
                m_587207429 -= (s_587207428 * 2);
              }
          } while (false);
          s_587207428 = (s_587207428 * 2);
        }
    } while (false);

  
}

function myCmp_587207381(x_587207384, y_587207385) {
    var Temporary1;

  var result_587207386 = 0;

    if ((y_587207385["Field0"] < x_587207384["Field0"])) {
    Temporary1 = -1;
    }
    else {
    Temporary1 = 1;
    }
    
    result_587207386 = Temporary1;

  return result_587207386;

}

function nucruneLen(s_956301322) {
  var result_956301323 = 0;

    result_956301323 = 0;
    var i_956301324 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_956301324 < (s_956301322).length)) break Label2;
          if ((s_956301322[i_956301324] <= 127)) {
          i_956301324 += 1;
          }
          else {
          if (((s_956301322[i_956301324] >>> 5) == 6)) {
          i_956301324 += 2;
          }
          else {
          if (((s_956301322[i_956301324] >>> 4) == 14)) {
          i_956301324 += 3;
          }
          else {
          if (((s_956301322[i_956301324] >>> 3) == 30)) {
          i_956301324 += 4;
          }
          else {
          if (((s_956301322[i_956301324] >>> 2) == 62)) {
          i_956301324 += 5;
          }
          else {
          if (((s_956301322[i_956301324] >>> 1) == 126)) {
          i_956301324 += 6;
          }
          else {
          i_956301324 += 1;
          }
          }}}}}
          result_956301323 += 1;
        }
    } while (false);

  return result_956301323;

}

function runeLenAt_956301377(s_956301378, i_956301379) {
  var result_956301380 = 0;

    if ((s_956301378[i_956301379] <= 127)) {
    result_956301380 = 1;
    }
    else {
    if (((s_956301378[i_956301379] >>> 5) == 6)) {
    result_956301380 = 2;
    }
    else {
    if (((s_956301378[i_956301379] >>> 4) == 14)) {
    result_956301380 = 3;
    }
    else {
    if (((s_956301378[i_956301379] >>> 3) == 30)) {
    result_956301380 = 4;
    }
    else {
    if (((s_956301378[i_956301379] >>> 2) == 62)) {
    result_956301380 = 5;
    }
    else {
    if (((s_956301378[i_956301379] >>> 1) == 126)) {
    result_956301380 = 6;
    }
    else {
      result_956301380 = 1;
    }
    }}}}}

  return result_956301380;

}

function runeOffset_956301947(s_956301948, pos_956301949, start_956301950) {
  var result_956301951 = 0;

  BeforeRet: do {
    var i_956301952 = 0;
    var o_956301953 = start_956301950;
    Label1: do {
        Label2: while (true) {
        if (!(i_956301952 < pos_956301949)) break Label2;
          o_956301953 += runeLenAt_956301377(s_956301948, o_956301953);
          if (((s_956301948).length <= o_956301953)) {
          result_956301951 = -1;
          break BeforeRet;
          }
          
          i_956301952 += 1;
        }
    } while (false);
    result_956301951 = o_956301953;
    break BeforeRet;
  } while (false);

  return result_956301951;

}

function validateUtf8_956301589(s_956301590) {
            var Temporary3;
            var Temporary4;
            var Temporary5;
            var Temporary6;
            var Temporary7;
            var Temporary8;

  var result_956301591 = 0;

  BeforeRet: do {
    var i_956301592 = 0;
    var L_956301593 = (s_956301590).length;
    Label1: do {
        Label2: while (true) {
        if (!(i_956301592 < L_956301593)) break Label2;
          if ((s_956301590[i_956301592] <= 127)) {
          i_956301592 += 1;
          }
          else {
          if (((s_956301590[i_956301592] >>> 5) == 6)) {
          if ((s_956301590[i_956301592] < 194)) {
          result_956301591 = i_956301592;
          break BeforeRet;
          }
          
            if (!((i_956301592 + 1) < L_956301593)) Temporary3 = false; else {              Temporary3 = ((s_956301590[(i_956301592 + 1)] >>> 6) == 2);            }          if (Temporary3) {
          i_956301592 += 2;
          }
          else {
            result_956301591 = i_956301592;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_956301590[i_956301592] >>> 4) == 14)) {
            if (!((i_956301592 + 2) < L_956301593)) Temporary5 = false; else {              Temporary5 = ((s_956301590[(i_956301592 + 1)] >>> 6) == 2);            }            if (!Temporary5) Temporary4 = false; else {              Temporary4 = ((s_956301590[(i_956301592 + 2)] >>> 6) == 2);            }          if (Temporary4) {
          i_956301592 += 3;
          }
          else {
            result_956301591 = i_956301592;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_956301590[i_956301592] >>> 3) == 30)) {
            if (!((i_956301592 + 3) < L_956301593)) Temporary8 = false; else {              Temporary8 = ((s_956301590[(i_956301592 + 1)] >>> 6) == 2);            }            if (!Temporary8) Temporary7 = false; else {              Temporary7 = ((s_956301590[(i_956301592 + 2)] >>> 6) == 2);            }            if (!Temporary7) Temporary6 = false; else {              Temporary6 = ((s_956301590[(i_956301592 + 3)] >>> 6) == 2);            }          if (Temporary6) {
          i_956301592 += 4;
          }
          else {
            result_956301591 = i_956301592;
            break BeforeRet;
          }
          
          }
          else {
            result_956301591 = i_956301592;
            break BeforeRet;
          }
          }}}
        }
    } while (false);
    result_956301591 = -1;
    break BeforeRet;
  } while (false);

  return result_956301591;

}

function alignString_1073741842(s_1073741843, minimumWidth_1073741844, align_1073741845, fill_1073741846) {
      var Temporary1;

  var result_1073741847 = [];

    if ((minimumWidth_1073741844 == 0)) {
    result_1073741847 = nimCopy(null, s_1073741843, NTI33554439);
    }
    else {
      if ((validateUtf8_956301589(s_1073741843) == -1)) {
      Temporary1 = nucruneLen(s_1073741843);
      }
      else {
      Temporary1 = (s_1073741843).length;
      }
      
      var sRuneLen_1073741848 = Temporary1;
      var toFill_1073741849 = (minimumWidth_1073741844 - sRuneLen_1073741848);
      if ((toFill_1073741849 <= 0)) {
      result_1073741847 = nimCopy(null, s_1073741843, NTI33554439);
      }
      else {
      if (((align_1073741845 == 60) || (align_1073741845 == 0))) {
      result_1073741847 = nimCopy(null, (s_1073741843 || []).concat(nsuRepeatChar(fill_1073741846, toFill_1073741849) || []), NTI33554439);
      }
      else {
      if ((align_1073741845 == 94)) {
      var half_1073741850 = Math.trunc(toFill_1073741849 / 2);
      result_1073741847 = nimCopy(null, (nsuRepeatChar(fill_1073741846, half_1073741850) || []).concat(s_1073741843 || [],nsuRepeatChar(fill_1073741846, (toFill_1073741849 - half_1073741850)) || []), NTI33554439);
      }
      else {
        result_1073741847 = nimCopy(null, (nsuRepeatChar(fill_1073741846, toFill_1073741849) || []).concat(s_1073741843 || []), NTI33554439);
      }
      }}
    }
    

  return result_1073741847;

}

function formatValue_1073741984(result_1073741985, result_1073741985_Idx, value_1073741986, specifier_1073741987) {
    var spec_1073741988 = parseStandardFormatSpecifier_1073741880(specifier_1073741987, 0, false);
    var value_1073741989 = nimCopy(null, value_1073741986, NTI33554439);
    switch (spec_1073741988.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_1073741988.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_1073741988.precision == -1))) {
    if ((spec_1073741988.precision < nucruneLen(value_1073741989))) {
    (value_1073741989.length = runeOffset_956301947(value_1073741989, spec_1073741988.precision, 0));
    }
    
    }
    
    result_1073741985[result_1073741985_Idx].push.apply(result_1073741985[result_1073741985_Idx], alignString_1073741842(value_1073741989, spec_1073741988.minimumWidth, spec_1073741988.align, spec_1073741988.fill));;

  
}

function getmove_587207330(b_587207331, output_587207332) {
  var result_587207333 = [];

    NODES_587205365[0] = 0;
    var start_587207334 = epochTime_637537562();
    var moves_587207335 = order_587206767(b_587207331, 0, gen_moves_587206085(b_587207331, true));
    var tbest_587207336 = -1000000.0;
    var ll_587207337 = [];
    Label1: do {
      var i_587207345 = 0;
      var colontmp__452985040 = 0;
      colontmp__452985040 = ((moves_587207335).length - 1);
      var res_452985041 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452985041 <= colontmp__452985040)) break Label3;
            i_587207345 = res_452985041;
            var fr_587207346 = render_587205376(moves_587207335[i_587207345]["Field0"]);
            var to_587207347 = render_587205376(moves_587207335[i_587207345]["Field1"]);
            var castle_587207348 = [0.0];
            if (((b_587207331.board[moves_587207335[i_587207345]["Field0"]] == 75) && (Math.abs((moves_587207335[i_587207345]["Field0"] - moves_587207335[i_587207345]["Field1"])) == 2))) {
            HEX2BHEX3D_603981810(castle_587207348, 0, 1.0);
            }
            
            var c_587207353 = move_587206630(b_587207331, moves_587207335[i_587207345]["Field0"], moves_587207335[i_587207345]["Field1"]);
            if (isblack_587206652(c_587207353)) {
            if ((c_587207353.bc_w || c_587207353.bc_e)) {
            HEX2BHEX3D_603981810(castle_587207348, 0, 1.0);
            }
            
            }
            else {
              if ((c_587207353.wc_w || c_587207353.wc_e)) {
              HEX2BHEX3D_603981810(castle_587207348, 0, 1.0);
              }
              
            }
            
            var d_587207362 = rotate_587205509(c_587207353);
            var colontmp__452985124 = searchmax_587207182(d_587207362, 2, -1000000.0, -(tbest_587207336), mirrmv_587206698(c_587207353, (fr_587207346 || []).concat(to_587207347 || [])));
            var t_587207363 = colontmp__452985124["Field0"];
            var pv_587207364 = nimCopy(null, colontmp__452985124["Field1"], NTI33554439);
            t_587207363 = -(t_587207363);
            if ((tbest_587207336 < t_587207363)) {
            tbest_587207336 = (t_587207363 - 0.1);
            }
            
            if (output_587207332) {
            rawEcho(fr_587207346, to_587207347, makeNimstrLit(" "), HEX24_33557369(t_587207363), makeNimstrLit(" "), HEX24_33557369(turing_587207243(c_587207353)), makeNimstrLit(" "), pv_587207364);
            }
            
            ll_587207337.push({Field0: (t_587207363 + ((turing_587207243(c_587207353) + castle_587207348[0]) / 1000.0)), Field1: nimCopy(null, fr_587207346, NTI33554439), Field2: nimCopy(null, to_587207347, NTI33554439), Field3: moves_587207335[i_587207345]["Field0"], Field4: moves_587207335[i_587207345]["Field1"], Field5: nimCopy(null, pv_587207364, NTI33554439)});;
            res_452985041 += 1;
          }
      } while (false);
    } while (false);
    sort_587207389(ll_587207337, myCmp_587207381, 1);
    var diff_587207489 = (epochTime_637537562() - start_587207334);
    var nps_587207490 = (((NODES_587205365[0] / diff_587207489)) | 0);
    var fmtRes_587207495 = [mnewString(0)];
    fmtRes_587207495[0].push.apply(fmtRes_587207495[0], makeNimstrLit("info depth "));;
    formatValue_587205397(fmtRes_587207495, 0, MAXPLIES_587205363[0], []);
    fmtRes_587207495[0].push.apply(fmtRes_587207495[0], makeNimstrLit(" seldepth "));;
    formatValue_587205397(fmtRes_587207495, 0, QPLIES_587205364[0], []);
    fmtRes_587207495[0].push.apply(fmtRes_587207495[0], makeNimstrLit(" score cp "));;
    formatValue_587205397(fmtRes_587207495, 0, (((100.0 * ll_587207337[0]["Field0"])) | 0), []);
    fmtRes_587207495[0].push.apply(fmtRes_587207495[0], makeNimstrLit(" time "));;
    formatValue_587205397(fmtRes_587207495, 0, (((1000.0 * diff_587207489)) | 0), []);
    fmtRes_587207495[0].push.apply(fmtRes_587207495[0], makeNimstrLit(" nodes "));;
    formatValue_587205397(fmtRes_587207495, 0, NODES_587205365[0], []);
    fmtRes_587207495[0].push.apply(fmtRes_587207495[0], makeNimstrLit(" nps "));;
    formatValue_587205397(fmtRes_587207495, 0, nps_587207490, []);
    fmtRes_587207495[0].push.apply(fmtRes_587207495[0], makeNimstrLit(" pv "));;
    formatValue_1073741984(fmtRes_587207495, 0, ll_587207337[0]["Field5"], []);
    rawEcho(fmtRes_587207495[0]);
    result_587207333 = nimCopy(null, (ll_587207337[0]["Field1"] || []).concat(ll_587207337[0]["Field2"] || []), NTI33554439);
    if ((((b_587207331.board[ll_587207337[0]["Field3"]] == 80) && (21 <= ll_587207337[0]["Field4"])) && (ll_587207337[0]["Field4"] <= 28))) {
    result_587207333 = nimCopy(null, (result_587207333 || []).concat(makeNimstrLit("q") || []), NTI33554439);
    }
    

  return result_587207333;

}

function fen_to_move_452984835(fen_452984836) {
    
function getgame_fen_452984840(x_452984841) {
      var result_452984842 = ({board: [], score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0});

      BeforeRet: do {
        var inv_452984843 = false;
        var l_452984844 = nimCopy(null, x_452984841, NTI33554439);
        var ff_452984874 = HEX5BHEX5D_452984854(nsuSplitString(l_452984844, makeNimstrLit(" "), -1), HEX2EHEX2E_956302161(2, 7));
        var ff2_452984875 = nsuJoinSep(ff_452984874, makeNimstrLit(" "));
        var b_452984876 = fromfen_587205515(ff2_452984875);
        if (contains_603981402(ff2_452984875, makeNimstrLit(" w "))) {
        side_452984839 = true;
        inv_452984843 = false;
        }
        else {
          side_452984839 = false;
          inv_452984843 = true;
        }
        
        if ((8 < (nsuSplitString(l_452984844, makeNimstrLit(" "), -1)).length)) {
        var mm_452984912 = HEX5BHEX5D_452984889(nsuSplitString(l_452984844, makeNimstrLit(" "), -1), HEX2EHEX2E_905969744(9, 1));
        Label1: do {
          var i_452984931 = [];
          var i_452984976 = 0;
          var L_452984977 = (mm_452984912).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_452984976 < L_452984977)) break Label3;
                i_452984931 = mm_452984912[i_452984976];
                var fr_452984950 = parse_587205439(HEX5BHEX5D_956302186(i_452984931, HEX2EHEX2E_956302161(0, 1)), inv_452984843);
                var to_452984969 = parse_587205439(HEX5BHEX5D_956302186(i_452984931, HEX2EHEX2E_956302161(2, 3)), inv_452984843);
                var c_452984970 = move_587206630(b_452984876, fr_452984950, to_452984969);
                side_452984839 = !(side_452984839);
                var d_452984971 = rotate_587205509(c_452984970);
                b_452984876 = nimCopy(b_452984876, d_452984971, NTI587204073);
                inv_452984843 = !(inv_452984843);
                i_452984976 += 1;
              }
          } while (false);
        } while (false);
        }
        
        result_452984842 = nimCopy(result_452984842, b_452984876, NTI587204073);
        break BeforeRet;
      } while (false);

      return result_452984842;

    }

  var result_452984837 = [];

  BeforeRet: do {
    var b_452984838 = ({board: [], score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0});
    var side_452984839 = true;
    b_452984838 = nimCopy(b_452984838, getgame_fen_452984840((makeNimstrLit("position fen ") || []).concat(fen_452984836 || [])), NTI587204073);
    var m_452984972 = getmove_587207330(b_452984838, false);
    if (!(side_452984839)) {
    m_452984972 = nimCopy(null, mirror_587206655(m_452984972), NTI33554439);
    }
    
    result_452984837 = nimCopy(null, m_452984972, NTI33554439);
    break BeforeRet;
  } while (false);

  return result_452984837;

}

/* web worker code */

self.addEventListener('message', function(e) {
	self.postMessage(toJSStr(fen_to_move_452984835(makeNimstrLit(e.data))));
}, false);


