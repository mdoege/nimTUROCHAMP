/* Generated by the Nim Compiler v1.0.6 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI201917 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI201669 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI201668 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI199442 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI199084 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI187048 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI187044 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3630 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3654 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI195926 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI106432 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI109247 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI62907 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3662 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3646 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157616 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
var NNI3628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3628.node = NNI3628;
NTI3708.base = NTI3626;
NTI3714.base = NTI3626;
var NNI3626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI114, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3714, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3628.base = NTI3626;
NTI3650.base = NTI3628;
NTI157616.base = NTI138;
var NNI3646 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3646.node = NNI3646;
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
NTI3642.base = NTI3628;
NTI3646.base = NTI3642;
var NNI3658 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3658.node = NNI3658;
NTI3658.base = NTI3628;
var NNI3662 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3662.node = NNI3662;
NTI3662.base = NTI3628;
var NNI62907 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI104, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI62907.node = NNI62907;
var NNI109247 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI106432, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI109247.node = NNI109247;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
NTI3644.base = NTI3642;
var NNI195926 = {kind: 2, len: 9, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "board", len: 0, typ: NTI138, name: "board", sons: null}, 
{kind: 1, offset: "score", len: 0, typ: NTI124, name: "score", sons: null}, 
{kind: 1, offset: "wc_w", len: 0, typ: NTI130, name: "wc_w", sons: null}, 
{kind: 1, offset: "wc_e", len: 0, typ: NTI130, name: "wc_e", sons: null}, 
{kind: 1, offset: "bc_w", len: 0, typ: NTI130, name: "bc_w", sons: null}, 
{kind: 1, offset: "bc_e", len: 0, typ: NTI130, name: "bc_e", sons: null}, 
{kind: 1, offset: "ep", len: 0, typ: NTI104, name: "ep", sons: null}, 
{kind: 1, offset: "kp", len: 0, typ: NTI104, name: "kp", sons: null}, 
{kind: 1, offset: "lastcap", len: 0, typ: NTI104, name: "lastcap", sons: null}]};
NTI195926.node = NNI195926;
var NNI3654 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3654.node = NNI3654;
var NNI3652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3652.node = NNI3652;
var NNI3630 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3630.node = NNI3630;
NTI3630.base = NTI3626;
NTI3652.base = NTI3630;
NTI3654.base = NTI3652;
NTI187044.base = NTI187048;
var NNI199084 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI199084.node = NNI199084;
var NNI199442 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI124, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI199442.node = NNI199442;
var NNI201669 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI201669.node = NNI201669;
NTI201668.base = NTI201669;
var NNI201917 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI124, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI138, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI104, name: "Field3", sons: null}, 
{kind: 1, offset: "Field4", len: 0, typ: NTI104, name: "Field4", sons: null}]};
NTI201917.node = NNI201917;

function eqStrings(a_23641, b_23642) {
		    if (a_23641 == b_23642) return true;
    if (a_23641 === null && b_23642.length == 0) return true;
    if (b_23642 === null && a_23641.length == 0) return true;
    if ((!a_23641) || (!b_23642)) return false;
    var alen = a_23641.length;
    if (alen != b_23642.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_23641[i] != b_23642[i]) return false;
    return true;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_24827, src_24828, ti_24829) {
	var result_25019 = null;

		switch (ti_24829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_24801(ti_24829))) {
			result_25019 = src_24828;
			}
			else {
				result_25019 = [src_24828[0], src_24828[1]];
			}
			
			break;
		case 19:
			      if (dest_24827 === null || dest_24827 === undefined) {
        dest_24827 = {};
      }
      else {
        for (var key in dest_24827) { delete dest_24827[key]; }
      }
      for (var key in src_24828) { dest_24827[key] = src_24828[key]; }
      result_25019 = dest_24827;
    
			break;
		case 18:
		case 17:
			if (!((ti_24829.base == null))) {
			result_25019 = nimCopy(dest_24827, src_24828, ti_24829.base);
			}
			else {
			if ((ti_24829.kind == 17)) {
			result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {m_type: ti_24829} : dest_24827;
			}
			else {
				result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {} : dest_24827;
			}
			}
			nimCopyAux(result_25019, src_24828, ti_24829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_24828 === null) {
        result_25019 = null;
      }
      else {
        if (dest_24827 === null || dest_24827 === undefined) {
          dest_24827 = new Array(src_24828.length);
        }
        else {
          dest_24827.length = src_24828.length;
        }
        result_25019 = dest_24827;
        for (var i = 0; i < src_24828.length; ++i) {
          result_25019[i] = nimCopy(result_25019[i], src_24828[i], ti_24829.base);
        }
      }
    
			break;
		case 28:
			      if (src_24828 !== null) {
        result_25019 = src_24828.slice(0);
      }
    
			break;
		default: 
			result_25019 = src_24828;
			break;
		}

	return result_25019;

}

function makeNimstrLit(c_23270) {
		  var ln = c_23270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_23270.charCodeAt(i);
  }
  return result;
  

	
}

function toJSStr(s_23304) {
										var Tmp5;
						var Tmp7;

	var result_23305 = null;

		var res_23363 = new_seq_23336((s_23304 != null ? s_23304.length : 0));
		var i_23365 = 0;
		var j_23367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_23365 < (s_23304 != null ? s_23304.length : 0))) break L2;
					var c_23368 = s_23304[i_23365];
					if ((c_23368 < 128)) {
					res_23363[j_23367] = String.fromCharCode(c_23368);
					i_23365 += 1;
					}
					else {
						var helper_23391 = new_seq_23336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_23392 = c_23368.toString(16);
									if (((code_23392 != null ? code_23392.length : 0) == 1)) {
									if (helper_23391 != null) { helper_23391.push("%0"); } else { helper_23391 = ["%0"]; };
									}
									else {
									if (helper_23391 != null) { helper_23391.push("%"); } else { helper_23391 = ["%"]; };
									}
									
									if (helper_23391 != null) { helper_23391.push(code_23392); } else { helper_23391 = [code_23392]; };
									i_23365 += 1;
										if (((s_23304 != null ? s_23304.length : 0) <= i_23365)) Tmp5 = true; else {											Tmp5 = (s_23304[i_23365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_23368 = s_23304[i_23365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_23363[j_23367] = decodeURIComponent(helper_23391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_23363[j_23367] = helper_23391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_23367 += 1;
				}
		} while(false);
		if (res_23363 === null) res_23363 = [];
               if (res_23363.length < j_23367) { for (var i=res_23363.length;i<j_23367;++i) res_23363.push(null); }
               else { res_23363.length = j_23367; };
		result_23305 = res_23363.join("");

	return result_23305;

}

function raiseException(e_21618, ename_21619) {
		e_21618.name = ename_21619;
		if ((excHandler == 0)) {
		unhandledException(e_21618);
		}
		
		throw e_21618;

	
}

function addInt(a_23803, b_23804) {
		    var result = a_23803 + b_23804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function cstrToNimstr(c_23287) {
		  var ln = c_23287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_23287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_23287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function chckIndx(i_25105, a_25106, b_25107) {
			var Tmp1;

	var result_25108 = 0;

	BeforeRet: do {
			if (!(a_25106 <= i_25105)) Tmp1 = false; else {				Tmp1 = (i_25105 <= b_25107);			}		if (Tmp1) {
		result_25108 = i_25105;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_25105, a_25106, b_25107);
		}
		
	} while (false);

	return result_25108;

}

function nimMax(a_24221, b_24222) {
		var Tmp1;

	var result_24223 = 0;

	BeforeRet: do {
		if ((b_24222 <= a_24221)) {
		Tmp1 = a_24221;
		}
		else {
		Tmp1 = b_24222;
		}
		
		result_24223 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24223;

}

function subInt(a_23821, b_23822) {
		    var result = a_23821 - b_23822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function nimMin(a_24203, b_24204) {
		var Tmp1;

	var result_24205 = 0;

	BeforeRet: do {
		if ((a_24203 <= b_24204)) {
		Tmp1 = a_24203;
		}
		else {
		Tmp1 = b_24204;
		}
		
		result_24205 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24205;

}

function mnewString(len_23463) {
		    return new Array(len_23463);
  

	
}

function chckRange(i_25124, a_25125, b_25126) {
			var Tmp1;

	var result_25127 = 0;

	BeforeRet: do {
			if (!(a_25125 <= i_25124)) Tmp1 = false; else {				Tmp1 = (i_25124 <= b_25126);			}		if (Tmp1) {
		result_25127 = i_25124;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_25127;

}

function mulInt(a_23839, b_23840) {
		    var result = a_23839 * b_23840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function divInt(a_23857, b_23858) {
		    if (b_23858 == 0) raiseDivByZero();
    if (b_23858 == -1 && a_23857 == 2147483647) raiseOverflow();
    return Math.trunc(a_23857 / b_23858);
  

	
}
				var to_lower_ranges_82892 = [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534];
				var to_lower_singlets_84162 = [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884];
				var to_upper_ranges_84310 = [97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466];
				var to_upper_singlets_85586 = [181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428];
var ConstSet2 = setConstr([97, 122]);

function nimCharToStr(x_21062) {
	var result_21063 = null;

		result_21063 = nimCopy(null, mnewString(1), NTI138);
		result_21063[0] = x_21062;

	return result_21063;

}
var ConstSet3 = setConstr([97, 122]);

function absInt(a_24019) {
		var Tmp1;

	var result_24020 = 0;

		if ((a_24019 < 0)) {
		Tmp1 = (a_24019 * -1);
		}
		else {
		Tmp1 = a_24019;
		}
		
		result_24020 = Tmp1;

	return result_24020;

}
var ConstSet4 = setConstr([65, 90]);
var ConstSet5 = setConstr(32, 9, 11, 13, 10, 12);

function modInt(a_23875, b_23876) {
		    if (b_23876 == 0) raiseDivByZero();
    if (b_23876 == -1 && a_23875 == 2147483647) raiseOverflow();
    return Math.trunc(a_23875 % b_23876);
  

	
}

function addChar(x_25311, c_25312) {
		x_25311.push(c_25312);

	
}
var ConstSet6 = setConstr(60, 62, 94);
var ConstSet7 = setConstr(60, 62, 94);
var ConstSet8 = setConstr(45, 43, 32);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([48, 57]);
var ConstSet11 = setConstr([48, 57]);
var ConstSet12 = setConstr([65, 90], [97, 122]);

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}
var nim_program_result = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_43237 = [0];
var utc_instance_177031 = [null];
var local_instance_177032 = [null];
var maxplies_195920 = [2];
var qplies_195922 = [8];
var nodes_195924 = [0];

function is_fat_pointer_24801(ti_24803) {
	var result_24804 = false;

	BeforeRet: do {
		result_24804 = !((ConstSet1[ti_24803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_24804;

}

function nimCopyAux(dest_24832, src_24833, n_24835) {
		switch (n_24835.kind) {
		case 0:
			break;
		case 1:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_24835.sons.length; i++) {
      nimCopyAux(dest_24832, src_24833, n_24835.sons[i]);
    }
    
			break;
		case 3:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
      for (var i = 0; i < n_24835.sons.length; ++i) {
        nimCopyAux(dest_24832, src_24833, n_24835.sons[i][1]);
      }
    
			break;
		}

	
}

function add_18638(x_18641, x_18641_Idx, y_18642) {
		      if (x_18641[x_18641_Idx] === null) { x_18641[x_18641_Idx] = []; }
      var off = x_18641[x_18641_Idx].length;
      x_18641[x_18641_Idx].length += y_18642.length;
      for (var i = 0; i < y_18642.length; ++i) {
        x_18641[x_18641_Idx][off+i] = y_18642.charCodeAt(i);
      }
    

	
}

function new_seq_23336(len_23339) {
	var result_23341 = null;

		result_23341 = new Array(len_23339); for (var i=0;i<len_23339;++i) {result_23341[i]=null;}
	return result_23341;

}

function unhandledException(e_21529) {
		var buf_21530 = [[]];
		if (!(((e_21529.message != null ? e_21529.message.length : 0) == 0))) {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(e_21529.message); } else { buf_21530[0] = e_21529.message.slice(); };
		}
		else {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit(" [")); } else { buf_21530[0] = makeNimstrLit(" ["); };
		add_18638(buf_21530, 0, e_21529.name);
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_21530[0] = makeNimstrLit("]\x0A"); };
		var cbuf_21601 = toJSStr(buf_21530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_21601);
  }
  else {
    throw cbuf_21601;
  }
  

	
}

function sys_fatal_15062(message_15066) {
		var e_15203 = null;
		e_15203 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_15203.message = nimCopy(null, message_15066, NTI138);
		raiseException(e_15203, "AssertionError");

	
}

function raise_assert_15058(msg_15060) {
		sys_fatal_15062(msg_15060);

	
}

function failed_assert_impl_15266(msg_15268) {
		raise_assert_15058(msg_15268);

	
}

function raiseOverflow() {
		var eHEX60gensym22058_22203 = null;
		eHEX60gensym22058_22203 = {m_type: NTI3646, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22058_22203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		eHEX60gensym22058_22203.parent = null;
		raiseException(eHEX60gensym22058_22203, "OverflowError");

	
}

function raiseIndexError(i_22655, a_22656, b_22657) {
		var Tmp1;

		var eHEX60gensym22802_23003 = null;
		eHEX60gensym22802_23003 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_22657 < a_22656)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_22655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_22656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_22657)+"") || []);
		}
		
		eHEX60gensym22802_23003.message = nimCopy(null, Tmp1, NTI138);
		eHEX60gensym22802_23003.parent = null;
		raiseException(eHEX60gensym22802_23003, "IndexError");

	
}

function substr_eq_156704(s_156706, pos_156707, substr_156708) {
	var result_156709 = false;

	BeforeRet: do {
		var i_156711 = 0;
		var length_156712 = (substr_156708 != null ? substr_156708.length : 0);
		L1: do {
				L2: while (true) {
				if (!(((i_156711 < length_156712) && (addInt(pos_156707, i_156711) < (s_156706 != null ? s_156706.length : 0))) && (s_156706[chckIndx(addInt(pos_156707, i_156711), 0, (s_156706 != null ? s_156706.length : 0)+0-1)-0] == substr_156708[chckIndx(i_156711, 0, (substr_156708 != null ? substr_156708.length : 0)+0-1)-0]))) break L2;
					i_156711 = addInt(i_156711, 1);
				}
		} while(false);
		result_156709 = (i_156711 == length_156712);
		break BeforeRet;
	} while (false);

	return result_156709;

}

function raiseRangeError() {
		var eHEX60gensym22457_22603 = null;
		eHEX60gensym22457_22603 = {m_type: NTI3662, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22457_22603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		eHEX60gensym22457_22603.parent = null;
		raiseException(eHEX60gensym22457_22603, "RangeError");

	
}

function substr_30422(s_30424, first_30425, last_30426) {
	var result_30427 = null;

		var first_30428 = nimMax(first_30425, 0);
		var l_30430 = nimMax(addInt(subInt(nimMin(last_30426, (s_30424 != null ? (s_30424.length-1) : -1)), first_30428), 1), 0);
		result_30427 = nimCopy(null, mnewString(chckRange(l_30430, 0, 2147483647)), NTI138);
		L1: do {
			var i_30439 = 0;
			var colontmp__204792 = 0;
			colontmp__204792 = subInt(l_30430, 1);
			var res_204793 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_204793 <= colontmp__204792)) break L3;
						i_30439 = res_204793;
						result_30427[chckIndx(i_30439, 0, (result_30427 != null ? result_30427.length : 0)+0-1)-0] = s_30424[chckIndx(addInt(i_30439, first_30428), 0, (s_30424 != null ? s_30424.length : 0)+0-1)-0];
						res_204793 = addInt(res_204793, 1);
					}
			} while(false);
		} while(false);

	return result_30427;

}

function nsuSplitString(s_157546, sep_157547, maxsplit_157549) {
	var result_157551 = null;

		if (!((0 < (sep_157547 != null ? sep_157547.length : 0)))) {
		failed_assert_impl_15266(makeNimstrLit("strutils.nim(769, 11) `sep.len > 0` "));
		}
		
		result_157551 = nimCopy(null, [], NTI157616);
		L1: do {
			var xHEX60gensym157601_157617 = null;
			var lastHEX60gensym156915_204773 = 0;
			var splitsHEX60gensym156916_204774 = maxsplit_157549;
			L2: do {
					L3: while (true) {
					if (!(lastHEX60gensym156915_204773 <= (s_157546 != null ? s_157546.length : 0))) break L3;
						var firstHEX60gensym156917_204776 = lastHEX60gensym156915_204773;
						L4: do {
								L5: while (true) {
								if (!((lastHEX60gensym156915_204773 < (s_157546 != null ? s_157546.length : 0)) && !(substr_eq_156704(s_157546, lastHEX60gensym156915_204773, sep_157547)))) break L5;
									lastHEX60gensym156915_204773 = addInt(lastHEX60gensym156915_204773, 1);
								}
						} while(false);
						if ((splitsHEX60gensym156916_204774 == 0)) {
						lastHEX60gensym156915_204773 = (s_157546 != null ? s_157546.length : 0);
						}
						
						xHEX60gensym157601_157617 = substr_30422(s_157546, firstHEX60gensym156917_204776, subInt(lastHEX60gensym156915_204773, 1));
						var Tmp6 = nimCopy(null, xHEX60gensym157601_157617, NTI138);
						if (result_157551 != null) { result_157551.push(Tmp6); } else { result_157551 = [Tmp6]; };
						if ((splitsHEX60gensym156916_204774 == 0)) {
						break L2;
						}
						
						splitsHEX60gensym156916_204774 = subInt(splitsHEX60gensym156916_204774, 1);
						lastHEX60gensym156915_204773 = addInt(lastHEX60gensym156915_204773, (sep_157547 != null ? sep_157547.length : 0));
					}
			} while(false);
		} while(false);

	return result_157551;

}

function nsuJoinSep(a_161664, sep_161665) {
	var result_161666 = null;

		if ((0 < (a_161664 != null ? a_161664.length : 0))) {
		var l_161677 = mulInt((sep_161665 != null ? sep_161665.length : 0), subInt((a_161664 != null ? a_161664.length : 0), 1));
		L1: do {
			var i_161691 = 0;
			var colontmp__204801 = 0;
			colontmp__204801 = (a_161664 != null ? (a_161664.length-1) : -1);
			var res_204802 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_204802 <= colontmp__204801)) break L3;
						i_161691 = res_204802;
						l_161677 = addInt(l_161677, (a_161664[chckIndx(i_161691, 0, (a_161664 != null ? a_161664.length : 0)+0-1)-0] != null ? a_161664[chckIndx(i_161691, 0, (a_161664 != null ? a_161664.length : 0)+0-1)-0].length : 0));
						res_204802 = addInt(res_204802, 1);
					}
			} while(false);
		} while(false);
		result_161666 = nimCopy(null, mnewString(0), NTI138);
		if (result_161666 != null) { result_161666 = (result_161666).concat(a_161664[chckIndx(0, 0, (a_161664 != null ? a_161664.length : 0)+0-1)-0]); } else { result_161666 = a_161664[chckIndx(0, 0, (a_161664 != null ? a_161664.length : 0)+0-1)-0].slice(); };
		L4: do {
			var i_161711 = 0;
			var colontmp__204808 = 0;
			colontmp__204808 = (a_161664 != null ? (a_161664.length-1) : -1);
			var res_204809 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_204809 <= colontmp__204808)) break L6;
						i_161711 = res_204809;
						if (result_161666 != null) { result_161666 = (result_161666).concat(sep_161665); } else { result_161666 = sep_161665.slice(); };
						if (result_161666 != null) { result_161666 = (result_161666).concat(a_161664[chckIndx(i_161711, 0, (a_161664 != null ? a_161664.length : 0)+0-1)-0]); } else { result_161666 = a_161664[chckIndx(i_161711, 0, (a_161664 != null ? a_161664.length : 0)+0-1)-0].slice(); };
						res_204809 = addInt(res_204809, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			result_161666 = nimCopy(null, [], NTI138);
		}
		

	return result_161666;

}

function HEX5BHEX5D_204128(s_204134, x_204136) {
	var result_204138 = null;

		var a_204201 = x_204136.a;
		var l_204401 = addInt(subInt(x_204136.b, a_204201), 1);
		result_204138 = new Array(chckRange(l_204401, 0, 2147483647)); for (var i=0;i<chckRange(l_204401, 0, 2147483647);++i) {result_204138[i]=null;}		L1: do {
			var i_204416 = 0;
			var i_204817 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_204817 < l_204401)) break L3;
						i_204416 = i_204817;
						result_204138[chckIndx(i_204416, 0, (result_204138 != null ? result_204138.length : 0)+0-1)-0] = nimCopy(null, s_204134[chckIndx(addInt(i_204416, a_204201), 0, (s_204134 != null ? s_204134.length : 0)+0-1)-0], NTI138);
						i_204817 = addInt(i_204817, 1);
					}
			} while(false);
		} while(false);

	return result_204138;

}

function HEX2EHEX2E_82220(a_82224, b_82225) {
	var result_82227 = {a: 0, b: 0};

		nimCopy(result_82227, {a: a_82224, b: b_82225}, NTI62907);

	return result_82227;

}

function HEX5BHEX5D_203573(s_203579, x_203581) {
	var result_203583 = null;

		var a_203601 = x_203581.a;
		var l_203805 = addInt(subInt(subInt((s_203579 != null ? s_203579.length : 0), x_203581.b), a_203601), 1);
		result_203583 = new Array(chckRange(l_203805, 0, 2147483647)); for (var i=0;i<chckRange(l_203805, 0, 2147483647);++i) {result_203583[i]=null;}		L1: do {
			var i_203820 = 0;
			var i_204825 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_204825 < l_203805)) break L3;
						i_203820 = i_204825;
						result_203583[chckIndx(i_203820, 0, (result_203583 != null ? result_203583.length : 0)+0-1)-0] = nimCopy(null, s_203579[chckIndx(addInt(i_203820, a_203601), 0, (s_203579 != null ? s_203579.length : 0)+0-1)-0], NTI138);
						i_204825 = addInt(i_204825, 1);
					}
			} while(false);
		} while(false);

	return result_203583;

}

function HEX2EHEX2E_109239(a_109243, b_109244) {
	var result_109250 = {a: 0, b: 0};

		nimCopy(result_109250, {a: a_109243, b: b_109244}, NTI109247);

	return result_109250;

}

function parse_196290(c_196292, inv_196293) {
	var result_196294 = 0;

	BeforeRet: do {
		var f_196304 = subInt(c_196292[chckIndx(0, 0, (c_196292 != null ? c_196292.length : 0)+0-1)-0], 97);
		var r_196313 = subInt(c_196292[chckIndx(1, 0, (c_196292 != null ? c_196292.length : 0)+0-1)-0], 49);
		if (inv_196293) {
		f_196304 = subInt(7, f_196304);
		r_196313 = subInt(7, r_196313);
		}
		
		result_196294 = subInt(addInt(91, f_196304), mulInt(10, r_196313));
		break BeforeRet;
	} while (false);

	return result_196294;

}

function find_164486(a_164490, item_164491) {
	var result_164492 = 0;

	BeforeRet: do {
		L1: do {
			var i_164523 = 0;
			var i_204837 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_204837 < (a_164490 != null ? a_164490.length : 0))) break L3;
						i_164523 = a_164490[chckIndx(i_204837, 0, (a_164490 != null ? a_164490.length : 0)+0-1)-0];
						if ((i_164523 == item_164491)) {
						break BeforeRet;
						}
						
						result_164492 = addInt(result_164492, 1);
						i_204837 = addInt(i_204837, 1);
					}
			} while(false);
		} while(false);
		result_164492 = -1;
	} while (false);

	return result_164492;

}

function contains_164479(a_164483, item_164484) {
	var result_164485 = false;

	BeforeRet: do {
		result_164485 = (0 <= find_164486(a_164483, item_164484));
		break BeforeRet;
	} while (false);

	return result_164485;

}

function raiseDivByZero() {
		var eHEX60gensym22257_22403 = null;
		eHEX60gensym22257_22403 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22257_22403.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		eHEX60gensym22257_22403.parent = null;
		raiseException(eHEX60gensym22257_22403, "DivByZeroError");

	
}

function binary_search_86759(c_86761, tab_86763, len_86764, stride_86765) {
			var Tmp3;

	var result_86766 = 0;

	BeforeRet: do {
		var n_86767 = len_86764;
		var t_86769 = 0;
		L1: do {
				L2: while (true) {
				if (!(1 < n_86767)) break L2;
					var m_86772 = divInt(n_86767, 2);
					var p_86773 = addInt(t_86769, mulInt(m_86772, stride_86765));
					if ((tab_86763[chckIndx(p_86773, 0, (tab_86763 != null ? tab_86763.length : 0)+0-1)-0] <= ((c_86761)|0))) {
					t_86769 = p_86773;
					n_86767 = subInt(n_86767, m_86772);
					}
					else {
						n_86767 = m_86772;
					}
					
				}
		} while(false);
			if (!!((n_86767 == 0))) Tmp3 = false; else {				Tmp3 = (tab_86763[chckIndx(t_86769, 0, (tab_86763 != null ? tab_86763.length : 0)+0-1)-0] <= ((c_86761)|0));			}		if (Tmp3) {
		result_86766 = t_86769;
		break BeforeRet;
		}
		
		result_86766 = -1;
		break BeforeRet;
	} while (false);

	return result_86766;

}

function nucisUpper(c_87041) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_87042 = false;

	BeforeRet: do {
		var c_87043 = c_87041;
		var p_87067 = binary_search_86759(c_87043, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534], 45, 3);
			if (!(0 <= p_87067)) Tmp2 = false; else {				Tmp2 = (to_lower_ranges_82892[chckIndx(p_87067, 0, (to_lower_ranges_82892 != null ? to_lower_ranges_82892.length : 0)+0-1)-0] <= ((c_87043)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_87043)|0) <= to_lower_ranges_82892[chckIndx(addInt(p_87067, 1), 0, (to_lower_ranges_82892 != null ? to_lower_ranges_82892.length : 0)+0-1)-0]);			}		if (Tmp1) {
		result_87042 = true;
		break BeforeRet;
		}
		
		p_87067 = binary_search_86759(c_87043, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884], 610, 2);
			if (!(0 <= p_87067)) Tmp3 = false; else {				Tmp3 = (((c_87043)|0) == to_lower_singlets_84162[chckIndx(p_87067, 0, (to_lower_singlets_84162 != null ? to_lower_singlets_84162.length : 0)+0-1)-0]);			}		if (Tmp3) {
		result_87042 = true;
		break BeforeRet;
		}
		
	} while (false);

	return result_87042;

}

function nuctoLower(c_86790) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_86791 = 0;

	BeforeRet: do {
		var c_86792 = c_86790;
		var p_86816 = binary_search_86759(c_86792, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534], 45, 3);
			if (!(0 <= p_86816)) Tmp2 = false; else {				Tmp2 = (to_lower_ranges_82892[chckIndx(p_86816, 0, (to_lower_ranges_82892 != null ? to_lower_ranges_82892.length : 0)+0-1)-0] <= ((c_86792)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_86792)|0) <= to_lower_ranges_82892[chckIndx(addInt(p_86816, 1), 0, (to_lower_ranges_82892 != null ? to_lower_ranges_82892.length : 0)+0-1)-0]);			}		if (Tmp1) {
		result_86791 = subInt(addInt(((c_86792)|0), to_lower_ranges_82892[chckIndx(addInt(p_86816, 2), 0, (to_lower_ranges_82892 != null ? to_lower_ranges_82892.length : 0)+0-1)-0]), 500);
		break BeforeRet;
		}
		
		p_86816 = binary_search_86759(c_86792, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884], 610, 2);
			if (!(0 <= p_86816)) Tmp3 = false; else {				Tmp3 = (((c_86792)|0) == to_lower_singlets_84162[chckIndx(p_86816, 0, (to_lower_singlets_84162 != null ? to_lower_singlets_84162.length : 0)+0-1)-0]);			}		if (Tmp3) {
		result_86791 = subInt(addInt(((c_86792)|0), to_lower_singlets_84162[chckIndx(addInt(p_86816, 1), 0, (to_lower_singlets_84162 != null ? to_lower_singlets_84162.length : 0)+0-1)-0]), 500);
		break BeforeRet;
		}
		
		result_86791 = c_86792;
		break BeforeRet;
	} while (false);

	return result_86791;

}

function nucisLower(c_86973) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_86974 = false;

	BeforeRet: do {
		var c_86975 = c_86973;
		var p_86999 = binary_search_86759(c_86975, [97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466], 46, 3);
			if (!(0 <= p_86999)) Tmp2 = false; else {				Tmp2 = (to_upper_ranges_84310[chckIndx(p_86999, 0, (to_upper_ranges_84310 != null ? to_upper_ranges_84310.length : 0)+0-1)-0] <= ((c_86975)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_86975)|0) <= to_upper_ranges_84310[chckIndx(addInt(p_86999, 1), 0, (to_upper_ranges_84310 != null ? to_upper_ranges_84310.length : 0)+0-1)-0]);			}		if (Tmp1) {
		result_86974 = true;
		break BeforeRet;
		}
		
		p_86999 = binary_search_86759(c_86975, [181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428], 624, 2);
			if (!(0 <= p_86999)) Tmp3 = false; else {				Tmp3 = (((c_86975)|0) == to_upper_singlets_85586[chckIndx(p_86999, 0, (to_upper_singlets_85586 != null ? to_upper_singlets_85586.length : 0)+0-1)-0]);			}		if (Tmp3) {
		result_86974 = true;
		break BeforeRet;
		}
		
	} while (false);

	return result_86974;

}

function nuctoUpper(c_86860) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_86861 = 0;

	BeforeRet: do {
		var c_86862 = c_86860;
		var p_86886 = binary_search_86759(c_86862, [97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466], 46, 3);
			if (!(0 <= p_86886)) Tmp2 = false; else {				Tmp2 = (to_upper_ranges_84310[chckIndx(p_86886, 0, (to_upper_ranges_84310 != null ? to_upper_ranges_84310.length : 0)+0-1)-0] <= ((c_86862)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_86862)|0) <= to_upper_ranges_84310[chckIndx(addInt(p_86886, 1), 0, (to_upper_ranges_84310 != null ? to_upper_ranges_84310.length : 0)+0-1)-0]);			}		if (Tmp1) {
		result_86861 = subInt(addInt(((c_86862)|0), to_upper_ranges_84310[chckIndx(addInt(p_86886, 2), 0, (to_upper_ranges_84310 != null ? to_upper_ranges_84310.length : 0)+0-1)-0]), 500);
		break BeforeRet;
		}
		
		p_86886 = binary_search_86759(c_86862, [181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428], 624, 2);
			if (!(0 <= p_86886)) Tmp3 = false; else {				Tmp3 = (((c_86862)|0) == to_upper_singlets_85586[chckIndx(p_86886, 0, (to_upper_singlets_85586 != null ? to_upper_singlets_85586.length : 0)+0-1)-0]);			}		if (Tmp3) {
		result_86861 = subInt(addInt(((c_86862)|0), to_upper_singlets_85586[chckIndx(addInt(p_86886, 1), 0, (to_upper_singlets_85586 != null ? to_upper_singlets_85586.length : 0)+0-1)-0]), 500);
		break BeforeRet;
		}
		
		result_86861 = c_86862;
		break BeforeRet;
	} while (false);

	return result_86861;

}

function nucswapCase(s_100022) {
	var result_100023 = null;

		var i_100025 = 0;
		var result_index_100027 = 0;
		var rune_100028 = 0;
		result_100023 = nimCopy(null, mnewString(chckRange((s_100022 != null ? s_100022.length : 0), 0, 2147483647)), NTI138);
		L1: do {
				L2: while (true) {
				if (!(i_100025 < (s_100022 != null ? s_100022.length : 0))) break L2;
					if ((s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] <= 127)) {
					rune_100028 = chckRange(s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0], -2147483648, 2147483647);
					i_100025 = addInt(i_100025, 1);
					}
					else {
					if ((((s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((i_100025 <= subInt((s_100022 != null ? s_100022.length : 0), 2))) {
					rune_100028 = chckRange((((s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 31) << 6) | (s_100022[chckIndx(addInt(i_100025, 1), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_100025 = addInt(i_100025, 2);
					}
					else {
						rune_100028 = 65533;
						i_100025 = addInt(i_100025, 1);
					}
					
					}
					else {
					if ((((s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
					if ((i_100025 <= subInt((s_100022 != null ? s_100022.length : 0), 3))) {
					rune_100028 = chckRange(((((s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 15) << 12) | ((s_100022[chckIndx(addInt(i_100025, 1), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63) << 6)) | (s_100022[chckIndx(addInt(i_100025, 2), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_100025 = addInt(i_100025, 3);
					}
					else {
						rune_100028 = 65533;
						i_100025 = addInt(i_100025, 1);
					}
					
					}
					else {
					if ((((s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
					if ((i_100025 <= subInt((s_100022 != null ? s_100022.length : 0), 4))) {
					rune_100028 = chckRange((((((s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 7) << 18) | ((s_100022[chckIndx(addInt(i_100025, 1), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63) << 12)) | ((s_100022[chckIndx(addInt(i_100025, 2), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63) << 6)) | (s_100022[chckIndx(addInt(i_100025, 3), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_100025 = addInt(i_100025, 4);
					}
					else {
						rune_100028 = 65533;
						i_100025 = addInt(i_100025, 1);
					}
					
					}
					else {
					if ((((s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
					if ((i_100025 <= subInt((s_100022 != null ? s_100022.length : 0), 5))) {
					rune_100028 = chckRange(((((((s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 3) << 24) | ((s_100022[chckIndx(addInt(i_100025, 1), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63) << 18)) | ((s_100022[chckIndx(addInt(i_100025, 2), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63) << 12)) | ((s_100022[chckIndx(addInt(i_100025, 3), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63) << 6)) | (s_100022[chckIndx(addInt(i_100025, 4), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_100025 = addInt(i_100025, 5);
					}
					else {
						rune_100028 = 65533;
						i_100025 = addInt(i_100025, 1);
					}
					
					}
					else {
					if ((((s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
					if ((i_100025 <= subInt((s_100022 != null ? s_100022.length : 0), 6))) {
					rune_100028 = chckRange((((((((s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 1) << 30) | ((s_100022[chckIndx(addInt(i_100025, 1), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63) << 24)) | ((s_100022[chckIndx(addInt(i_100025, 2), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63) << 18)) | ((s_100022[chckIndx(addInt(i_100025, 3), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63) << 12)) | ((s_100022[chckIndx(addInt(i_100025, 4), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63) << 6)) | (s_100022[chckIndx(addInt(i_100025, 5), 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_100025 = addInt(i_100025, 6);
					}
					else {
						rune_100028 = 65533;
						i_100025 = addInt(i_100025, 1);
					}
					
					}
					else {
						rune_100028 = chckRange(s_100022[chckIndx(i_100025, 0, (s_100022 != null ? s_100022.length : 0)+0-1)-0], -2147483648, 2147483647);
						i_100025 = addInt(i_100025, 1);
					}
					}}}}}
					if (nucisUpper(rune_100028)) {
					rune_100028 = nuctoLower(rune_100028);
					}
					else {
					if (nucisLower(rune_100028)) {
					rune_100028 = nuctoUpper(rune_100028);
					}
					}
					var iHEX60gensym102607_102608 = rune_100028;
					if ((iHEX60gensym102607_102608 <= 127)) {
					(result_100023 == null ? result_100023 = mnewString(chckRange(addInt(result_index_100027, 1), 0, 2147483647)) : result_100023.length = chckRange(addInt(result_index_100027, 1), 0, 2147483647));
					result_100023[chckIndx(addInt(result_index_100027, 0), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange(iHEX60gensym102607_102608, 0, 255);
					result_index_100027 = addInt(result_index_100027, 1);
					}
					else {
					if ((iHEX60gensym102607_102608 <= 2047)) {
					(result_100023 == null ? result_100023 = mnewString(chckRange(addInt(result_index_100027, 2), 0, 2147483647)) : result_100023.length = chckRange(addInt(result_index_100027, 2), 0, 2147483647));
					result_100023[chckIndx(addInt(result_index_100027, 0), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102607_102608 >> 6) | 192), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 1), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102607_102608 & 63) | 128), 0, 255);
					result_index_100027 = addInt(result_index_100027, 2);
					}
					else {
					if ((iHEX60gensym102607_102608 <= 65535)) {
					(result_100023 == null ? result_100023 = mnewString(chckRange(addInt(result_index_100027, 3), 0, 2147483647)) : result_100023.length = chckRange(addInt(result_index_100027, 3), 0, 2147483647));
					result_100023[chckIndx(addInt(result_index_100027, 0), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102607_102608 >> 12) | 224), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 1), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102607_102608 >> 6) & 63) | 128), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 2), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102607_102608 & 63) | 128), 0, 255);
					result_index_100027 = addInt(result_index_100027, 3);
					}
					else {
					if ((iHEX60gensym102607_102608 <= 2097151)) {
					(result_100023 == null ? result_100023 = mnewString(chckRange(addInt(result_index_100027, 4), 0, 2147483647)) : result_100023.length = chckRange(addInt(result_index_100027, 4), 0, 2147483647));
					result_100023[chckIndx(addInt(result_index_100027, 0), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102607_102608 >> 18) | 240), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 1), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102607_102608 >> 12) & 63) | 128), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 2), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102607_102608 >> 6) & 63) | 128), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 3), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102607_102608 & 63) | 128), 0, 255);
					result_index_100027 = addInt(result_index_100027, 4);
					}
					else {
					if ((iHEX60gensym102607_102608 <= 67108863)) {
					(result_100023 == null ? result_100023 = mnewString(chckRange(addInt(result_index_100027, 5), 0, 2147483647)) : result_100023.length = chckRange(addInt(result_index_100027, 5), 0, 2147483647));
					result_100023[chckIndx(addInt(result_index_100027, 0), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102607_102608 >> 24) | 248), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 1), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102607_102608 >> 18) & 63) | 128), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 2), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102607_102608 >> 12) & 63) | 128), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 3), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102607_102608 >> 6) & 63) | 128), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 4), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102607_102608 & 63) | 128), 0, 255);
					result_index_100027 = addInt(result_index_100027, 5);
					}
					else {
					if ((iHEX60gensym102607_102608 <= 2147483647)) {
					(result_100023 == null ? result_100023 = mnewString(chckRange(addInt(result_index_100027, 6), 0, 2147483647)) : result_100023.length = chckRange(addInt(result_index_100027, 6), 0, 2147483647));
					result_100023[chckIndx(addInt(result_index_100027, 0), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102607_102608 >> 30) | 252), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 1), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102607_102608 >> 24) & 63) | 128), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 2), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102607_102608 >> 18) & 63) | 128), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 3), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102607_102608 >> 12) & 63) | 128), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 4), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102607_102608 >> 6) & 63) | 128), 0, 255);
					result_100023[chckIndx(addInt(result_index_100027, 5), 0, (result_100023 != null ? result_100023.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102607_102608 & 63) | 128), 0, 255);
					result_index_100027 = addInt(result_index_100027, 6);
					}
					else {
					}
					}}}}}
				}
		} while(false);

	return result_100023;

}

function nucisCombining(c_87235) {
		var Tmp1;
			var Tmp2;
			var Tmp3;
			var Tmp4;
			var Tmp5;
				var Tmp6;
				var Tmp7;
				var Tmp8;
				var Tmp9;

	var result_87236 = false;

	BeforeRet: do {
		var c_87237 = c_87235;
		if (!(768 <= c_87237)) Tmp1 = false; else {			if ((c_87237 <= 879)) Tmp5 = true; else {				if (!(6832 <= c_87237)) Tmp6 = false; else {					Tmp6 = (c_87237 <= 6911);				}				Tmp5 = Tmp6;			}			if (Tmp5) Tmp4 = true; else {				if (!(7616 <= c_87237)) Tmp7 = false; else {					Tmp7 = (c_87237 <= 7679);				}				Tmp4 = Tmp7;			}			if (Tmp4) Tmp3 = true; else {				if (!(8400 <= c_87237)) Tmp8 = false; else {					Tmp8 = (c_87237 <= 8447);				}				Tmp3 = Tmp8;			}			if (Tmp3) Tmp2 = true; else {				if (!(65056 <= c_87237)) Tmp9 = false; else {					Tmp9 = (c_87237 <= 65071);				}				Tmp2 = Tmp9;			}			Tmp1 = Tmp2;		}		result_87236 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_87236;

}

function reversed_121220(s_121222) {
	var result_121223 = null;

		var i_121225 = 0;
		var last_i_121227 = 0;
		var new_pos_121228 = subInt((s_121222 != null ? s_121222.length : 0), 1);
		var block_pos_121230 = 0;
		var r_121231 = 0;
		result_121223 = nimCopy(null, mnewString(chckRange((s_121222 != null ? s_121222.length : 0), 0, 2147483647)), NTI138);
		L1: do {
				L2: while (true) {
				if (!(i_121225 < (s_121222 != null ? s_121222.length : 0))) break L2;
					last_i_121227 = i_121225;
					if ((s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] <= 127)) {
					r_121231 = chckRange(s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0], -2147483648, 2147483647);
					i_121225 = addInt(i_121225, 1);
					}
					else {
					if ((((s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((i_121225 <= subInt((s_121222 != null ? s_121222.length : 0), 2))) {
					r_121231 = chckRange((((s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 31) << 6) | (s_121222[chckIndx(addInt(i_121225, 1), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_121225 = addInt(i_121225, 2);
					}
					else {
						r_121231 = 65533;
						i_121225 = addInt(i_121225, 1);
					}
					
					}
					else {
					if ((((s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
					if ((i_121225 <= subInt((s_121222 != null ? s_121222.length : 0), 3))) {
					r_121231 = chckRange(((((s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 15) << 12) | ((s_121222[chckIndx(addInt(i_121225, 1), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63) << 6)) | (s_121222[chckIndx(addInt(i_121225, 2), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_121225 = addInt(i_121225, 3);
					}
					else {
						r_121231 = 65533;
						i_121225 = addInt(i_121225, 1);
					}
					
					}
					else {
					if ((((s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
					if ((i_121225 <= subInt((s_121222 != null ? s_121222.length : 0), 4))) {
					r_121231 = chckRange((((((s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 7) << 18) | ((s_121222[chckIndx(addInt(i_121225, 1), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63) << 12)) | ((s_121222[chckIndx(addInt(i_121225, 2), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63) << 6)) | (s_121222[chckIndx(addInt(i_121225, 3), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_121225 = addInt(i_121225, 4);
					}
					else {
						r_121231 = 65533;
						i_121225 = addInt(i_121225, 1);
					}
					
					}
					else {
					if ((((s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
					if ((i_121225 <= subInt((s_121222 != null ? s_121222.length : 0), 5))) {
					r_121231 = chckRange(((((((s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 3) << 24) | ((s_121222[chckIndx(addInt(i_121225, 1), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63) << 18)) | ((s_121222[chckIndx(addInt(i_121225, 2), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63) << 12)) | ((s_121222[chckIndx(addInt(i_121225, 3), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63) << 6)) | (s_121222[chckIndx(addInt(i_121225, 4), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_121225 = addInt(i_121225, 5);
					}
					else {
						r_121231 = 65533;
						i_121225 = addInt(i_121225, 1);
					}
					
					}
					else {
					if ((((s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
					if ((i_121225 <= subInt((s_121222 != null ? s_121222.length : 0), 6))) {
					r_121231 = chckRange((((((((s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 1) << 30) | ((s_121222[chckIndx(addInt(i_121225, 1), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63) << 24)) | ((s_121222[chckIndx(addInt(i_121225, 2), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63) << 18)) | ((s_121222[chckIndx(addInt(i_121225, 3), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63) << 12)) | ((s_121222[chckIndx(addInt(i_121225, 4), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63) << 6)) | (s_121222[chckIndx(addInt(i_121225, 5), 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					i_121225 = addInt(i_121225, 6);
					}
					else {
						r_121231 = 65533;
						i_121225 = addInt(i_121225, 1);
					}
					
					}
					else {
						r_121231 = chckRange(s_121222[chckIndx(i_121225, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0], -2147483648, 2147483647);
						i_121225 = addInt(i_121225, 1);
					}
					}}}}}
					if (!(nucisCombining(r_121231))) {
					var jHEX60gensym123807_123808 = subInt(last_i_121227, 1);
					L3: do {
							L4: while (true) {
							if (!(block_pos_121230 < jHEX60gensym123807_123808)) break L4;
								result_121223[chckIndx(new_pos_121228, 0, (result_121223 != null ? result_121223.length : 0)+0-1)-0] = s_121222[chckIndx(jHEX60gensym123807_123808, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0];
								jHEX60gensym123807_123808 = subInt(jHEX60gensym123807_123808, 1);
								new_pos_121228 = subInt(new_pos_121228, 1);
							}
					} while(false);
					block_pos_121230 = subInt(last_i_121227, 1);
					}
					
				}
		} while(false);
		var jHEX60gensym123827_123828 = subInt((s_121222 != null ? s_121222.length : 0), 1);
		L5: do {
				L6: while (true) {
				if (!(block_pos_121230 < jHEX60gensym123827_123828)) break L6;
					result_121223[chckIndx(new_pos_121228, 0, (result_121223 != null ? result_121223.length : 0)+0-1)-0] = s_121222[chckIndx(jHEX60gensym123827_123828, 0, (s_121222 != null ? s_121222.length : 0)+0-1)-0];
					jHEX60gensym123827_123828 = subInt(jHEX60gensym123827_123828, 1);
					new_pos_121228 = subInt(new_pos_121228, 1);
				}
		} while(false);
		block_pos_121230 = subInt((s_121222 != null ? s_121222.length : 0), 1);

	return result_121223;

}

function rotate_196449(s_196451) {
	var result_196452 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

	BeforeRet: do {
		var ep_196454 = 0;
		var kp_196456 = 0;
		var lastcap_196458 = 0;
		if ((0 < s_196451.ep)) {
		ep_196454 = subInt(119, s_196451.ep);
		}
		
		if ((0 < s_196451.kp)) {
		kp_196456 = subInt(119, s_196451.kp);
		}
		
		if ((0 < s_196451.lastcap)) {
		lastcap_196458 = subInt(119, s_196451.lastcap);
		}
		
		nimCopy(result_196452, {board: nucswapCase(reversed_121220(s_196451.board)), score: -(s_196451.score), wc_w: s_196451.bc_w, wc_e: s_196451.bc_e, bc_w: s_196451.wc_w, bc_e: s_196451.wc_e, ep: ep_196454, kp: kp_196456, lastcap: lastcap_196458}, NTI195926);
		break BeforeRet;
	} while (false);

	return result_196452;

}

function fromfen_196486(fen_196488) {
		var Tmp1;
		var Tmp2;
		var Tmp3;
							var Tmp7;
			var Tmp8;

	var result_196489 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

	BeforeRet: do {
		var b_196490 = makeNimstrLit("         \x0A         \x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A ........\x0A         \x0A         \x0A");
		var f_196491 = nimCopy(null, (Tmp1 = nsuSplitString(fen_196488, makeNimstrLit(" "), -1), Tmp1)[chckIndx(0, 0, (Tmp1 != null ? Tmp1.length : 0)+0-1)-0], NTI138);
		var cas_196492 = nimCopy(null, (Tmp2 = nsuSplitString(fen_196488, makeNimstrLit(" "), -1), Tmp2)[chckIndx(2, 0, (Tmp2 != null ? Tmp2.length : 0)+0-1)-0], NTI138);
		var enpas_196493 = nimCopy(null, (Tmp3 = nsuSplitString(fen_196488, makeNimstrLit(" "), -1), Tmp3)[chckIndx(3, 0, (Tmp3 != null ? Tmp3.length : 0)+0-1)-0], NTI138);
		var i_196495 = 0;
		var j_196497 = 0;
		L4: do {
			var x_196499 = 0;
			var i_204831 = 0;
			var l_204832 = (f_196491 != null ? f_196491.length : 0);
			L5: do {
					L6: while (true) {
					if (!(i_204831 < l_204832)) break L6;
						x_196499 = f_196491[chckIndx(i_204831, 0, (f_196491 != null ? f_196491.length : 0)+0-1)-0];
						var a_196504 = x_196499;
							if (!(48 < a_196504)) Tmp7 = false; else {								Tmp7 = (a_196504 < 57);							}						if (Tmp7) {
						i_196495 = addInt(i_196495, subInt(a_196504, 48));
						}
						else {
						if ((a_196504 == 47)) {
						i_196495 = 0;
						j_196497 = addInt(j_196497, 1);
						}
						else {
							b_196490[chckIndx(addInt(addInt(21, mulInt(10, j_196497)), i_196495), 0, (b_196490 != null ? b_196490.length : 0)+0-1)-0] = x_196499;
							i_196495 = addInt(i_196495, 1);
						}
						}
						i_204831 = addInt(i_204831, 1);
						if (!(((f_196491 != null ? f_196491.length : 0) == l_204832))) {
						failed_assert_impl_15266(makeNimstrLit("iterators.nim(207, 11) `len(a) == L` the length of the string changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		var ep_196522 = 0;
		if (!(eqStrings(enpas_196493, makeNimstrLit("-")))) {
		ep_196522 = parse_196290(enpas_196493, false);
		}
		
		var pos_196553 = {board: nimCopy(null, b_196490, NTI138), score: 0.0, wc_w: contains_164479(cas_196492, 81), wc_e: contains_164479(cas_196492, 75), bc_w: contains_164479(cas_196492, 75), bc_e: contains_164479(cas_196492, 81), ep: ep_196522, kp: 0, lastcap: 0};
		if (eqStrings((Tmp8 = nsuSplitString(fen_196488, makeNimstrLit(" "), -1), Tmp8)[chckIndx(1, 0, (Tmp8 != null ? Tmp8.length : 0)+0-1)-0], makeNimstrLit("b"))) {
		nimCopy(pos_196553, rotate_196449(pos_196553), NTI195926);
		}
		
		nimCopy(result_196489, pos_196553, NTI195926);
		break BeforeRet;
	} while (false);

	return result_196489;

}

function nsuFindChar(s_162016, sub_162017, start_162018, last_162019) {
		var Tmp1;

	var result_162021 = 0;

	BeforeRet: do {
		if ((last_162019 == 0)) {
		Tmp1 = (s_162016 != null ? (s_162016.length-1) : -1);
		}
		else {
		Tmp1 = last_162019;
		}
		
		var last_162023 = Tmp1;
		L2: do {
			var i_162406 = 0;
			var colontmp__204923 = 0;
			colontmp__204923 = start_162018;
			var res_204924 = colontmp__204923;
			L3: do {
					L4: while (true) {
					if (!(res_204924 <= last_162023)) break L4;
						i_162406 = res_204924;
						if ((sub_162017 == s_162016[chckIndx(i_162406, 0, (s_162016 != null ? s_162016.length : 0)+0-1)-0])) {
						result_162021 = i_162406;
						break BeforeRet;
						}
						
						res_204924 = addInt(res_204924, 1);
					}
			} while(false);
		} while(false);
		result_162021 = -1;
		break BeforeRet;
	} while (false);

	return result_162021;

}

function nsuInitSkipTable(a_161749, sub_161750) {
		var m_161751 = (sub_161750 != null ? sub_161750.length : 0);
		var i_161753 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_161753 <= 248)) break L2;
					a_161749[chckIndx(chckRange(addInt(i_161753, 0), 0, 255), 0, (a_161749 != null ? a_161749.length : 0)+0-1)-0] = m_161751;
					a_161749[chckIndx(chckRange(addInt(i_161753, 1), 0, 255), 0, (a_161749 != null ? a_161749.length : 0)+0-1)-0] = m_161751;
					a_161749[chckIndx(chckRange(addInt(i_161753, 2), 0, 255), 0, (a_161749 != null ? a_161749.length : 0)+0-1)-0] = m_161751;
					a_161749[chckIndx(chckRange(addInt(i_161753, 3), 0, 255), 0, (a_161749 != null ? a_161749.length : 0)+0-1)-0] = m_161751;
					a_161749[chckIndx(chckRange(addInt(i_161753, 4), 0, 255), 0, (a_161749 != null ? a_161749.length : 0)+0-1)-0] = m_161751;
					a_161749[chckIndx(chckRange(addInt(i_161753, 5), 0, 255), 0, (a_161749 != null ? a_161749.length : 0)+0-1)-0] = m_161751;
					a_161749[chckIndx(chckRange(addInt(i_161753, 6), 0, 255), 0, (a_161749 != null ? a_161749.length : 0)+0-1)-0] = m_161751;
					a_161749[chckIndx(chckRange(addInt(i_161753, 7), 0, 255), 0, (a_161749 != null ? a_161749.length : 0)+0-1)-0] = m_161751;
					i_161753 = addInt(i_161753, 8);
				}
		} while(false);
		L3: do {
			var i_161770 = 0;
			var colontmp__204931 = 0;
			colontmp__204931 = subInt(m_161751, 1);
			var i_204932 = 0;
			L4: do {
					L5: while (true) {
					if (!(i_204932 < colontmp__204931)) break L5;
						i_161770 = i_204932;
						a_161749[chckIndx(sub_161750[chckIndx(i_161770, 0, (sub_161750 != null ? sub_161750.length : 0)+0-1)-0], 0, (a_161749 != null ? a_161749.length : 0)+0-1)-0] = subInt(subInt(m_161751, 1), i_161770);
						i_204932 = addInt(i_204932, 1);
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_161786, s_161787, sub_161788, start_161789, last_161790) {
		var Tmp1;

	var result_161792 = 0;

	BeforeRet: do {
		if ((last_161790 == 0)) {
		Tmp1 = (s_161787 != null ? (s_161787.length-1) : -1);
		}
		else {
		Tmp1 = last_161790;
		}
		
		var last_161794 = Tmp1;
		var sub_last_161795 = subInt((sub_161788 != null ? sub_161788.length : 0), 1);
		if ((sub_last_161795 == -1)) {
		result_161792 = start_161789;
		break BeforeRet;
		}
		
		var skip_161797 = start_161789;
		L2: do {
				L3: while (true) {
				if (!(sub_last_161795 <= subInt(last_161794, skip_161797))) break L3;
					var i_161798 = sub_last_161795;
					L4: do {
							L5: while (true) {
							if (!(s_161787[chckIndx(addInt(skip_161797, i_161798), 0, (s_161787 != null ? s_161787.length : 0)+0-1)-0] == sub_161788[chckIndx(i_161798, 0, (sub_161788 != null ? sub_161788.length : 0)+0-1)-0])) break L5;
								if ((i_161798 == 0)) {
								result_161792 = skip_161797;
								break BeforeRet;
								}
								
								i_161798 = subInt(i_161798, 1);
							}
					} while(false);
					skip_161797 = addInt(skip_161797, a_161786[chckIndx(s_161787[chckIndx(addInt(skip_161797, sub_last_161795), 0, (s_161787 != null ? s_161787.length : 0)+0-1)-0], 0, (a_161786 != null ? a_161786.length : 0)+0-1)-0]);
				}
		} while(false);
		result_161792 = -1;
		break BeforeRet;
	} while (false);

	return result_161792;

}

function nsuFindStr(s_162654, sub_162655, start_162656, last_162657) {
	var result_162659 = 0;

	BeforeRet: do {
		if (((s_162654 != null ? s_162654.length : 0) < (sub_162655 != null ? sub_162655.length : 0))) {
		result_162659 = -1;
		break BeforeRet;
		}
		
		if (((sub_162655 != null ? sub_162655.length : 0) == 1)) {
		result_162659 = nsuFindChar(s_162654, sub_162655[chckIndx(0, 0, (sub_162655 != null ? sub_162655.length : 0)+0-1)-0], start_162656, last_162657);
		break BeforeRet;
		}
		
		var a_162661 = [new Int32Array(256)];
		nsuInitSkipTable(a_162661[0], sub_162655);
		result_162659 = nsuFindStrA(a_162661[0], s_162654, sub_162655, start_162656, last_162657);
	} while (false);

	return result_162659;

}

function contains_163277(s_163279, sub_163280) {
	var result_163281 = false;

	BeforeRet: do {
		result_163281 = (0 <= nsuFindStr(s_163279, sub_163280, 0, 0));
		break BeforeRet;
	} while (false);

	return result_163281;

}

function HEX5BHEX5D_82281(s_82285, x_82287) {
	var result_82288 = null;

		var a_82401 = x_82287.a;
		var l_82601 = addInt(subInt(x_82287.b, a_82401), 1);
		result_82288 = nimCopy(null, mnewString(chckRange(l_82601, 0, 2147483647)), NTI138);
		L1: do {
			var i_82609 = 0;
			var i_204940 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_204940 < l_82601)) break L3;
						i_82609 = i_204940;
						result_82288[chckIndx(i_82609, 0, (result_82288 != null ? result_82288.length : 0)+0-1)-0] = s_82285[chckIndx(addInt(i_82609, a_82401), 0, (s_82285 != null ? s_82285.length : 0)+0-1)-0];
						i_204940 = addInt(i_204940, 1);
					}
			} while(false);
		} while(false);

	return result_82288;

}

function nsuIsLowerAsciiChar(c_156332) {
	var result_156333 = false;

	BeforeRet: do {
		result_156333 = (ConstSet2[c_156332] != undefined);
		break BeforeRet;
	} while (false);

	return result_156333;

}

function HEX2BHEX3D_164861(x_164865, x_164865_Idx, y_164866) {
		x_164865[x_164865_Idx] = (x_164865[x_164865_Idx] + y_164866);

	
}

function hash_43694(x_43696) {
	var result_43697 = 0;

		result_43697 = x_43696;

	return result_43697;

}

function is_filled_65018(hcode_65020) {
	var result_65021 = false;

		result_65021 = !((hcode_65020 == 0));

	return result_65021;

}

function next_try_65035(h_65037, max_hash_65038) {
	var result_65039 = 0;

		result_65039 = (addInt(h_65037, 1) & max_hash_65038);

	return result_65039;

}

function raw_get_192402(t_192406, key_192407, hc_192408, hc_192408_Idx) {
						var Tmp3;

	var result_192409 = 0;

	BeforeRet: do {
		hc_192408[hc_192408_Idx] = hash_43694(key_192407);
		if ((hc_192408[hc_192408_Idx] == 0)) {
		hc_192408[hc_192408_Idx] = 314159265;
		}
		
		if (((t_192406.data != null ? t_192406.data.length : 0) == 0)) {
		result_192409 = -1;
		break BeforeRet;
		}
		
		var h_192549 = (hc_192408[hc_192408_Idx] & (t_192406.data != null ? (t_192406.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_65018(t_192406.data[chckIndx(h_192549, 0, (t_192406.data != null ? t_192406.data.length : 0)+0-1)-0].Field0)) break L2;
						if (!(t_192406.data[chckIndx(h_192549, 0, (t_192406.data != null ? t_192406.data.length : 0)+0-1)-0].Field0 == hc_192408[hc_192408_Idx])) Tmp3 = false; else {							Tmp3 = (t_192406.data[chckIndx(h_192549, 0, (t_192406.data != null ? t_192406.data.length : 0)+0-1)-0].Field1 == key_192407);						}					if (Tmp3) {
					result_192409 = h_192549;
					break BeforeRet;
					}
					
					h_192549 = next_try_65035(h_192549, (t_192406.data != null ? (t_192406.data.length-1) : -1));
				}
		} while(false);
		result_192409 = subInt(-1, h_192549);
	} while (false);

	return result_192409;

}

function HEX5BHEX5D_197961(t_197966, key_197967) {
	var result_197968 = 0.0;

		var hcHEX60gensym65547_197969 = [0];
		var indexHEX60gensym65548_197978 = raw_get_192402(t_197966, key_197967, hcHEX60gensym65547_197969, 0);
		if ((0 <= indexHEX60gensym65548_197978)) {
		result_197968 = t_197966.data[chckIndx(indexHEX60gensym65548_197978, 0, (t_197966.data != null ? t_197966.data.length : 0)+0-1)-0].Field2;
		}
		else {
			var eHEX60gensym198202_198403 = null;
			eHEX60gensym198202_198403 = {m_type: NTI3654, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym198202_198403.message = nimCopy(null, (makeNimstrLit("key not found: ") || []).concat(nimCharToStr(key_197967) || []), NTI138);
			eHEX60gensym198202_198403.parent = null;
			raiseException(eHEX60gensym198202_198403, "KeyError");
		}
		

	return result_197968;

}

function nsuToUpperAsciiChar(c_156463) {
	var result_156464 = 0;

		if ((ConstSet3[c_156463] != undefined)) {
		result_156464 = chckRange(subInt(c_156463, 32), 0, 255);
		}
		else {
			result_156464 = c_156463;
		}
		

	return result_156464;

}

function value_197809(s_197811, fr_197812, to_197813) {
	var result_197814 = [0.0];

		var p_197815 = s_197811.board[chckIndx(fr_197812, 0, (s_197811.board != null ? s_197811.board.length : 0)+0-1)-0];
		var q_197816 = s_197811.board[chckIndx(to_197813, 0, (s_197811.board != null ? s_197811.board.length : 0)+0-1)-0];
		if (nsuIsLowerAsciiChar(q_197816)) {
		HEX2BHEX3D_164861(result_197814, 0, HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, nsuToUpperAsciiChar(q_197816)));
		}
		
		if ((p_197815 == 80)) {
		if (((21 <= to_197813) && (to_197813 <= 28))) {
		HEX2BHEX3D_164861(result_197814, 0, (HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, 81) - HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, 80)));
		}
		
		if ((to_197813 == s_197811.ep)) {
		HEX2BHEX3D_164861(result_197814, 0, HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 1.0000000000000000e+01}, {Field0: 66, Field1: 66, Field2: 3.5000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 5.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 1.0000000000000000e+03}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 3.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, 80));
		}
		
		}
		

	return result_197814[0];

}

function put_196362(board_196364, at_196365, piece_196366) {
	var result_196367 = null;

	BeforeRet: do {
		result_196367 = nimCopy(null, (HEX5BHEX5D_82281(board_196364, HEX2EHEX2E_82220(0, subInt(at_196365, 1))) || []).concat([piece_196366],HEX5BHEX5D_82281(board_196364, HEX2EHEX2E_82220(addInt(at_196365, 1), 119)) || []), NTI138);
		break BeforeRet;
	} while (false);

	return result_196367;

}

function to_float_10657(i_10659) {
	var result_10660 = 0.0;

		result_10660 = i_10659;

	return result_10660;

}

function HEX2F_27017(x_27019, y_27020) {
	var result_27021 = 0.0;

		result_27021 = (to_float_10657(x_27019) / to_float_10657(y_27020));

	return result_27021;

}

function move_198911(s_198913, fr_198914, to_198915) {
	var result_198916 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

	BeforeRet: do {
		var p_198917 = s_198913.board[chckIndx(fr_198914, 0, (s_198913.board != null ? s_198913.board.length : 0)+0-1)-0];
		var q_198918 = s_198913.board[chckIndx(to_198915, 0, (s_198913.board != null ? s_198913.board.length : 0)+0-1)-0];
		var board_198919 = nimCopy(null, s_198913.board, NTI138);
		var score_198920 = (s_198913.score + value_197809(s_198913, fr_198914, to_198915));
		var wc_w_198921 = s_198913.wc_w;
		var wc_e_198922 = s_198913.wc_e;
		var bc_w_198923 = s_198913.bc_w;
		var bc_e_198924 = s_198913.bc_e;
		var ep_198926 = 0;
		var kp_198928 = 0;
		var lastcap_198930 = 0;
		if (!((q_198918 == 46))) {
		lastcap_198930 = to_198915;
		}
		else {
			lastcap_198930 = 0;
		}
		
		board_198919 = nimCopy(null, put_196362(board_198919, to_198915, p_198917), NTI138);
		board_198919 = nimCopy(null, put_196362(board_198919, fr_198914, 46), NTI138);
		if ((fr_198914 == 91)) {
		wc_w_198921 = false;
		}
		
		if ((fr_198914 == 98)) {
		wc_e_198922 = false;
		}
		
		if ((to_198915 == 21)) {
		bc_e_198924 = false;
		}
		
		if ((to_198915 == 28)) {
		bc_w_198923 = false;
		}
		
		if ((p_198917 == 75)) {
		wc_w_198921 = false;
		wc_e_198922 = false;
		if ((absInt(subInt(to_198915, fr_198914)) == 2)) {
		kp_198928 = ((HEX2F_27017(addInt(to_198915, fr_198914), 2))|0);
		if ((to_198915 < fr_198914)) {
		board_198919 = nimCopy(null, put_196362(board_198919, 91, 46), NTI138);
		}
		else {
			board_198919 = nimCopy(null, put_196362(board_198919, 98, 46), NTI138);
		}
		
		board_198919 = nimCopy(null, put_196362(board_198919, kp_198928, 82), NTI138);
		}
		
		}
		
		if ((p_198917 == 80)) {
		if (((21 <= to_198915) && (to_198915 <= 28))) {
		board_198919 = nimCopy(null, put_196362(board_198919, to_198915, 81), NTI138);
		}
		
		if ((subInt(to_198915, fr_198914) == -20)) {
		ep_198926 = addInt(fr_198914, -10);
		}
		
		if ((to_198915 == s_198913.ep)) {
		board_198919 = nimCopy(null, put_196362(board_198919, addInt(to_198915, 10), 46), NTI138);
		}
		
		}
		
		nimCopy(result_198916, {board: nimCopy(null, board_198919, NTI138), score: score_198920, wc_w: wc_w_198921, wc_e: wc_e_198922, bc_w: bc_w_198923, bc_e: bc_e_198924, ep: ep_198926, kp: kp_198928, lastcap: lastcap_198930}, NTI195926);
		break BeforeRet;
	} while (false);

	return result_198916;

}

function epoch_time_183201() {
	var result_183203 = 0.0;

		result_183203 = HEX2F_27017(new Date().getTime(), 1000);

	return result_183203;

}

function nsuIsUpperAsciiChar(c_156356) {
	var result_156357 = false;

	BeforeRet: do {
		result_156357 = (ConstSet4[c_156356] != undefined);
		break BeforeRet;
	} while (false);

	return result_156357;

}

function raw_get_188002(t_188006, key_188007, hc_188008, hc_188008_Idx) {
						var Tmp3;

	var result_188009 = 0;

	BeforeRet: do {
		hc_188008[hc_188008_Idx] = hash_43694(key_188007);
		if ((hc_188008[hc_188008_Idx] == 0)) {
		hc_188008[hc_188008_Idx] = 314159265;
		}
		
		if (((t_188006.data != null ? t_188006.data.length : 0) == 0)) {
		result_188009 = -1;
		break BeforeRet;
		}
		
		var h_188149 = (hc_188008[hc_188008_Idx] & (t_188006.data != null ? (t_188006.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_65018(t_188006.data[chckIndx(h_188149, 0, (t_188006.data != null ? t_188006.data.length : 0)+0-1)-0].Field0)) break L2;
						if (!(t_188006.data[chckIndx(h_188149, 0, (t_188006.data != null ? t_188006.data.length : 0)+0-1)-0].Field0 == hc_188008[hc_188008_Idx])) Tmp3 = false; else {							Tmp3 = (t_188006.data[chckIndx(h_188149, 0, (t_188006.data != null ? t_188006.data.length : 0)+0-1)-0].Field1 == key_188007);						}					if (Tmp3) {
					result_188009 = h_188149;
					break BeforeRet;
					}
					
					h_188149 = next_try_65035(h_188149, (t_188006.data != null ? (t_188006.data.length-1) : -1));
				}
		} while(false);
		result_188009 = subInt(-1, h_188149);
	} while (false);

	return result_188009;

}

function HEX5BHEX5D_196731(t_196736, key_196737) {
	var result_196738 = new Int32Array(8);

		var hcHEX60gensym65547_196739 = [0];
		var indexHEX60gensym65548_196748 = raw_get_188002(t_196736, key_196737, hcHEX60gensym65547_196739, 0);
		if ((0 <= indexHEX60gensym65548_196748)) {
		nimCopy(result_196738, t_196736.data[chckIndx(indexHEX60gensym65548_196748, 0, (t_196736.data != null ? t_196736.data.length : 0)+0-1)-0].Field2, NTI187044);
		}
		else {
			var eHEX60gensym197002_197203 = null;
			eHEX60gensym197002_197203 = {m_type: NTI3654, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym197002_197203.message = nimCopy(null, (makeNimstrLit("key not found: ") || []).concat(nimCharToStr(key_196737) || []), NTI138);
			eHEX60gensym197002_197203.parent = null;
			raiseException(eHEX60gensym197002_197203, "KeyError");
		}
		

	return result_196738;

}

function nsuIsSpaceAsciiChar(c_156309) {
	var result_156310 = false;

	BeforeRet: do {
		result_156310 = (ConstSet5[c_156309] != undefined);
		break BeforeRet;
	} while (false);

	return result_156310;

}

function find_197444(a_197448, item_197449) {
	var result_197450 = 0;

	BeforeRet: do {
		L1: do {
			var i_197481 = 0;
			var i_204976 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_204976 < (a_197448 != null ? a_197448.length : 0))) break L3;
						i_197481 = a_197448[chckIndx(i_204976, 0, (a_197448 != null ? a_197448.length : 0)+0-1)-0];
						if ((i_197481 == item_197449)) {
						break BeforeRet;
						}
						
						result_197450 = addInt(result_197450, 1);
						i_204976 = addInt(i_204976, 1);
					}
			} while(false);
		} while(false);
		result_197450 = -1;
	} while (false);

	return result_197450;

}

function contains_197437(a_197441, item_197442) {
	var result_197443 = false;

	BeforeRet: do {
		result_197443 = (0 <= find_197444(a_197441, item_197442));
		break BeforeRet;
	} while (false);

	return result_197443;

}

function gen_moves_196569(s_196571) {
															var Tmp10;
															var Tmp11;
																var Tmp12;

	var result_196574 = null;

		L1: do {
			var i_196585 = 0;
			var res_204968 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_204968 <= 119)) break L3;
						i_196585 = res_204968;
						L4: do {
							var p_196586 = s_196571.board[chckIndx(i_196585, 0, (s_196571.board != null ? s_196571.board.length : 0)+0-1)-0];
							if (!(nsuIsUpperAsciiChar(p_196586))) {
							break L4;
							}
							
							L5: do {
								var d_197313 = 0;
								var colontmp__204961 = new Int32Array(8);
								nimCopy(colontmp__204961, HEX5BHEX5D_196731({data: [{Field0: 80, Field1: 80, Field2: [-10, -20, -11, -9, 0, 0, 0, 0]}, {Field0: 81, Field1: 81, Field2: [-10, 1, 10, -1, -9, 11, 9, -11]}, {Field0: 66, Field1: 66, Field2: [-9, 11, 9, -11, 0, 0, 0, 0]}, {Field0: 82, Field1: 82, Field2: [-10, 1, 10, -1, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 75, Field1: 75, Field2: [-10, 1, 10, -1, -9, 11, 9, -11]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}, {Field0: 78, Field1: 78, Field2: [-19, -8, 12, 21, 19, 8, -12, -21]}, {Field0: 0, Field1: 0, Field2: [0, 0, 0, 0, 0, 0, 0, 0]}], counter: 6}, p_196586), NTI187044);
								var i_204966 = 0;
								if ((i_204966 <= 7)) {
								L6: do {
										L7: while (true) {
										if (!true) break L7;
											d_197313 = colontmp__204961[chckIndx(i_204966, 0, (colontmp__204961 != null ? colontmp__204961.length : 0)+0-1)-0];
											if ((d_197313 == 0)) {
											break L5;
											}
											
											var j_197314 = addInt(i_196585, d_197313);
											L8: do {
													L9: while (true) {
													if (!true) break L9;
														var q_197315 = s_196571.board[chckIndx(j_197314, 0, (s_196571.board != null ? s_196571.board.length : 0)+0-1)-0];
														if ((nsuIsSpaceAsciiChar(q_197315) || nsuIsUpperAsciiChar(q_197315))) {
														break L8;
														}
														
															if (!((p_196586 == 80) && contains_197437([-10, -20], d_197313))) Tmp10 = false; else {																Tmp10 = !((q_197315 == 46));															}														if (Tmp10) {
														break L8;
														}
														
															if (!((p_196586 == 80) && (d_197313 == -20))) Tmp11 = false; else {																if ((i_196585 < 81)) Tmp12 = true; else {																	Tmp12 = !((s_196571.board[chckIndx(addInt(i_196585, -10), 0, (s_196571.board != null ? s_196571.board.length : 0)+0-1)-0] == 46));																}																Tmp11 = Tmp12;															}														if (Tmp11) {
														break L8;
														}
														
														if (((((p_196586 == 80) && contains_197437([-11, -9], d_197313)) && (q_197315 == 46)) && !(contains_197437([s_196571.ep, s_196571.kp, subInt(s_196571.kp, 1), addInt(s_196571.kp, 1)], j_197314)))) {
														break L8;
														}
														
														if (result_196574 != null) { result_196574.push({Field0: i_196585, Field1: j_197314}); } else { result_196574 = [{Field0: i_196585, Field1: j_197314}]; };
														if (((((p_196586 == 80) || (p_196586 == 78)) || (p_196586 == 75)) || nsuIsLowerAsciiChar(q_197315))) {
														break L8;
														}
														
														if ((((i_196585 == 91) && (s_196571.board[chckIndx(addInt(j_197314, 1), 0, (s_196571.board != null ? s_196571.board.length : 0)+0-1)-0] == 75)) && s_196571.wc_w)) {
														if (result_196574 != null) { result_196574.push({Field0: addInt(j_197314, 1), Field1: addInt(j_197314, -1)}); } else { result_196574 = [{Field0: addInt(j_197314, 1), Field1: addInt(j_197314, -1)}]; };
														}
														
														if ((((i_196585 == 98) && (s_196571.board[chckIndx(addInt(j_197314, -1), 0, (s_196571.board != null ? s_196571.board.length : 0)+0-1)-0] == 75)) && s_196571.wc_e)) {
														if (result_196574 != null) { result_196574.push({Field0: addInt(j_197314, -1), Field1: addInt(j_197314, 1)}); } else { result_196574 = [{Field0: addInt(j_197314, -1), Field1: addInt(j_197314, 1)}]; };
														}
														
														j_197314 = addInt(j_197314, d_197313);
													}
											} while(false);
											if ((7 <= i_204966)) {
											break L6;
											}
											
											i_204966 = addInt(i_204966, 1);
										}
								} while(false);
								}
								
							} while(false);
						} while(false);
						res_204968 = addInt(res_204968, 1);
					}
			} while(false);
		} while(false);

	return result_196574;

}

function parse_saturated_natural_71231(s_71233, b_71235, b_71235_Idx, start_71236) {
			var Tmp1;
					var Tmp4;

	var result_71238 = 0;

		var i_71239 = start_71236;
		if (((i_71239 < (s_71233 != null ? s_71233.length : 0)) && (s_71233[chckIndx(i_71239, 0, (s_71233 != null ? s_71233.length : 0)+0-1)-0] == 43))) {
		i_71239 = addInt(i_71239, 1);
		}
		
			if (!(i_71239 < (s_71233 != null ? s_71233.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet10[s_71233[chckIndx(i_71239, 0, (s_71233 != null ? s_71233.length : 0)+0-1)-0]] != undefined);			}		if (Tmp1) {
		b_71235[b_71235_Idx] = 0;
		L2: do {
				L3: while (true) {
					if (!(i_71239 < (s_71233 != null ? s_71233.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet11[s_71233[chckIndx(i_71239, 0, (s_71233 != null ? s_71233.length : 0)+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					var c_71268 = subInt(s_71233[chckIndx(i_71239, 0, (s_71233 != null ? s_71233.length : 0)+0-1)-0], 48);
					if ((b_71235[b_71235_Idx] <= divInt(subInt(2147483647, c_71268), 10))) {
					b_71235[b_71235_Idx] = addInt(mulInt(b_71235[b_71235_Idx], 10), c_71268);
					}
					else {
						b_71235[b_71235_Idx] = 2147483647;
					}
					
					i_71239 = addInt(i_71239, 1);
					L5: do {
							L6: while (true) {
							if (!((i_71239 < (s_71233 != null ? s_71233.length : 0)) && (s_71233[chckIndx(i_71239, 0, (s_71233 != null ? s_71233.length : 0)+0-1)-0] == 95))) break L6;
								i_71239 = addInt(i_71239, 1);
							}
					} while(false);
				}
		} while(false);
		result_71238 = subInt(i_71239, start_71236);
		}
		

	return result_71238;

}

function HEX5BHEX5D_109304(s_109308, x_109310) {
	var result_109311 = null;

		var a_109401 = x_109310.a;
		var l_109601 = addInt(subInt(subInt((s_109308 != null ? s_109308.length : 0), x_109310.b), a_109401), 1);
		result_109311 = nimCopy(null, mnewString(chckRange(l_109601, 0, 2147483647)), NTI138);
		L1: do {
			var i_109609 = 0;
			var i_204990 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_204990 < l_109601)) break L3;
						i_109609 = i_204990;
						result_109311[chckIndx(i_109609, 0, (result_109311 != null ? result_109311.length : 0)+0-1)-0] = s_109308[chckIndx(addInt(i_109609, a_109401), 0, (s_109308 != null ? s_109308.length : 0)+0-1)-0];
						i_204990 = addInt(i_204990, 1);
					}
			} while(false);
		} while(false);

	return result_109311;

}

function parse_standard_format_specifier_184324(s_184326, start_184327, ignore_unknown_suffix_184329) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_184330 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

		result_184330.fill = 32;
		result_184330.align = 0;
		result_184330.sign = 45;
		var i_184333 = start_184327;
		if (((addInt(i_184333, 1) < (s_184326 != null ? s_184326.length : 0)) && (ConstSet6[s_184326[chckIndx(addInt(i_184333, 1), 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0]] != undefined))) {
		result_184330.fill = s_184326[chckIndx(i_184333, 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0];
		result_184330.align = s_184326[chckIndx(addInt(i_184333, 1), 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0];
		i_184333 = addInt(i_184333, 2);
		}
		else {
		if (((i_184333 < (s_184326 != null ? s_184326.length : 0)) && (ConstSet7[s_184326[chckIndx(i_184333, 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0]] != undefined))) {
		result_184330.align = s_184326[chckIndx(i_184333, 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0];
		i_184333 = addInt(i_184333, 1);
		}
		}
		if (((i_184333 < (s_184326 != null ? s_184326.length : 0)) && (ConstSet8[s_184326[chckIndx(i_184333, 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0]] != undefined))) {
		result_184330.sign = s_184326[chckIndx(i_184333, 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0];
		i_184333 = addInt(i_184333, 1);
		}
		
		if (((i_184333 < (s_184326 != null ? s_184326.length : 0)) && (s_184326[chckIndx(i_184333, 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0] == 35))) {
		result_184330.alternateForm = true;
		i_184333 = addInt(i_184333, 1);
		}
		
			if (!((addInt(i_184333, 1) < (s_184326 != null ? s_184326.length : 0)) && (s_184326[chckIndx(i_184333, 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet9[s_184326[chckIndx(addInt(i_184333, 1), 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0]] != undefined);			}		if (Tmp1) {
		result_184330.padWithZero = true;
		i_184333 = addInt(i_184333, 1);
		}
		
		var parsed_length_184391 = parse_saturated_natural_71231(s_184326, result_184330, "minimumWidth", i_184333);
		i_184333 = addInt(i_184333, parsed_length_184391);
		if (((i_184333 < (s_184326 != null ? s_184326.length : 0)) && (s_184326[chckIndx(i_184333, 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0] == 46))) {
		i_184333 = addInt(i_184333, 1);
		var parsed_length_b_184405 = parse_saturated_natural_71231(s_184326, result_184330, "precision", i_184333);
		i_184333 = addInt(i_184333, parsed_length_b_184405);
		}
		else {
			result_184330.precision = -1;
		}
		
			if (!(i_184333 < (s_184326 != null ? s_184326.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet12[s_184326[chckIndx(i_184333, 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0]] != undefined);			}		if (Tmp2) {
		result_184330.typ = s_184326[chckIndx(i_184333, 0, (s_184326 != null ? s_184326.length : 0)+0-1)-0];
		i_184333 = addInt(i_184333, 1);
		}
		
		result_184330.endPosition = i_184333;
			if (!!((i_184333 == (s_184326 != null ? s_184326.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_184329);			}		if (Tmp3) {
		var eHEX60gensym184460_184603 = null;
		eHEX60gensym184460_184603 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym184460_184603.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_109304(s_184326, HEX2EHEX2E_109239(i_184333, 1)) || []), NTI138);
		eHEX60gensym184460_184603.parent = null;
		raiseException(eHEX60gensym184460_184603, "ValueError");
		}
		

	return result_184330;

}

function mk_digit_184054(v_184056, typ_184057) {
			var Tmp1;

	var result_184058 = null;

		if (!((v_184056 < 26))) {
		failed_assert_impl_15266(makeNimstrLit("strformat.nim(270, 9) `v < 26` "));
		}
		
		if ((v_184056 < 10)) {
		result_184058 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_184056), 0, 255)), NTI138);
		}
		else {
			if ((typ_184057 == 120)) {
			Tmp1 = 97;
			}
			else {
			Tmp1 = 65;
			}
			
			result_184058 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Tmp1, v_184056), 10), 0, 255)), NTI138);
		}
		

	return result_184058;

}

function nsuRepeatChar(c_160656, count_160657) {
	var result_160658 = null;

		result_160658 = nimCopy(null, mnewString(count_160657), NTI138);
		L1: do {
			var i_160667 = 0;
			var colontmp__205008 = 0;
			colontmp__205008 = subInt(count_160657, 1);
			var res_205009 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_205009 <= colontmp__205008)) break L3;
						i_160667 = res_205009;
						result_160658[chckIndx(i_160667, 0, (result_160658 != null ? result_160658.length : 0)+0-1)-0] = c_160656;
						res_205009 = addInt(res_205009, 1);
					}
			} while(false);
		} while(false);

	return result_160658;

}

function format_int_196010(n_196013, radix_196014, spec_196015) {
		var Tmp7;

	var result_196016 = null;

		var v_196201 = n_196013;
		var negative_196202 = (v_196201 < 0);
		if (negative_196202) {
		v_196201 = mulInt(v_196201, -1);
		}
		
		var xx_196204 = [];
		if (spec_196015.alternateForm) {
		switch (spec_196015.typ) {
		case 88:
			xx_196204 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 120:
			xx_196204 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 98:
			xx_196204 = nimCopy(null, makeNimstrLit("0b"), NTI138);
			break;
		case 111:
			xx_196204 = nimCopy(null, makeNimstrLit("0o"), NTI138);
			break;
		default: 
			break;
		}
		}
		
		if ((v_196201 == 0)) {
		result_196016 = nimCopy(null, makeNimstrLit("0"), NTI138);
		}
		else {
			result_196016 = nimCopy(null, [], NTI138);
			L1: do {
					L2: while (true) {
					if (!(0 < v_196201)) break L2;
						var d_196207 = modInt(v_196201, radix_196014);
						v_196201 = divInt(v_196201, radix_196014);
						if (result_196016 != null) { result_196016 = (result_196016).concat(mk_digit_184054(chckRange(d_196207, -2147483648, 2147483647), spec_196015.typ)); } else { result_196016 = mk_digit_184054(chckRange(d_196207, -2147483648, 2147483647), spec_196015.typ).slice(); };
					}
			} while(false);
			L3: do {
				var idx_196216 = 0;
				var colontmp__204997 = 0;
				colontmp__204997 = divInt((result_196016 != null ? result_196016.length : 0), 2);
				var i_204998 = 0;
				L4: do {
						L5: while (true) {
						if (!(i_204998 < colontmp__204997)) break L5;
							idx_196216 = i_204998;
							var Tmp6 = result_196016[chckIndx(idx_196216, 0, (result_196016 != null ? result_196016.length : 0)+0-1)-0]; result_196016[chckIndx(idx_196216, 0, (result_196016 != null ? result_196016.length : 0)+0-1)-0] = result_196016[chckIndx(subInt(subInt((result_196016 != null ? result_196016.length : 0), idx_196216), 1), 0, (result_196016 != null ? result_196016.length : 0)+0-1)-0]; result_196016[chckIndx(subInt(subInt((result_196016 != null ? result_196016.length : 0), idx_196216), 1), 0, (result_196016 != null ? result_196016.length : 0)+0-1)-0] = Tmp6;							i_204998 = addInt(i_204998, 1);
						}
				} while(false);
			} while(false);
		}
		
		if (spec_196015.padWithZero) {
		if (negative_196202) Tmp7 = true; else {			Tmp7 = !((spec_196015.sign == 45));		}		var sign_196232 = Tmp7;
		var to_fill_196237 = subInt(subInt(subInt(spec_196015.minimumWidth, (result_196016 != null ? result_196016.length : 0)), (xx_196204 != null ? xx_196204.length : 0)), (sign_196232 ? 1:0));
		if ((0 < to_fill_196237)) {
		result_196016 = nimCopy(null, (nsuRepeatChar(48, chckRange(to_fill_196237, 0, 2147483647)) || []).concat(result_196016 || []), NTI138);
		}
		
		}
		
		if (negative_196202) {
		result_196016 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_196204 || [],result_196016 || []), NTI138);
		}
		else {
		if (!((spec_196015.sign == 45))) {
		result_196016 = nimCopy(null, [spec_196015.sign].concat(xx_196204 || [],result_196016 || []), NTI138);
		}
		else {
			result_196016 = nimCopy(null, (xx_196204 || []).concat(result_196016 || []), NTI138);
		}
		}
		if ((spec_196015.align == 60)) {
		L8: do {
			var i_196245 = 0;
			var colontmp__205002 = 0;
			var colontmp__205003 = 0;
			colontmp__205002 = (result_196016 != null ? result_196016.length : 0);
			colontmp__205003 = spec_196015.minimumWidth;
			var i_205004 = colontmp__205002;
			L9: do {
					L10: while (true) {
					if (!(i_205004 < colontmp__205003)) break L10;
						i_196245 = i_205004;
						if (result_196016 != null) { addChar(result_196016, spec_196015.fill); } else { result_196016 = [spec_196015.fill]; };
						i_205004 = addInt(i_205004, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			var to_fill_196246 = subInt(spec_196015.minimumWidth, (result_196016 != null ? result_196016.length : 0));
			if ((spec_196015.align == 94)) {
			var half_196247 = divInt(to_fill_196246, 2);
			result_196016 = nimCopy(null, (nsuRepeatChar(spec_196015.fill, chckRange(half_196247, 0, 2147483647)) || []).concat(result_196016 || [],nsuRepeatChar(spec_196015.fill, chckRange(subInt(to_fill_196246, half_196247), 0, 2147483647)) || []), NTI138);
			}
			else {
				if ((0 < to_fill_196246)) {
				result_196016 = nimCopy(null, (nsuRepeatChar(spec_196015.fill, chckRange(to_fill_196246, 0, 2147483647)) || []).concat(result_196016 || []), NTI138);
				}
				
			}
			
		}
		

	return result_196016;

}

function format_value_195969(result_195972, result_195972_Idx, value_195973, specifier_195974) {
	BeforeRet: do {
		if (((specifier_195974 != null ? specifier_195974.length : 0) == 0)) {
		if (result_195972[result_195972_Idx] != null) { result_195972[result_195972_Idx] = (result_195972[result_195972_Idx]).concat(cstrToNimstr((value_195973)+"")); } else { result_195972[result_195972_Idx] = cstrToNimstr((value_195973)+"").slice(); };
		break BeforeRet;
		}
		
		var spec_195975 = parse_standard_format_specifier_184324(specifier_195974, 0, false);
		var radix_195977 = 10;
		switch (spec_195975.typ) {
		case 120:
		case 88:
			radix_195977 = 16;
			break;
		case 100:
		case 0:
			break;
		case 98:
			radix_195977 = 2;
			break;
		case 111:
			radix_195977 = 8;
			break;
		default: 
			var eHEX60gensym195979_196003 = null;
			eHEX60gensym195979_196003 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym195979_196003.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_195975.typ]), NTI138);
			eHEX60gensym195979_196003.parent = null;
			raiseException(eHEX60gensym195979_196003, "ValueError");
			break;
		}
		if (result_195972[result_195972_Idx] != null) { result_195972[result_195972_Idx] = (result_195972[result_195972_Idx]).concat(format_int_196010(value_195973, radix_195977, spec_195975)); } else { result_195972[result_195972_Idx] = format_int_196010(value_195973, radix_195977, spec_195975).slice(); };
	} while (false);

	
}

function render_195949(x_195951) {
	var result_195952 = null;

		var r_195953 = ((HEX2F_27017(subInt(x_195951, 21), 10))|0);
		var f_195954 = modInt(subInt(x_195951, 21), 10);
		var fmt_res_195958 = [mnewString(0)];
		if (fmt_res_195958[0] != null) { addChar(fmt_res_195958[0], chckRange(addInt(f_195954, 97), 0, 255)); } else { fmt_res_195958[0] = [chckRange(addInt(f_195954, 97), 0, 255)]; };
		format_value_195969(fmt_res_195958, 0, subInt(8, r_195953), []);
		result_195952 = nimCopy(null, fmt_res_195958[0], NTI138);

	return result_195952;

}

function starts_with_161304(s_161306, prefix_161307) {
		var Tmp1;

	var result_161308 = false;

		if (!(0 < (s_161306 != null ? s_161306.length : 0))) Tmp1 = false; else {			Tmp1 = (s_161306[chckIndx(0, 0, (s_161306 != null ? s_161306.length : 0)+0-1)-0] == prefix_161307);		}		result_161308 = Tmp1;

	return result_161308;

}

function isblack_198961(pos_198963) {
		var Tmp1;

	var result_198964 = false;

		if (starts_with_161304(pos_198963.board, 10)) {
		Tmp1 = true;
		}
		else {
		Tmp1 = false;
		}
		
		result_198964 = Tmp1;

	return result_198964;

}

function HEX2A_62019(x_62021, order_62022) {
	var result_62023 = 0;

		var y_62028 = subInt(order_62022, 1);
		result_62023 = subInt((x_62021 ^ y_62028), y_62028);

	return result_62023;

}

function merge_200142(a_200147, b_200150, lo_200151, m_200152, hi_200153, cmp_200157, order_200158) {
	BeforeRet: do {
		if ((HEX2A_62019(cmp_200157(a_200147[chckIndx(m_200152, 0, (a_200147 != null ? a_200147.length : 0)+0-1)-0], a_200147[chckIndx(addInt(m_200152, 1), 0, (a_200147 != null ? a_200147.length : 0)+0-1)-0]), order_200158) <= 0)) {
		break BeforeRet;
		}
		
		var j_200159 = lo_200151;
		if (!((j_200159 <= m_200152))) {
		failed_assert_impl_15266(makeNimstrLit("algorithm.nim(344, 10) `j <= m` "));
		}
		
		var bb_200402 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_200159 <= m_200152)) break L2;
					nimCopy(b_200150[chckIndx(bb_200402, 0, (b_200150 != null ? b_200150.length : 0)+0-1)-0], a_200147[chckIndx(j_200159, 0, (a_200147 != null ? a_200147.length : 0)+0-1)-0], NTI199442);
					bb_200402 = addInt(bb_200402, 1);
					j_200159 = addInt(j_200159, 1);
				}
		} while(false);
		var i_200614 = 0;
		var k_200615 = lo_200151;
		L3: do {
				L4: while (true) {
				if (!((k_200615 < j_200159) && (j_200159 <= hi_200153))) break L4;
					if ((HEX2A_62019(cmp_200157(b_200150[chckIndx(i_200614, 0, (b_200150 != null ? b_200150.length : 0)+0-1)-0], a_200147[chckIndx(j_200159, 0, (a_200147 != null ? a_200147.length : 0)+0-1)-0]), order_200158) <= 0)) {
					nimCopy(a_200147[chckIndx(k_200615, 0, (a_200147 != null ? a_200147.length : 0)+0-1)-0], b_200150[chckIndx(i_200614, 0, (b_200150 != null ? b_200150.length : 0)+0-1)-0], NTI199442);
					i_200614 = addInt(i_200614, 1);
					}
					else {
						nimCopy(a_200147[chckIndx(k_200615, 0, (a_200147 != null ? a_200147.length : 0)+0-1)-0], a_200147[chckIndx(j_200159, 0, (a_200147 != null ? a_200147.length : 0)+0-1)-0], NTI199442);
						j_200159 = addInt(j_200159, 1);
					}
					
					k_200615 = addInt(k_200615, 1);
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_200615 < j_200159)) break L6;
					nimCopy(a_200147[chckIndx(k_200615, 0, (a_200147 != null ? a_200147.length : 0)+0-1)-0], b_200150[chckIndx(i_200614, 0, (b_200150 != null ? b_200150.length : 0)+0-1)-0], NTI199442);
					k_200615 = addInt(k_200615, 1);
					i_200614 = addInt(i_200614, 1);
				}
		} while(false);
	} while (false);

	
}

function sort_200111(a_200116, cmp_200120, order_200121) {
		var n_200126 = (a_200116 != null ? a_200116.length : 0);
		var b_200128 = null;
		b_200128 = new Array(chckRange(divInt(n_200126, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_200126, 2), 0, 2147483647);++i) {b_200128[i]={Field0: 0.0, Field1: 0, Field2: 0};}		var s_200137 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_200137 < n_200126)) break L2;
					var m_200138 = subInt(subInt(n_200126, 1), s_200137);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_200138)) break L4;
								merge_200142(a_200116, b_200128, nimMax(addInt(subInt(m_200138, s_200137), 1), 0), m_200138, addInt(m_200138, s_200137), cmp_200120, order_200121);
								m_200138 = subInt(m_200138, mulInt(s_200137, 2));
							}
					} while(false);
					s_200137 = mulInt(s_200137, 2);
				}
		} while(false);

	
}

function my_cmp_200087(x_200091, y_200092) {
		var Tmp1;

	var result_200093 = 0;

		if ((y_200092["Field0"] < x_200091["Field0"])) {
		Tmp1 = -1;
		}
		else {
		Tmp1 = 1;
		}
		
		result_200093 = Tmp1;

	return result_200093;

}

function order_199431(b_199433, ply_199434, moves_199437) {
	var result_199440 = null;

		var mlist_199443 = null;
		L1: do {
			var m_199450 = {Field0: 0, Field1: 0};
			var i_205030 = 0;
			var l_205031 = (moves_199437 != null ? moves_199437.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_205030 < l_205031)) break L3;
						nimCopy(m_199450, moves_199437[chckIndx(i_205030, 0, (moves_199437 != null ? moves_199437.length : 0)+0-1)-0], NTI199084);
						var p_199451 = nsuToUpperAsciiChar(b_199433.board[chckIndx(m_199450["Field0"], 0, (b_199433.board != null ? b_199433.board.length : 0)+0-1)-0]);
						var q_199452 = nsuToUpperAsciiChar(b_199433.board[chckIndx(m_199450["Field1"], 0, (b_199433.board != null ? b_199433.board.length : 0)+0-1)-0]);
						if (!((q_199452 == 46))) {
						if (mlist_199443 != null) { mlist_199443.push({Field0: ((1.0000000000000000e+01 * HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, q_199452)) - HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_199451)), Field1: m_199450["Field0"], Field2: m_199450["Field1"]}); } else { mlist_199443 = [{Field0: ((1.0000000000000000e+01 * HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, q_199452)) - HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_199451)), Field1: m_199450["Field0"], Field2: m_199450["Field1"]}]; };
						}
						else {
						if ((m_199450["Field1"] == b_199433.ep)) {
						if (mlist_199443 != null) { mlist_199443.push({Field0: (1.0000000000000000e+01 - HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_199451)), Field1: m_199450["Field0"], Field2: m_199450["Field1"]}); } else { mlist_199443 = [{Field0: (1.0000000000000000e+01 - HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_199451)), Field1: m_199450["Field0"], Field2: m_199450["Field1"]}]; };
						}
						else {
						if (mlist_199443 != null) { mlist_199443.push({Field0: HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_199451), Field1: m_199450["Field0"], Field2: m_199450["Field1"]}); } else { mlist_199443 = [{Field0: HEX5BHEX5D_197961({data: [{Field0: 80, Field1: 80, Field2: 1.0000000000000000e+00}, {Field0: 81, Field1: 81, Field2: 5.0000000000000000e+00}, {Field0: 66, Field1: 66, Field2: 3.0000000000000000e+00}, {Field0: 82, Field1: 82, Field2: 4.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 75, Field1: 75, Field2: 6.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 0, Field1: 0, Field2: 0.0}, {Field0: 78, Field1: 78, Field2: 2.0000000000000000e+00}, {Field0: 0, Field1: 0, Field2: 0.0}], counter: 6}, p_199451), Field1: m_199450["Field0"], Field2: m_199450["Field1"]}]; };
						}
						}
						i_205030 = addInt(i_205030, 1);
						if (!(((moves_199437 != null ? moves_199437.length : 0) == l_205031))) {
						failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		sort_200111(mlist_199443, my_cmp_200087, 1);
		L4: do {
			var m_201614 = {Field0: 0.0, Field1: 0, Field2: 0};
			var i_205035 = 0;
			var l_205036 = (mlist_199443 != null ? mlist_199443.length : 0);
			L5: do {
					L6: while (true) {
					if (!(i_205035 < l_205036)) break L6;
						nimCopy(m_201614, mlist_199443[chckIndx(i_205035, 0, (mlist_199443 != null ? mlist_199443.length : 0)+0-1)-0], NTI199442);
						if (result_199440 != null) { result_199440.push({Field0: m_201614["Field1"], Field1: m_201614["Field2"]}); } else { result_199440 = [{Field0: m_201614["Field1"], Field1: m_201614["Field2"]}]; };
						i_205035 = addInt(i_205035, 1);
						if (!(((mlist_199443 != null ? mlist_199443.length : 0) == l_205036))) {
						failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);

	return result_199440;

}

function attacks_198978(pos_198980, x_198981) {
	var result_198983 = null;

		var moves_198984 = gen_moves_196569(pos_198980);
		L1: do {
			var n_198998 = 0;
			var colontmp__205061 = 0;
			colontmp__205061 = subInt((moves_198984 != null ? moves_198984.length : 0), 1);
			var res_205062 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_205062 <= colontmp__205061)) break L3;
						n_198998 = res_205062;
						var i_198999 = moves_198984[chckIndx(n_198998, 0, (moves_198984 != null ? moves_198984.length : 0)+0-1)-0]["Field0"];
						var j_199000 = moves_198984[chckIndx(n_198998, 0, (moves_198984 != null ? moves_198984.length : 0)+0-1)-0]["Field1"];
						if ((i_198999 == x_198981)) {
						if (result_198983 != null) { result_198983.push(j_199000); } else { result_198983 = [j_199000]; };
						}
						
						res_205062 = addInt(res_205062, 1);
					}
			} while(false);
		} while(false);

	return result_198983;

}

function isdead_199080(s_199082, mm_199085) {
							var Tmp11;
							var Tmp12;

	var result_199086 = false;

	BeforeRet: do {
		var check_199087 = false;
		L1: do {
			var i_199098 = 0;
			var res_205050 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_205050 <= 119)) break L3;
						i_199098 = res_205050;
						L4: do {
							var p_199099 = s_199082.board[chckIndx(i_199098, 0, (s_199082.board != null ? s_199082.board.length : 0)+0-1)-0];
							if (!(nsuIsUpperAsciiChar(p_199099))) {
							break L4;
							}
							
							var a_199100 = attacks_198978(s_199082, i_199098);
							L5: do {
								var j_199214 = 0;
								var i_205047 = 0;
								var l_205048 = (a_199100 != null ? a_199100.length : 0);
								L6: do {
										L7: while (true) {
										if (!(i_205047 < l_205048)) break L7;
											j_199214 = a_199100[chckIndx(i_205047, 0, (a_199100 != null ? a_199100.length : 0)+0-1)-0];
											if ((s_199082.board[chckIndx(j_199214, 0, (s_199082.board != null ? s_199082.board.length : 0)+0-1)-0] == 107)) {
											check_199087 = true;
											}
											
											i_205047 = addInt(i_205047, 1);
											if (!(((a_199100 != null ? a_199100.length : 0) == l_205048))) {
											failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
						} while(false);
						res_205050 = addInt(res_205050, 1);
					}
			} while(false);
		} while(false);
		if (check_199087) {
		result_199086 = false;
		break BeforeRet;
		}
		
		L8: do {
			var m_199414 = {Field0: 0, Field1: 0};
			var i_205057 = 0;
			var l_205058 = (mm_199085 != null ? mm_199085.length : 0);
			L9: do {
					L10: while (true) {
					if (!(i_205057 < l_205058)) break L10;
						nimCopy(m_199414, mm_199085[chckIndx(i_205057, 0, (mm_199085 != null ? mm_199085.length : 0)+0-1)-0], NTI199084);
						var q_199415 = s_199082.board[chckIndx(m_199414["Field1"], 0, (s_199082.board != null ? s_199082.board.length : 0)+0-1)-0];
							if (!!((q_199415 == 46))) Tmp12 = false; else {								Tmp12 = (0 < s_199082.lastcap);							}							if (!Tmp12) Tmp11 = false; else {								Tmp11 = (m_199414["Field1"] == s_199082.lastcap);							}						if (Tmp11) {
						result_199086 = false;
						break BeforeRet;
						}
						
						i_205057 = addInt(i_205057, 1);
						if (!(((mm_199085 != null ? mm_199085.length : 0) == l_205058))) {
						failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_199086 = true;
		break BeforeRet;
	} while (false);

	return result_199086;

}

function searchmax_201636(b_201638, ply_201639, alpha_201640, beta_201641) {
			var Tmp1;

	var result_201642 = 0.0;

	BeforeRet: do {
		nodes_195924[0] = addInt(nodes_195924[0], 1);
		if ((qplies_195922[0] <= ply_201639)) {
		result_201642 = b_201638.score;
		break BeforeRet;
		}
		
		if (!(contains_164479(b_201638.board, 75))) {
		result_201642 = -9.9990000000000000e+03;
		break BeforeRet;
		}
		
		if (!(contains_164479(b_201638.board, 107))) {
		result_201642 = 9.9990000000000000e+03;
		break BeforeRet;
		}
		
		var moves_201667 = order_199431(b_201638, ply_201639, gen_moves_196569(b_201638));
			if (!(maxplies_195920[0] < ply_201639)) Tmp1 = false; else {				Tmp1 = isdead_199080(b_201638, moves_201667);			}		if (Tmp1) {
		result_201642 = b_201638.score;
		break BeforeRet;
		}
		
		if ((maxplies_195920[0] < ply_201639)) {
		var mov2_201670 = null;
		L2: do {
			var i_201684 = 0;
			var colontmp__205015 = 0;
			colontmp__205015 = subInt((moves_201667 != null ? moves_201667.length : 0), 1);
			var res_205016 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_205016 <= colontmp__205015)) break L4;
						i_201684 = res_205016;
						if (!((b_201638.board[chckIndx(moves_201667[chckIndx(i_201684, 0, (moves_201667 != null ? moves_201667.length : 0)+0-1)-0]["Field1"], 0, (b_201638.board != null ? b_201638.board.length : 0)+0-1)-0] == 46))) {
						if (mov2_201670 != null) { mov2_201670.push({Field0: moves_201667[chckIndx(i_201684, 0, (moves_201667 != null ? moves_201667.length : 0)+0-1)-0]["Field0"], Field1: moves_201667[chckIndx(i_201684, 0, (moves_201667 != null ? moves_201667.length : 0)+0-1)-0]["Field1"]}); } else { mov2_201670 = [{Field0: moves_201667[chckIndx(i_201684, 0, (moves_201667 != null ? moves_201667.length : 0)+0-1)-0]["Field0"], Field1: moves_201667[chckIndx(i_201684, 0, (moves_201667 != null ? moves_201667.length : 0)+0-1)-0]["Field1"]}]; };
						}
						
						res_205016 = addInt(res_205016, 1);
					}
			} while(false);
		} while(false);
		moves_201667 = nimCopy(null, mov2_201670, NTI201668);
		}
		
		if (((moves_201667 != null ? moves_201667.length : 0) == 0)) {
		result_201642 = b_201638.score;
		break BeforeRet;
		}
		
		var al_201698 = alpha_201640;
		L5: do {
			var i_201712 = 0;
			var colontmp__205022 = 0;
			colontmp__205022 = subInt((moves_201667 != null ? moves_201667.length : 0), 1);
			var res_205023 = 0;
			L6: do {
					L7: while (true) {
					if (!(res_205023 <= colontmp__205022)) break L7;
						i_201712 = res_205023;
						var c_201713 = move_198911(b_201638, moves_201667[chckIndx(i_201712, 0, (moves_201667 != null ? moves_201667.length : 0)+0-1)-0]["Field0"], moves_201667[chckIndx(i_201712, 0, (moves_201667 != null ? moves_201667.length : 0)+0-1)-0]["Field1"]);
						var d_201714 = rotate_196449(c_201713);
						var t_201715 = -(searchmax_201636(d_201714, addInt(ply_201639, 1), -(beta_201641), -(al_201698)));
						if ((beta_201641 <= t_201715)) {
						result_201642 = beta_201641;
						break BeforeRet;
						}
						
						if ((al_201698 < t_201715)) {
						al_201698 = t_201715;
						}
						
						res_205023 = addInt(res_205023, 1);
					}
			} while(false);
		} while(false);
		result_201642 = al_201698;
		break BeforeRet;
	} while (false);

	return result_201642;

}

function defenders_199036(pos_199038, x_199039) {
	var result_199041 = null;

		var db_199042 = {board: nimCopy(null, pos_199038.board, NTI138), score: pos_199038.score, wc_w: pos_199038.wc_w, wc_e: pos_199038.wc_e, bc_w: pos_199038.bc_w, bc_e: pos_199038.bc_e, ep: pos_199038.ep, kp: pos_199038.kp, lastcap: 0};
		db_199042.board[chckIndx(x_199039, 0, (db_199042.board != null ? db_199042.board.length : 0)+0-1)-0] = 112;
		var moves_199043 = gen_moves_196569(db_199042);
		L1: do {
			var n_199057 = 0;
			var colontmp__205096 = 0;
			colontmp__205096 = subInt((moves_199043 != null ? moves_199043.length : 0), 1);
			var res_205097 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_205097 <= colontmp__205096)) break L3;
						n_199057 = res_205097;
						var i_199058 = moves_199043[chckIndx(n_199057, 0, (moves_199043 != null ? moves_199043.length : 0)+0-1)-0]["Field0"];
						var j_199059 = moves_199043[chckIndx(n_199057, 0, (moves_199043 != null ? moves_199043.length : 0)+0-1)-0]["Field1"];
						if ((j_199059 == x_199039)) {
						if (result_199041 != null) { result_199041.push(i_199058); } else { result_199041 = [i_199058]; };
						}
						
						res_205097 = addInt(res_205097, 1);
					}
			} while(false);
		} while(false);

	return result_199041;

}

function HEX2DHEX3D_201844(x_201848, x_201848_Idx, y_201849) {
		x_201848[x_201848_Idx] = (x_201848[x_201848_Idx] - y_201849);

	
}

function turing_201729(s_201731) {
							var Tmp11;

	var result_201732 = [0.0];

		var bking_201733 = false;
		L1: do {
			var i_201744 = 0;
			var res_205088 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_205088 <= 119)) break L3;
						i_201744 = res_205088;
						L4: do {
							var p_201745 = s_201731.board[chckIndx(i_201744, 0, (s_201731.board != null ? s_201731.board.length : 0)+0-1)-0];
							var tt_201746 = [0.0];
							if (!(nsuIsUpperAsciiChar(p_201745))) {
							break L4;
							}
							
							var a_201747 = attacks_198978(s_201731, i_201744);
							L5: do {
								var j_201754 = 0;
								var i_205070 = 0;
								var l_205071 = (a_201747 != null ? a_201747.length : 0);
								L6: do {
										L7: while (true) {
										if (!(i_205070 < l_205071)) break L7;
											j_201754 = a_201747[chckIndx(i_205070, 0, (a_201747 != null ? a_201747.length : 0)+0-1)-0];
											if ((s_201731.board[chckIndx(j_201754, 0, (s_201731.board != null ? s_201731.board.length : 0)+0-1)-0] == 107)) {
											bking_201733 = true;
											}
											
											i_205070 = addInt(i_205070, 1);
											if (!(((a_201747 != null ? a_201747.length : 0) == l_205071))) {
											failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
							if (!((p_201745 == 80))) {
							if ((0 < (a_201747 != null ? a_201747.length : 0))) {
							L8: do {
								var j_201768 = 0;
								var i_205074 = 0;
								var l_205075 = (a_201747 != null ? a_201747.length : 0);
								L9: do {
										L10: while (true) {
										if (!(i_205074 < l_205075)) break L10;
											j_201768 = a_201747[chckIndx(i_205074, 0, (a_201747 != null ? a_201747.length : 0)+0-1)-0];
											if ((s_201731.board[chckIndx(j_201768, 0, (s_201731.board != null ? s_201731.board.length : 0)+0-1)-0] == 46)) {
											HEX2BHEX3D_164861(tt_201746, 0, 1.0000000000000000e+00);
											}
											else {
											HEX2BHEX3D_164861(tt_201746, 0, 2.0000000000000000e+00);
											}
											
											i_205074 = addInt(i_205074, 1);
											if (!(((a_201747 != null ? a_201747.length : 0) == l_205075))) {
											failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
							}
							
							HEX2BHEX3D_164861(result_201732, 0, Math.sqrt(tt_201746[0]));
							}
							
							if ((((p_201745 == 82) || (p_201745 == 66)) || (p_201745 == 78))) {
							var ndef_201795 = ((Tmp11 = defenders_199036(s_201731, i_201744), Tmp11) != null ? Tmp11.length : 0);
							if ((0 < ndef_201795)) {
							HEX2BHEX3D_164861(result_201732, 0, 1.0000000000000000e+00);
							}
							
							if ((1 < ndef_201795)) {
							HEX2BHEX3D_164861(result_201732, 0, 5.0000000000000000e-01);
							}
							
							}
							
							if ((p_201745 == 75)) {
							var ks_201814 = {board: nimCopy(null, s_201731.board, NTI138), score: s_201731.score, wc_w: s_201731.wc_w, wc_e: s_201731.wc_e, bc_w: s_201731.bc_w, bc_e: s_201731.bc_e, ep: s_201731.ep, kp: s_201731.kp, lastcap: 0};
							tt_201746[0] = 0.0;
							ks_201814.board[chckIndx(i_201744, 0, (ks_201814.board != null ? ks_201814.board.length : 0)+0-1)-0] = 81;
							var ka_201815 = attacks_198978(ks_201814, i_201744);
							if ((0 < (ka_201815 != null ? ka_201815.length : 0))) {
							L12: do {
								var j_201829 = 0;
								var i_205079 = 0;
								var l_205080 = (ka_201815 != null ? ka_201815.length : 0);
								L13: do {
										L14: while (true) {
										if (!(i_205079 < l_205080)) break L14;
											j_201829 = ka_201815[chckIndx(i_205079, 0, (ka_201815 != null ? ka_201815.length : 0)+0-1)-0];
											if ((s_201731.board[chckIndx(j_201829, 0, (s_201731.board != null ? s_201731.board.length : 0)+0-1)-0] == 46)) {
											HEX2BHEX3D_164861(tt_201746, 0, 1.0000000000000000e+00);
											}
											else {
											HEX2BHEX3D_164861(tt_201746, 0, 2.0000000000000000e+00);
											}
											
											i_205079 = addInt(i_205079, 1);
											if (!(((ka_201815 != null ? ka_201815.length : 0) == l_205080))) {
											failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
							}
							
							HEX2DHEX3D_201844(result_201732, 0, Math.sqrt(tt_201746[0]));
							}
							
							if ((p_201745 == 80)) {
							var rad_201865 = (((6.0000000000000000e+00 - HEX2F_27017(subInt(i_201744, 21), 10)))|0);
							HEX2BHEX3D_164861(result_201732, 0, (2.0000000000000001e-01 * rad_201865));
							var pdef_201873 = defenders_199036(s_201731, i_201744);
							var pawndef_201874 = false;
							L15: do {
								var k_201881 = 0;
								var i_205085 = 0;
								var l_205086 = (pdef_201873 != null ? pdef_201873.length : 0);
								L16: do {
										L17: while (true) {
										if (!(i_205085 < l_205086)) break L17;
											k_201881 = pdef_201873[chckIndx(i_205085, 0, (pdef_201873 != null ? pdef_201873.length : 0)+0-1)-0];
											if (!((s_201731.board[chckIndx(k_201881, 0, (s_201731.board != null ? s_201731.board.length : 0)+0-1)-0] == 80))) {
											pawndef_201874 = true;
											}
											
											i_205085 = addInt(i_205085, 1);
											if (!(((pdef_201873 != null ? pdef_201873.length : 0) == l_205086))) {
											failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
							if (pawndef_201874) {
							HEX2BHEX3D_164861(result_201732, 0, 2.9999999999999999e-01);
							}
							
							}
							
						} while(false);
						res_205088 = addInt(res_205088, 1);
					}
			} while(false);
		} while(false);
		if (bking_201733) {
		HEX2BHEX3D_164861(result_201732, 0, 5.0000000000000000e-01);
		}
		

	return result_201732[0];

}

function merge_202033(a_202038, b_202041, lo_202042, m_202043, hi_202044, cmp_202048, order_202049) {
	BeforeRet: do {
		if ((HEX2A_62019(cmp_202048(a_202038[chckIndx(m_202043, 0, (a_202038 != null ? a_202038.length : 0)+0-1)-0], a_202038[chckIndx(addInt(m_202043, 1), 0, (a_202038 != null ? a_202038.length : 0)+0-1)-0]), order_202049) <= 0)) {
		break BeforeRet;
		}
		
		var j_202050 = lo_202042;
		if (!((j_202050 <= m_202043))) {
		failed_assert_impl_15266(makeNimstrLit("algorithm.nim(344, 10) `j <= m` "));
		}
		
		var bb_202402 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_202050 <= m_202043)) break L2;
					nimCopy(b_202041[chckIndx(bb_202402, 0, (b_202041 != null ? b_202041.length : 0)+0-1)-0], a_202038[chckIndx(j_202050, 0, (a_202038 != null ? a_202038.length : 0)+0-1)-0], NTI201917);
					bb_202402 = addInt(bb_202402, 1);
					j_202050 = addInt(j_202050, 1);
				}
		} while(false);
		var i_202614 = 0;
		var k_202615 = lo_202042;
		L3: do {
				L4: while (true) {
				if (!((k_202615 < j_202050) && (j_202050 <= hi_202044))) break L4;
					if ((HEX2A_62019(cmp_202048(b_202041[chckIndx(i_202614, 0, (b_202041 != null ? b_202041.length : 0)+0-1)-0], a_202038[chckIndx(j_202050, 0, (a_202038 != null ? a_202038.length : 0)+0-1)-0]), order_202049) <= 0)) {
					nimCopy(a_202038[chckIndx(k_202615, 0, (a_202038 != null ? a_202038.length : 0)+0-1)-0], b_202041[chckIndx(i_202614, 0, (b_202041 != null ? b_202041.length : 0)+0-1)-0], NTI201917);
					i_202614 = addInt(i_202614, 1);
					}
					else {
						nimCopy(a_202038[chckIndx(k_202615, 0, (a_202038 != null ? a_202038.length : 0)+0-1)-0], a_202038[chckIndx(j_202050, 0, (a_202038 != null ? a_202038.length : 0)+0-1)-0], NTI201917);
						j_202050 = addInt(j_202050, 1);
					}
					
					k_202615 = addInt(k_202615, 1);
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_202615 < j_202050)) break L6;
					nimCopy(a_202038[chckIndx(k_202615, 0, (a_202038 != null ? a_202038.length : 0)+0-1)-0], b_202041[chckIndx(i_202614, 0, (b_202041 != null ? b_202041.length : 0)+0-1)-0], NTI201917);
					k_202615 = addInt(k_202615, 1);
					i_202614 = addInt(i_202614, 1);
				}
		} while(false);
	} while (false);

	
}

function sort_202002(a_202007, cmp_202011, order_202012) {
		var n_202017 = (a_202007 != null ? a_202007.length : 0);
		var b_202019 = null;
		b_202019 = new Array(chckRange(divInt(n_202017, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_202017, 2), 0, 2147483647);++i) {b_202019[i]={Field0: 0.0, Field1: null, Field2: null, Field3: 0, Field4: 0};}		var s_202028 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_202028 < n_202017)) break L2;
					var m_202029 = subInt(subInt(n_202017, 1), s_202028);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_202029)) break L4;
								merge_202033(a_202007, b_202019, nimMax(addInt(subInt(m_202029, s_202028), 1), 0), m_202029, addInt(m_202029, s_202028), cmp_202011, order_202012);
								m_202029 = subInt(m_202029, mulInt(s_202028, 2));
							}
					} while(false);
					s_202028 = mulInt(s_202028, 2);
				}
		} while(false);

	
}

function my_cmp_201978(x_201982, y_201983) {
		var Tmp1;

	var result_201984 = 0;

		if ((y_201983["Field0"] < x_201982["Field0"])) {
		Tmp1 = -1;
		}
		else {
		Tmp1 = 1;
		}
		
		result_201984 = Tmp1;

	return result_201984;

}

function getmove_201909(b_201911, output_201912) {
	var result_201913 = null;

		nodes_195924[0] = 0;
		var start_201914 = epoch_time_183201();
		var moves_201915 = gen_moves_196569(b_201911);
		var ll_201918 = null;
		L1: do {
			var i_201932 = 0;
			var colontmp__204947 = 0;
			colontmp__204947 = subInt((moves_201915 != null ? moves_201915.length : 0), 1);
			var res_204948 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_204948 <= colontmp__204947)) break L3;
						i_201932 = res_204948;
						var fr_201933 = render_195949(moves_201915[chckIndx(i_201932, 0, (moves_201915 != null ? moves_201915.length : 0)+0-1)-0]["Field0"]);
						var to_201934 = render_195949(moves_201915[chckIndx(i_201932, 0, (moves_201915 != null ? moves_201915.length : 0)+0-1)-0]["Field1"]);
						var castle_201935 = [0.0];
						if (((b_201911.board[chckIndx(moves_201915[chckIndx(i_201932, 0, (moves_201915 != null ? moves_201915.length : 0)+0-1)-0]["Field0"], 0, (b_201911.board != null ? b_201911.board.length : 0)+0-1)-0] == 75) && (absInt(subInt(moves_201915[chckIndx(i_201932, 0, (moves_201915 != null ? moves_201915.length : 0)+0-1)-0]["Field0"], moves_201915[chckIndx(i_201932, 0, (moves_201915 != null ? moves_201915.length : 0)+0-1)-0]["Field1"])) == 2))) {
						HEX2BHEX3D_164861(castle_201935, 0, 1.0000000000000000e+00);
						}
						
						var c_201943 = move_198911(b_201911, moves_201915[chckIndx(i_201932, 0, (moves_201915 != null ? moves_201915.length : 0)+0-1)-0]["Field0"], moves_201915[chckIndx(i_201932, 0, (moves_201915 != null ? moves_201915.length : 0)+0-1)-0]["Field1"]);
						if (isblack_198961(c_201943)) {
						if ((c_201943.bc_w || c_201943.bc_e)) {
						HEX2BHEX3D_164861(castle_201935, 0, 1.0000000000000000e+00);
						}
						
						}
						else {
							if ((c_201943.wc_w || c_201943.wc_e)) {
							HEX2BHEX3D_164861(castle_201935, 0, 1.0000000000000000e+00);
							}
							
						}
						
						var d_201958 = rotate_196449(c_201943);
						var t_201959 = -(searchmax_201636(d_201958, 1, -1.0000000000000000e+06, 1.0000000000000000e+06));
						if (output_201912) {
						rawEcho(fr_201933, to_201934, makeNimstrLit(" "), cstrToNimstr((t_201959)+""), makeNimstrLit(" "), cstrToNimstr((turing_201729(c_201943))+""));
						}
						
						if (ll_201918 != null) { ll_201918.push({Field0: (t_201959 + ((turing_201729(c_201943) + castle_201935[0]) / 1.0000000000000000e+03)), Field1: nimCopy(null, fr_201933, NTI138), Field2: nimCopy(null, to_201934, NTI138), Field3: moves_201915[chckIndx(i_201932, 0, (moves_201915 != null ? moves_201915.length : 0)+0-1)-0]["Field0"], Field4: moves_201915[chckIndx(i_201932, 0, (moves_201915 != null ? moves_201915.length : 0)+0-1)-0]["Field1"]}); } else { ll_201918 = [{Field0: (t_201959 + ((turing_201729(c_201943) + castle_201935[0]) / 1.0000000000000000e+03)), Field1: nimCopy(null, fr_201933, NTI138), Field2: nimCopy(null, to_201934, NTI138), Field3: moves_201915[chckIndx(i_201932, 0, (moves_201915 != null ? moves_201915.length : 0)+0-1)-0]["Field0"], Field4: moves_201915[chckIndx(i_201932, 0, (moves_201915 != null ? moves_201915.length : 0)+0-1)-0]["Field1"]}]; };
						res_204948 = addInt(res_204948, 1);
					}
			} while(false);
		} while(false);
		sort_202002(ll_201918, my_cmp_201978, 1);
		var diff_203475 = (epoch_time_183201() - start_201914);
		var nps_203476 = (((nodes_195924[0] / diff_203475))|0);
		var fmt_res_203477 = [mnewString(0)];
		if (fmt_res_203477[0] != null) { fmt_res_203477[0] = (fmt_res_203477[0]).concat(makeNimstrLit("info depth ")); } else { fmt_res_203477[0] = makeNimstrLit("info depth "); };
		format_value_195969(fmt_res_203477, 0, maxplies_195920[0], []);
		if (fmt_res_203477[0] != null) { fmt_res_203477[0] = (fmt_res_203477[0]).concat(makeNimstrLit(" seldepth ")); } else { fmt_res_203477[0] = makeNimstrLit(" seldepth "); };
		format_value_195969(fmt_res_203477, 0, qplies_195922[0], []);
		if (fmt_res_203477[0] != null) { fmt_res_203477[0] = (fmt_res_203477[0]).concat(makeNimstrLit(" score cp ")); } else { fmt_res_203477[0] = makeNimstrLit(" score cp "); };
		format_value_195969(fmt_res_203477, 0, (((1.0000000000000000e+02 * ll_201918[chckIndx(0, 0, (ll_201918 != null ? ll_201918.length : 0)+0-1)-0]["Field0"]))|0), []);
		if (fmt_res_203477[0] != null) { fmt_res_203477[0] = (fmt_res_203477[0]).concat(makeNimstrLit(" time ")); } else { fmt_res_203477[0] = makeNimstrLit(" time "); };
		format_value_195969(fmt_res_203477, 0, (((1.0000000000000000e+03 * diff_203475))|0), []);
		if (fmt_res_203477[0] != null) { fmt_res_203477[0] = (fmt_res_203477[0]).concat(makeNimstrLit(" nodes ")); } else { fmt_res_203477[0] = makeNimstrLit(" nodes "); };
		format_value_195969(fmt_res_203477, 0, nodes_195924[0], []);
		if (fmt_res_203477[0] != null) { fmt_res_203477[0] = (fmt_res_203477[0]).concat(makeNimstrLit(" nps ")); } else { fmt_res_203477[0] = makeNimstrLit(" nps "); };
		format_value_195969(fmt_res_203477, 0, nps_203476, []);
		rawEcho(fmt_res_203477[0]);
		result_201913 = nimCopy(null, (ll_201918[chckIndx(0, 0, (ll_201918 != null ? ll_201918.length : 0)+0-1)-0]["Field1"] || []).concat(ll_201918[chckIndx(0, 0, (ll_201918 != null ? ll_201918.length : 0)+0-1)-0]["Field2"] || []), NTI138);
		if ((((b_201911.board[chckIndx(ll_201918[chckIndx(0, 0, (ll_201918 != null ? ll_201918.length : 0)+0-1)-0]["Field3"], 0, (b_201911.board != null ? b_201911.board.length : 0)+0-1)-0] == 80) && (21 <= ll_201918[chckIndx(0, 0, (ll_201918 != null ? ll_201918.length : 0)+0-1)-0]["Field4"])) && (ll_201918[chckIndx(0, 0, (ll_201918 != null ? ll_201918.length : 0)+0-1)-0]["Field4"] <= 28))) {
		result_201913 = nimCopy(null, (result_201913 || []).concat(makeNimstrLit("q") || []), NTI138);
		}
		

	return result_201913;

}

function fen_to_move_203542(fen_203544) {

function shredder_204102(l_204104) {
	var result_204105 = null;

	BeforeRet: do {
		var x_204106 = nsuSplitString(l_204104, makeNimstrLit(" "), -1);
		result_204105 = nimCopy(null, (nsuJoinSep(HEX5BHEX5D_204128(x_204106, HEX2EHEX2E_82220(0, 5)), makeNimstrLit(" ")) || []).concat(makeNimstrLit(" 0 1 ") || [],nsuJoinSep(HEX5BHEX5D_203573(x_204106, HEX2EHEX2E_109239(6, 1)), makeNimstrLit(" ")) || []), NTI138);
		break BeforeRet;
	} while (false);

	return result_204105;

}

		function getgame_fen_204475(x_204477) {
					var Tmp1;
					var Tmp2;

			var result_204478 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};

			BeforeRet: do {
				var inv_204479 = false;
				var l_204480 = null;
				if (eqStrings((Tmp1 = nsuSplitString(x_204477, makeNimstrLit(" "), -1), Tmp1)[chckIndx(6, 0, (Tmp1 != null ? Tmp1.length : 0)+0-1)-0], makeNimstrLit("moves"))) {
				l_204480 = nimCopy(null, shredder_204102(x_204477), NTI138);
				}
				else {
					l_204480 = nimCopy(null, x_204477, NTI138);
				}
				
				var ff_204514 = HEX5BHEX5D_204128(nsuSplitString(l_204480, makeNimstrLit(" "), -1), HEX2EHEX2E_82220(2, 7));
				var ff2_204515 = nsuJoinSep(ff_204514, makeNimstrLit(" "));
				var b_204516 = fromfen_196486(ff2_204515);
				if (contains_163277(ff2_204515, makeNimstrLit(" w "))) {
				side_203547 = true;
				inv_204479 = false;
				}
				else {
					side_203547 = false;
					inv_204479 = true;
				}
				
				if ((8 < ((Tmp2 = nsuSplitString(l_204480, makeNimstrLit(" "), -1), Tmp2) != null ? Tmp2.length : 0))) {
				var mm_204555 = HEX5BHEX5D_203573(nsuSplitString(l_204480, makeNimstrLit(" "), -1), HEX2EHEX2E_109239(9, 1));
				L3: do {
					var i_204562 = null;
					var i_204767 = 0;
					var l_204768 = (mm_204555 != null ? mm_204555.length : 0);
					L4: do {
							L5: while (true) {
							if (!(i_204767 < l_204768)) break L5;
								i_204562 = mm_204555[chckIndx(i_204767, 0, (mm_204555 != null ? mm_204555.length : 0)+0-1)-0];
								var fr_204598 = parse_196290(HEX5BHEX5D_82281(i_204562, HEX2EHEX2E_82220(0, 1)), inv_204479);
								var to_204634 = parse_196290(HEX5BHEX5D_82281(i_204562, HEX2EHEX2E_82220(2, 3)), inv_204479);
								var c_204635 = move_198911(b_204516, fr_204598, to_204634);
								side_203547 = !(side_203547);
								var d_204636 = rotate_196449(c_204635);
								nimCopy(b_204516, d_204636, NTI195926);
								inv_204479 = !(inv_204479);
								i_204767 = addInt(i_204767, 1);
								if (!(((mm_204555 != null ? mm_204555.length : 0) == l_204768))) {
								failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
								}
								
							}
					} while(false);
				} while(false);
				}
				
				nimCopy(result_204478, b_204516, NTI195926);
				break BeforeRet;
			} while (false);

			return result_204478;

		}

		function mirror_204650(x_204652) {
			var result_204653 = null;

			BeforeRet: do {
				var f1_204671 = chckRange(subInt(104, subInt(x_204652[chckIndx(0, 0, (x_204652 != null ? x_204652.length : 0)+0-1)-0], 97)), 0, 255);
				var f2_204689 = chckRange(subInt(104, subInt(x_204652[chckIndx(2, 0, (x_204652 != null ? x_204652.length : 0)+0-1)-0], 97)), 0, 255);
				var r1_204704 = chckRange(subInt(56, subInt(x_204652[chckIndx(1, 0, (x_204652 != null ? x_204652.length : 0)+0-1)-0], 49)), 0, 255);
				var r2_204719 = chckRange(subInt(56, subInt(x_204652[chckIndx(3, 0, (x_204652 != null ? x_204652.length : 0)+0-1)-0], 49)), 0, 255);
				result_204653 = nimCopy(null, [f1_204671].concat([r1_204704],[f2_204689],[r2_204719]), NTI138);
				break BeforeRet;
			} while (false);

			return result_204653;

		}

	var result_203545 = null;

	BeforeRet: do {
		var b_203546 = {board: null, score: 0.0, wc_w: false, wc_e: false, bc_w: false, bc_e: false, ep: 0, kp: 0, lastcap: 0};
		var side_203547 = true;
		nimCopy(b_203546, getgame_fen_204475((makeNimstrLit("position fen ") || []).concat(fen_203544 || [])), NTI195926);
		var m_204733 = getmove_201909(b_203546, false);
		if (!(side_203547)) {
		m_204733 = nimCopy(null, mirror_204650(m_204733), NTI138);
		}
		
		result_203545 = nimCopy(null, m_204733, NTI138);
		break BeforeRet;
	} while (false);

	return result_203545;

}




/* web worker code */

self.addEventListener('message', function(e) {
	self.postMessage(toJSStr(fen_to_move_203542(makeNimstrLit(e.data))));
}, false);

